ARM GAS  /tmp/cc9XwU9K.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_PWR_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_PWR_DeInit:
  27              	.LFB130:
  28              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @file    stm32f4xx_hal_pwr.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           + Peripheral Control functions 
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   ******************************************************************************
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @attention
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * Copyright (c) 2017 STMicroelectronics.
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * All rights reserved.
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file in
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * the root directory of this software component.
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   ******************************************************************************
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */ 
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #include "stm32f4xx_hal.h"
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @addtogroup STM32F4xx_HAL_Driver
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR PWR
ARM GAS  /tmp/cc9XwU9K.s 			page 2


  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief PWR HAL module driver
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @addtogroup PWR_Private_Constants
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */     
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_MODE_IT               0x00010000U
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_MODE_EVT              0x00020000U
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_RISING_EDGE           0x00000001U
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_FALLING_EDGE          0x00000002U
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @}
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @}
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */    
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @verbatim
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       write accesses. 
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @endverbatim
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
ARM GAS  /tmp/cc9XwU9K.s 			page 3


  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
  29              		.loc 1 91 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  41              		.loc 1 92 3
  42 0004 084B     		ldr	r3, .L2
  43 0006 1B6A     		ldr	r3, [r3, #32]
  44 0008 074A     		ldr	r2, .L2
  45 000a 43F08053 		orr	r3, r3, #268435456
  46 000e 1362     		str	r3, [r2, #32]
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  47              		.loc 1 93 3
  48 0010 054B     		ldr	r3, .L2
  49 0012 1B6A     		ldr	r3, [r3, #32]
  50 0014 044A     		ldr	r2, .L2
  51 0016 23F08053 		bic	r3, r3, #268435456
  52 001a 1362     		str	r3, [r2, #32]
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
  53              		.loc 1 94 1
  54 001c 00BF     		nop
  55 001e BD46     		mov	sp, r7
  56              	.LCFI2:
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 0020 5DF8047B 		ldr	r7, [sp], #4
  60              	.LCFI3:
  61              		.cfi_restore 7
  62              		.cfi_def_cfa_offset 0
  63 0024 7047     		bx	lr
  64              	.L3:
  65 0026 00BF     		.align	2
  66              	.L2:
  67 0028 00380240 		.word	1073887232
  68              		.cfi_endproc
  69              	.LFE130:
  71              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  72              		.align	1
  73              		.global	HAL_PWR_EnableBkUpAccess
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	HAL_PWR_EnableBkUpAccess:
  80              	.LFB131:
ARM GAS  /tmp/cc9XwU9K.s 			page 4


  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC 
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note The following sequence is required to bypass the delay between
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit programming and the effective enabling  of the backup domain.
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Please check the Errata Sheet for more details under "Possible delay
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         in backup domain protection disabling/enabling after programming the
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit" section.
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
  81              		.loc 1 109 1
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86 0000 80B4     		push	{r7}
  87              	.LCFI4:
  88              		.cfi_def_cfa_offset 4
  89              		.cfi_offset 7, -4
  90 0002 83B0     		sub	sp, sp, #12
  91              	.LCFI5:
  92              		.cfi_def_cfa_offset 16
  93 0004 00AF     		add	r7, sp, #0
  94              	.LCFI6:
  95              		.cfi_def_cfa_register 7
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __IO uint32_t dummyread;
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  96              		.loc 1 111 3
  97 0006 064B     		ldr	r3, .L5
  98              		.loc 1 111 32
  99 0008 0122     		movs	r2, #1
 100 000a 1A60     		str	r2, [r3]
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   dummyread = PWR->CR;
 101              		.loc 1 112 18
 102 000c 054B     		ldr	r3, .L5+4
 103 000e 1B68     		ldr	r3, [r3]
 104              		.loc 1 112 13
 105 0010 7B60     		str	r3, [r7, #4]
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   UNUSED(dummyread);
 106              		.loc 1 113 3
 107 0012 7B68     		ldr	r3, [r7, #4]
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 108              		.loc 1 114 1
 109 0014 00BF     		nop
 110 0016 0C37     		adds	r7, r7, #12
 111              	.LCFI7:
 112              		.cfi_def_cfa_offset 4
 113 0018 BD46     		mov	sp, r7
 114              	.LCFI8:
 115              		.cfi_def_cfa_register 13
 116              		@ sp needed
 117 001a 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc9XwU9K.s 			page 5


 118              	.LCFI9:
 119              		.cfi_restore 7
 120              		.cfi_def_cfa_offset 0
 121 001e 7047     		bx	lr
 122              	.L6:
 123              		.align	2
 124              	.L5:
 125 0020 20000E42 		.word	1108213792
 126 0024 00700040 		.word	1073770496
 127              		.cfi_endproc
 128              	.LFE131:
 130              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
 131              		.align	1
 132              		.global	HAL_PWR_DisableBkUpAccess
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv4-sp-d16
 138              	HAL_PWR_DisableBkUpAccess:
 139              	.LFB132:
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC 
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note The following sequence is required to bypass the delay between
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit programming and the effective disabling  of the backup domain.
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Please check the Errata Sheet for more details under "Possible delay
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         in backup domain protection disabling/enabling after programming the
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit" section.
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 140              		.loc 1 129 1
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 8
 143              		@ frame_needed = 1, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145 0000 80B4     		push	{r7}
 146              	.LCFI10:
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 7, -4
 149 0002 83B0     		sub	sp, sp, #12
 150              	.LCFI11:
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              	.LCFI12:
 154              		.cfi_def_cfa_register 7
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __IO uint32_t dummyread;
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 155              		.loc 1 131 3
 156 0006 064B     		ldr	r3, .L8
 157              		.loc 1 131 32
 158 0008 0022     		movs	r2, #0
 159 000a 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc9XwU9K.s 			page 6


 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   dummyread = PWR->CR;
 160              		.loc 1 132 18
 161 000c 054B     		ldr	r3, .L8+4
 162 000e 1B68     		ldr	r3, [r3]
 163              		.loc 1 132 13
 164 0010 7B60     		str	r3, [r7, #4]
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   UNUSED(dummyread);
 165              		.loc 1 133 3
 166 0012 7B68     		ldr	r3, [r7, #4]
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 167              		.loc 1 134 1
 168 0014 00BF     		nop
 169 0016 0C37     		adds	r7, r7, #12
 170              	.LCFI13:
 171              		.cfi_def_cfa_offset 4
 172 0018 BD46     		mov	sp, r7
 173              	.LCFI14:
 174              		.cfi_def_cfa_register 13
 175              		@ sp needed
 176 001a 5DF8047B 		ldr	r7, [sp], #4
 177              	.LCFI15:
 178              		.cfi_restore 7
 179              		.cfi_def_cfa_offset 0
 180 001e 7047     		bx	lr
 181              	.L9:
 182              		.align	2
 183              	.L8:
 184 0020 20000E42 		.word	1108213792
 185 0024 00700040 		.word	1073770496
 186              		.cfi_endproc
 187              	.LFE132:
 189              		.section	.rodata
 190              		.align	2
 191              	.LC0:
 192 0000 44726976 		.ascii	"Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr."
 192      6572732F 
 192      53544D33 
 192      32463478 
 192      785F4841 
 193 0033 6300     		.ascii	"c\000"
 194              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 195              		.align	1
 196              		.global	HAL_PWR_ConfigPVD
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu fpv4-sp-d16
 202              	HAL_PWR_ConfigPVD:
 203              	.LFB133:
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @}
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions 
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
ARM GAS  /tmp/cc9XwU9K.s 			page 7


 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @verbatim
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****      
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     *** PVD configuration ***
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     =========================
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     *** Wake-up pin configuration ***
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     ================================
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Wake-up pin is used to wake up the system from Standby mode. This pin is 
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 	   (++) For STM32F446xx there are two Wake-Up pins: Pin1 on PA.00 and Pin2 on PC.13
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****            (++) For STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx  there are three Wake-Up pins: 
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     *** Low Power modes configuration ***
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     =====================================
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           in low power mode
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Sleep mode ***
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    ==================
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Entry:
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLE
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               functions with
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32F4 family 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the 
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               lower power families (STM32L).
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Exit:
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt 
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Stop mode ***
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    =================
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       are preserved.
ARM GAS  /tmp/cc9XwU9K.s 			page 8


 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       entering the Stop mode using the HAL_PWREx_EnableFlashPowerDown() function.
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       It can be switched on again by software after exiting the Stop mode using
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       the HAL_PWREx_DisableFlashPowerDown() function. 
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Entry:
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****          The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON) 
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****              function with:
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) Main regulator ON.
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) Low Power regulator ON.
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Exit:
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Standby mode ***
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    ====================
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     (+)
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       on the Cortex-M4 deep sleep mode, with the voltage regulator disabled. 
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       circuitry.
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The voltage regulator is OFF.
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (++) Entry:
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (++) Exit:
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wake-up,
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Auto-wake-up (AWU) from low-power mode ***
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    =============================================
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       Wake-up event, a tamper event or a time-stamp event, without depending on 
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       an external interrupt (Auto-wake-up mode).
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) RTC auto-wake-up (AWU) from the Stop and Standby modes
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****        
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****                 HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****                   
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Wake-up event, it is necessary to
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               configure the RTC to generate the RTC Wake-up event using the HAL_RTCEx_SetWakeUpTime
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @endverbatim
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
ARM GAS  /tmp/cc9XwU9K.s 			page 9


 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param sConfigPVD pointer to an PWR_PVDTypeDef structure that contains the configuration
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *        information for the PVD.
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         detection level.
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 204              		.loc 1 267 1
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 8
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              	.LCFI16:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 82B0     		sub	sp, sp, #8
 214              	.LCFI17:
 215              		.cfi_def_cfa_offset 16
 216 0004 00AF     		add	r7, sp, #0
 217              	.LCFI18:
 218              		.cfi_def_cfa_register 7
 219 0006 7860     		str	r0, [r7, #4]
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameters */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 220              		.loc 1 269 3
 221 0008 7B68     		ldr	r3, [r7, #4]
 222 000a 1B68     		ldr	r3, [r3]
 223 000c 002B     		cmp	r3, #0
 224 000e 20D0     		beq	.L11
 225              		.loc 1 269 3 is_stmt 0 discriminator 1
 226 0010 7B68     		ldr	r3, [r7, #4]
 227 0012 1B68     		ldr	r3, [r3]
 228 0014 202B     		cmp	r3, #32
 229 0016 1CD0     		beq	.L11
 230              		.loc 1 269 3 discriminator 2
 231 0018 7B68     		ldr	r3, [r7, #4]
 232 001a 1B68     		ldr	r3, [r3]
 233 001c 402B     		cmp	r3, #64
 234 001e 18D0     		beq	.L11
 235              		.loc 1 269 3 discriminator 3
 236 0020 7B68     		ldr	r3, [r7, #4]
 237 0022 1B68     		ldr	r3, [r3]
 238 0024 602B     		cmp	r3, #96
 239 0026 14D0     		beq	.L11
 240              		.loc 1 269 3 discriminator 4
 241 0028 7B68     		ldr	r3, [r7, #4]
 242 002a 1B68     		ldr	r3, [r3]
 243 002c 802B     		cmp	r3, #128
 244 002e 10D0     		beq	.L11
 245              		.loc 1 269 3 discriminator 5
 246 0030 7B68     		ldr	r3, [r7, #4]
 247 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc9XwU9K.s 			page 10


 248 0034 A02B     		cmp	r3, #160
 249 0036 0CD0     		beq	.L11
 250              		.loc 1 269 3 discriminator 6
 251 0038 7B68     		ldr	r3, [r7, #4]
 252 003a 1B68     		ldr	r3, [r3]
 253 003c C02B     		cmp	r3, #192
 254 003e 08D0     		beq	.L11
 255              		.loc 1 269 3 discriminator 7
 256 0040 7B68     		ldr	r3, [r7, #4]
 257 0042 1B68     		ldr	r3, [r3]
 258 0044 E02B     		cmp	r3, #224
 259 0046 04D0     		beq	.L11
 260              		.loc 1 269 3 discriminator 8
 261 0048 40F20D11 		movw	r1, #269
 262 004c 3F48     		ldr	r0, .L18
 263 004e FFF7FEFF 		bl	assert_failed
 264              	.L11:
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 265              		.loc 1 270 3 is_stmt 1
 266 0052 7B68     		ldr	r3, [r7, #4]
 267 0054 5B68     		ldr	r3, [r3, #4]
 268 0056 B3F1011F 		cmp	r3, #65537
 269 005a 21D0     		beq	.L12
 270              		.loc 1 270 3 is_stmt 0 discriminator 1
 271 005c 7B68     		ldr	r3, [r7, #4]
 272 005e 5B68     		ldr	r3, [r3, #4]
 273 0060 3B4A     		ldr	r2, .L18+4
 274 0062 9342     		cmp	r3, r2
 275 0064 1CD0     		beq	.L12
 276              		.loc 1 270 3 discriminator 2
 277 0066 7B68     		ldr	r3, [r7, #4]
 278 0068 5B68     		ldr	r3, [r3, #4]
 279 006a 3A4A     		ldr	r2, .L18+8
 280 006c 9342     		cmp	r3, r2
 281 006e 17D0     		beq	.L12
 282              		.loc 1 270 3 discriminator 3
 283 0070 7B68     		ldr	r3, [r7, #4]
 284 0072 5B68     		ldr	r3, [r3, #4]
 285 0074 384A     		ldr	r2, .L18+12
 286 0076 9342     		cmp	r3, r2
 287 0078 12D0     		beq	.L12
 288              		.loc 1 270 3 discriminator 4
 289 007a 7B68     		ldr	r3, [r7, #4]
 290 007c 5B68     		ldr	r3, [r3, #4]
 291 007e B3F1021F 		cmp	r3, #131074
 292 0082 0DD0     		beq	.L12
 293              		.loc 1 270 3 discriminator 5
 294 0084 7B68     		ldr	r3, [r7, #4]
 295 0086 5B68     		ldr	r3, [r3, #4]
 296 0088 344A     		ldr	r2, .L18+16
 297 008a 9342     		cmp	r3, r2
 298 008c 08D0     		beq	.L12
 299              		.loc 1 270 3 discriminator 6
 300 008e 7B68     		ldr	r3, [r7, #4]
 301 0090 5B68     		ldr	r3, [r3, #4]
 302 0092 002B     		cmp	r3, #0
 303 0094 04D0     		beq	.L12
ARM GAS  /tmp/cc9XwU9K.s 			page 11


 304              		.loc 1 270 3 discriminator 7
 305 0096 4FF48771 		mov	r1, #270
 306 009a 2C48     		ldr	r0, .L18
 307 009c FFF7FEFF 		bl	assert_failed
 308              	.L12:
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 309              		.loc 1 273 3 is_stmt 1
 310 00a0 2F4B     		ldr	r3, .L18+20
 311 00a2 1B68     		ldr	r3, [r3]
 312 00a4 23F0E002 		bic	r2, r3, #224
 313 00a8 7B68     		ldr	r3, [r7, #4]
 314 00aa 1B68     		ldr	r3, [r3]
 315 00ac 2C49     		ldr	r1, .L18+20
 316 00ae 1343     		orrs	r3, r3, r2
 317 00b0 0B60     		str	r3, [r1]
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 318              		.loc 1 276 3
 319 00b2 2C4B     		ldr	r3, .L18+24
 320 00b4 5B68     		ldr	r3, [r3, #4]
 321 00b6 2B4A     		ldr	r2, .L18+24
 322 00b8 23F48033 		bic	r3, r3, #65536
 323 00bc 5360     		str	r3, [r2, #4]
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 324              		.loc 1 277 3
 325 00be 294B     		ldr	r3, .L18+24
 326 00c0 1B68     		ldr	r3, [r3]
 327 00c2 284A     		ldr	r2, .L18+24
 328 00c4 23F48033 		bic	r3, r3, #65536
 329 00c8 1360     		str	r3, [r2]
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 330              		.loc 1 278 3
 331 00ca 264B     		ldr	r3, .L18+24
 332 00cc 9B68     		ldr	r3, [r3, #8]
 333 00ce 254A     		ldr	r2, .L18+24
 334 00d0 23F48033 		bic	r3, r3, #65536
 335 00d4 9360     		str	r3, [r2, #8]
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 336              		.loc 1 279 3
 337 00d6 234B     		ldr	r3, .L18+24
 338 00d8 DB68     		ldr	r3, [r3, #12]
 339 00da 224A     		ldr	r2, .L18+24
 340 00dc 23F48033 		bic	r3, r3, #65536
 341 00e0 D360     		str	r3, [r2, #12]
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Configure interrupt mode */
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 342              		.loc 1 282 17
 343 00e2 7B68     		ldr	r3, [r7, #4]
 344 00e4 5B68     		ldr	r3, [r3, #4]
 345              		.loc 1 282 24
 346 00e6 03F48033 		and	r3, r3, #65536
 347              		.loc 1 282 5
 348 00ea 002B     		cmp	r3, #0
ARM GAS  /tmp/cc9XwU9K.s 			page 12


 349 00ec 05D0     		beq	.L13
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 350              		.loc 1 284 5
 351 00ee 1D4B     		ldr	r3, .L18+24
 352 00f0 1B68     		ldr	r3, [r3]
 353 00f2 1C4A     		ldr	r2, .L18+24
 354 00f4 43F48033 		orr	r3, r3, #65536
 355 00f8 1360     		str	r3, [r2]
 356              	.L13:
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Configure event mode */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 357              		.loc 1 288 17
 358 00fa 7B68     		ldr	r3, [r7, #4]
 359 00fc 5B68     		ldr	r3, [r3, #4]
 360              		.loc 1 288 24
 361 00fe 03F40033 		and	r3, r3, #131072
 362              		.loc 1 288 5
 363 0102 002B     		cmp	r3, #0
 364 0104 05D0     		beq	.L14
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 365              		.loc 1 290 5
 366 0106 174B     		ldr	r3, .L18+24
 367 0108 5B68     		ldr	r3, [r3, #4]
 368 010a 164A     		ldr	r2, .L18+24
 369 010c 43F48033 		orr	r3, r3, #65536
 370 0110 5360     		str	r3, [r2, #4]
 371              	.L14:
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Configure the edge */
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 372              		.loc 1 294 17
 373 0112 7B68     		ldr	r3, [r7, #4]
 374 0114 5B68     		ldr	r3, [r3, #4]
 375              		.loc 1 294 24
 376 0116 03F00103 		and	r3, r3, #1
 377              		.loc 1 294 5
 378 011a 002B     		cmp	r3, #0
 379 011c 05D0     		beq	.L15
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 380              		.loc 1 296 5
 381 011e 114B     		ldr	r3, .L18+24
 382 0120 9B68     		ldr	r3, [r3, #8]
 383 0122 104A     		ldr	r2, .L18+24
 384 0124 43F48033 		orr	r3, r3, #65536
 385 0128 9360     		str	r3, [r2, #8]
 386              	.L15:
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 387              		.loc 1 299 17
 388 012a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc9XwU9K.s 			page 13


 389 012c 5B68     		ldr	r3, [r3, #4]
 390              		.loc 1 299 24
 391 012e 03F00203 		and	r3, r3, #2
 392              		.loc 1 299 5
 393 0132 002B     		cmp	r3, #0
 394 0134 05D0     		beq	.L17
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 395              		.loc 1 301 5
 396 0136 0B4B     		ldr	r3, .L18+24
 397 0138 DB68     		ldr	r3, [r3, #12]
 398 013a 0A4A     		ldr	r2, .L18+24
 399 013c 43F48033 		orr	r3, r3, #65536
 400 0140 D360     		str	r3, [r2, #12]
 401              	.L17:
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 402              		.loc 1 303 1
 403 0142 00BF     		nop
 404 0144 0837     		adds	r7, r7, #8
 405              	.LCFI19:
 406              		.cfi_def_cfa_offset 8
 407 0146 BD46     		mov	sp, r7
 408              	.LCFI20:
 409              		.cfi_def_cfa_register 13
 410              		@ sp needed
 411 0148 80BD     		pop	{r7, pc}
 412              	.L19:
 413 014a 00BF     		.align	2
 414              	.L18:
 415 014c 00000000 		.word	.LC0
 416 0150 02000100 		.word	65538
 417 0154 03000100 		.word	65539
 418 0158 01000200 		.word	131073
 419 015c 03000200 		.word	131075
 420 0160 00700040 		.word	1073770496
 421 0164 003C0140 		.word	1073822720
 422              		.cfi_endproc
 423              	.LFE133:
 425              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 426              		.align	1
 427              		.global	HAL_PWR_EnablePVD
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	HAL_PWR_EnablePVD:
 434              	.LFB134:
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables the Power Voltage Detector(PVD).
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 435              		.loc 1 310 1
 436              		.cfi_startproc
ARM GAS  /tmp/cc9XwU9K.s 			page 14


 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 0000 80B4     		push	{r7}
 441              	.LCFI21:
 442              		.cfi_def_cfa_offset 4
 443              		.cfi_offset 7, -4
 444 0002 00AF     		add	r7, sp, #0
 445              	.LCFI22:
 446              		.cfi_def_cfa_register 7
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 447              		.loc 1 311 3
 448 0004 034B     		ldr	r3, .L21
 449              		.loc 1 311 33
 450 0006 0122     		movs	r2, #1
 451 0008 1A60     		str	r2, [r3]
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 452              		.loc 1 312 1
 453 000a 00BF     		nop
 454 000c BD46     		mov	sp, r7
 455              	.LCFI23:
 456              		.cfi_def_cfa_register 13
 457              		@ sp needed
 458 000e 5DF8047B 		ldr	r7, [sp], #4
 459              	.LCFI24:
 460              		.cfi_restore 7
 461              		.cfi_def_cfa_offset 0
 462 0012 7047     		bx	lr
 463              	.L22:
 464              		.align	2
 465              	.L21:
 466 0014 10000E42 		.word	1108213776
 467              		.cfi_endproc
 468              	.LFE134:
 470              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 471              		.align	1
 472              		.global	HAL_PWR_DisablePVD
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 476              		.fpu fpv4-sp-d16
 478              	HAL_PWR_DisablePVD:
 479              	.LFB135:
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables the Power Voltage Detector(PVD).
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 480              		.loc 1 319 1
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485 0000 80B4     		push	{r7}
 486              	.LCFI25:
ARM GAS  /tmp/cc9XwU9K.s 			page 15


 487              		.cfi_def_cfa_offset 4
 488              		.cfi_offset 7, -4
 489 0002 00AF     		add	r7, sp, #0
 490              	.LCFI26:
 491              		.cfi_def_cfa_register 7
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 492              		.loc 1 320 3
 493 0004 034B     		ldr	r3, .L24
 494              		.loc 1 320 33
 495 0006 0022     		movs	r2, #0
 496 0008 1A60     		str	r2, [r3]
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 497              		.loc 1 321 1
 498 000a 00BF     		nop
 499 000c BD46     		mov	sp, r7
 500              	.LCFI27:
 501              		.cfi_def_cfa_register 13
 502              		@ sp needed
 503 000e 5DF8047B 		ldr	r7, [sp], #4
 504              	.LCFI28:
 505              		.cfi_restore 7
 506              		.cfi_def_cfa_offset 0
 507 0012 7047     		bx	lr
 508              	.L25:
 509              		.align	2
 510              	.L24:
 511 0014 10000E42 		.word	1108213776
 512              		.cfi_endproc
 513              	.LFE135:
 515              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 516              		.align	1
 517              		.global	HAL_PWR_EnableWakeUpPin
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu fpv4-sp-d16
 523              	HAL_PWR_EnableWakeUpPin:
 524              	.LFB136:
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables the Wake-up PINx functionality.
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to enable.
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413x
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423x
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 525              		.loc 1 333 1
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 8
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529 0000 80B5     		push	{r7, lr}
 530              	.LCFI29:
 531              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc9XwU9K.s 			page 16


 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534 0002 82B0     		sub	sp, sp, #8
 535              	.LCFI30:
 536              		.cfi_def_cfa_offset 16
 537 0004 00AF     		add	r7, sp, #0
 538              	.LCFI31:
 539              		.cfi_def_cfa_register 7
 540 0006 7860     		str	r0, [r7, #4]
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameter */
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 541              		.loc 1 335 3
 542 0008 7B68     		ldr	r3, [r7, #4]
 543 000a B3F5807F 		cmp	r3, #256
 544 000e 04D0     		beq	.L27
 545              		.loc 1 335 3 is_stmt 0 discriminator 1
 546 0010 40F24F11 		movw	r1, #335
 547 0014 0648     		ldr	r0, .L28
 548 0016 FFF7FEFF 		bl	assert_failed
 549              	.L27:
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Enable the wake up pin */
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(PWR->CSR, WakeUpPinx);
 550              		.loc 1 338 3 is_stmt 1
 551 001a 064B     		ldr	r3, .L28+4
 552 001c 5A68     		ldr	r2, [r3, #4]
 553 001e 0549     		ldr	r1, .L28+4
 554 0020 7B68     		ldr	r3, [r7, #4]
 555 0022 1343     		orrs	r3, r3, r2
 556 0024 4B60     		str	r3, [r1, #4]
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 557              		.loc 1 339 1
 558 0026 00BF     		nop
 559 0028 0837     		adds	r7, r7, #8
 560              	.LCFI32:
 561              		.cfi_def_cfa_offset 8
 562 002a BD46     		mov	sp, r7
 563              	.LCFI33:
 564              		.cfi_def_cfa_register 13
 565              		@ sp needed
 566 002c 80BD     		pop	{r7, pc}
 567              	.L29:
 568 002e 00BF     		.align	2
 569              	.L28:
 570 0030 00000000 		.word	.LC0
 571 0034 00700040 		.word	1073770496
 572              		.cfi_endproc
 573              	.LFE136:
 575              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 576              		.align	1
 577              		.global	HAL_PWR_DisableWakeUpPin
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 581              		.fpu fpv4-sp-d16
 583              	HAL_PWR_DisableWakeUpPin:
 584              	.LFB137:
ARM GAS  /tmp/cc9XwU9K.s 			page 17


 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables the Wake-up PINx functionality.
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to disable.
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413x
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423x
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 585              		.loc 1 351 1
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589 0000 80B5     		push	{r7, lr}
 590              	.LCFI34:
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 7, -8
 593              		.cfi_offset 14, -4
 594 0002 82B0     		sub	sp, sp, #8
 595              	.LCFI35:
 596              		.cfi_def_cfa_offset 16
 597 0004 00AF     		add	r7, sp, #0
 598              	.LCFI36:
 599              		.cfi_def_cfa_register 7
 600 0006 7860     		str	r0, [r7, #4]
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameter */
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 601              		.loc 1 353 3
 602 0008 7B68     		ldr	r3, [r7, #4]
 603 000a B3F5807F 		cmp	r3, #256
 604 000e 04D0     		beq	.L31
 605              		.loc 1 353 3 is_stmt 0 discriminator 1
 606 0010 40F26111 		movw	r1, #353
 607 0014 0648     		ldr	r0, .L32
 608 0016 FFF7FEFF 		bl	assert_failed
 609              	.L31:
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Disable the wake up pin */
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CSR, WakeUpPinx);
 610              		.loc 1 356 3 is_stmt 1
 611 001a 064B     		ldr	r3, .L32+4
 612 001c 5A68     		ldr	r2, [r3, #4]
 613 001e 7B68     		ldr	r3, [r7, #4]
 614 0020 DB43     		mvns	r3, r3
 615 0022 0449     		ldr	r1, .L32+4
 616 0024 1340     		ands	r3, r3, r2
 617 0026 4B60     		str	r3, [r1, #4]
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 618              		.loc 1 357 1
 619 0028 00BF     		nop
 620 002a 0837     		adds	r7, r7, #8
 621              	.LCFI37:
 622              		.cfi_def_cfa_offset 8
 623 002c BD46     		mov	sp, r7
ARM GAS  /tmp/cc9XwU9K.s 			page 18


 624              	.LCFI38:
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 002e 80BD     		pop	{r7, pc}
 628              	.L33:
 629              		.align	2
 630              	.L32:
 631 0030 00000000 		.word	.LC0
 632 0034 00700040 		.word	1073770496
 633              		.cfi_endproc
 634              	.LFE137:
 636              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 637              		.align	1
 638              		.global	HAL_PWR_EnterSLEEPMode
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu fpv4-sp-d16
 644              	HAL_PWR_EnterSLEEPMode:
 645              	.LFB138:
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *   
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Sleep mode, all I/O pins keep the same state as in Run mode.
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * 
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Sleep mode, the systick is stopped to avoid exit from this mode with
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       systick interrupt when used as time base for Timeout 
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *                
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in SLEEP mode.
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            This parameter can be one of the following values:
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note This parameter is not used for the STM32F4 family and is kept as parameter
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       just to maintain compatibility with the lower power families.
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param SLEEPEntry Specifies if SLEEP mode in entered with WFI or WFE instruction.
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 646              		.loc 1 380 1
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650 0000 80B5     		push	{r7, lr}
 651              	.LCFI39:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0002 82B0     		sub	sp, sp, #8
 656              	.LCFI40:
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              	.LCFI41:
ARM GAS  /tmp/cc9XwU9K.s 			page 19


 660              		.cfi_def_cfa_register 7
 661 0006 7860     		str	r0, [r7, #4]
 662 0008 0B46     		mov	r3, r1
 663 000a FB70     		strb	r3, [r7, #3]
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameters */
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 664              		.loc 1 382 3
 665 000c 7B68     		ldr	r3, [r7, #4]
 666 000e 002B     		cmp	r3, #0
 667 0010 07D0     		beq	.L35
 668              		.loc 1 382 3 is_stmt 0 discriminator 1
 669 0012 7B68     		ldr	r3, [r7, #4]
 670 0014 012B     		cmp	r3, #1
 671 0016 04D0     		beq	.L35
 672              		.loc 1 382 3 discriminator 2
 673 0018 4FF4BF71 		mov	r1, #382
 674 001c 0F48     		ldr	r0, .L40
 675 001e FFF7FEFF 		bl	assert_failed
 676              	.L35:
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 677              		.loc 1 383 3 is_stmt 1
 678 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 679 0024 012B     		cmp	r3, #1
 680 0026 07D0     		beq	.L36
 681              		.loc 1 383 3 is_stmt 0 discriminator 1
 682 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 683 002a 022B     		cmp	r3, #2
 684 002c 04D0     		beq	.L36
 685              		.loc 1 383 3 discriminator 2
 686 002e 40F27F11 		movw	r1, #383
 687 0032 0A48     		ldr	r0, .L40
 688 0034 FFF7FEFF 		bl	assert_failed
 689              	.L36:
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 690              		.loc 1 386 3 is_stmt 1
 691 0038 094B     		ldr	r3, .L40+4
 692 003a 1B69     		ldr	r3, [r3, #16]
 693 003c 084A     		ldr	r2, .L40+4
 694 003e 23F00403 		bic	r3, r3, #4
 695 0042 1361     		str	r3, [r2, #16]
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 696              		.loc 1 389 5
 697 0044 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 698 0046 012B     		cmp	r3, #1
 699 0048 01D1     		bne	.L37
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {   
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFI();
 700              		.loc 1 392 5
 701              		.syntax unified
 702              	@ 392 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 703 004a 30BF     		wfi
 704              	@ 0 "" 2
ARM GAS  /tmp/cc9XwU9K.s 			page 20


 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   else
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Event */
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __SEV();
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 705              		.loc 1 401 1
 706              		.thumb
 707              		.syntax unified
 708 004c 02E0     		b	.L39
 709              	.L37:
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 710              		.loc 1 397 5
 711              		.syntax unified
 712              	@ 397 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 713 004e 40BF     		sev
 714              	@ 0 "" 2
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 715              		.loc 1 398 5
 716              	@ 398 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 717 0050 20BF     		wfe
 718              	@ 0 "" 2
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 719              		.loc 1 399 5
 720              	@ 399 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 721 0052 20BF     		wfe
 722              	@ 0 "" 2
 723              		.thumb
 724              		.syntax unified
 725              	.L39:
 726              		.loc 1 401 1
 727 0054 00BF     		nop
 728 0056 0837     		adds	r7, r7, #8
 729              	.LCFI42:
 730              		.cfi_def_cfa_offset 8
 731 0058 BD46     		mov	sp, r7
 732              	.LCFI43:
 733              		.cfi_def_cfa_register 13
 734              		@ sp needed
 735 005a 80BD     		pop	{r7, pc}
 736              	.L41:
 737              		.align	2
 738              	.L40:
 739 005c 00000000 		.word	.LC0
 740 0060 00ED00E0 		.word	-536810240
 741              		.cfi_endproc
 742              	.LFE138:
 744              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 745              		.align	1
 746              		.global	HAL_PWR_EnterSTOPMode
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc9XwU9K.s 			page 21


 752              	HAL_PWR_EnterSTOPMode:
 753              	.LFB139:
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Stop mode, all I/O pins keep the same state as in Run mode.
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note When exiting Stop mode by issuing an interrupt or a wake-up event, 
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note When the voltage regulator operates in low power mode, an additional 
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in Stop mode.
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param STOPEntry Specifies if Stop mode in entered with WFI or WFE instruction.
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 754              		.loc 1 423 1
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 8
 757              		@ frame_needed = 1, uses_anonymous_args = 0
 758 0000 80B5     		push	{r7, lr}
 759              	.LCFI44:
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 7, -8
 762              		.cfi_offset 14, -4
 763 0002 82B0     		sub	sp, sp, #8
 764              	.LCFI45:
 765              		.cfi_def_cfa_offset 16
 766 0004 00AF     		add	r7, sp, #0
 767              	.LCFI46:
 768              		.cfi_def_cfa_register 7
 769 0006 7860     		str	r0, [r7, #4]
 770 0008 0B46     		mov	r3, r1
 771 000a FB70     		strb	r3, [r7, #3]
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameters */
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 772              		.loc 1 425 3
 773 000c 7B68     		ldr	r3, [r7, #4]
 774 000e 002B     		cmp	r3, #0
 775 0010 07D0     		beq	.L43
 776              		.loc 1 425 3 is_stmt 0 discriminator 1
 777 0012 7B68     		ldr	r3, [r7, #4]
 778 0014 012B     		cmp	r3, #1
 779 0016 04D0     		beq	.L43
 780              		.loc 1 425 3 discriminator 2
 781 0018 40F2A911 		movw	r1, #425
 782 001c 1648     		ldr	r0, .L47
 783 001e FFF7FEFF 		bl	assert_failed
 784              	.L43:
ARM GAS  /tmp/cc9XwU9K.s 			page 22


 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 785              		.loc 1 426 3 is_stmt 1
 786 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 787 0024 012B     		cmp	r3, #1
 788 0026 07D0     		beq	.L44
 789              		.loc 1 426 3 is_stmt 0 discriminator 1
 790 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 791 002a 022B     		cmp	r3, #2
 792 002c 04D0     		beq	.L44
 793              		.loc 1 426 3 discriminator 2
 794 002e 4FF4D571 		mov	r1, #426
 795 0032 1148     		ldr	r0, .L47
 796 0034 FFF7FEFF 		bl	assert_failed
 797              	.L44:
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator val
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 798              		.loc 1 429 3 is_stmt 1
 799 0038 104B     		ldr	r3, .L47+4
 800 003a 1B68     		ldr	r3, [r3]
 801 003c 23F00302 		bic	r2, r3, #3
 802 0040 0E49     		ldr	r1, .L47+4
 803 0042 7B68     		ldr	r3, [r7, #4]
 804 0044 1343     		orrs	r3, r3, r2
 805 0046 0B60     		str	r3, [r1]
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 806              		.loc 1 432 3
 807 0048 0D4B     		ldr	r3, .L47+8
 808 004a 1B69     		ldr	r3, [r3, #16]
 809 004c 0C4A     		ldr	r2, .L47+8
 810 004e 43F00403 		orr	r3, r3, #4
 811 0052 1361     		str	r3, [r2, #16]
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 812              		.loc 1 435 5
 813 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 814 0056 012B     		cmp	r3, #1
 815 0058 01D1     		bne	.L45
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {   
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFI();
 816              		.loc 1 438 5
 817              		.syntax unified
 818              	@ 438 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 819 005a 30BF     		wfi
 820              	@ 0 "" 2
 821              		.thumb
 822              		.syntax unified
 823 005c 02E0     		b	.L46
 824              	.L45:
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   else
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Event */
ARM GAS  /tmp/cc9XwU9K.s 			page 23


 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __SEV();
 825              		.loc 1 443 5
 826              		.syntax unified
 827              	@ 443 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 828 005e 40BF     		sev
 829              	@ 0 "" 2
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 830              		.loc 1 444 5
 831              	@ 444 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 832 0060 20BF     		wfe
 833              	@ 0 "" 2
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 834              		.loc 1 445 5
 835              	@ 445 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 836 0062 20BF     		wfe
 837              	@ 0 "" 2
 838              		.thumb
 839              		.syntax unified
 840              	.L46:
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 841              		.loc 1 448 3
 842 0064 064B     		ldr	r3, .L47+8
 843 0066 1B69     		ldr	r3, [r3, #16]
 844 0068 054A     		ldr	r2, .L47+8
 845 006a 23F00403 		bic	r3, r3, #4
 846 006e 1361     		str	r3, [r2, #16]
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 847              		.loc 1 449 1
 848 0070 00BF     		nop
 849 0072 0837     		adds	r7, r7, #8
 850              	.LCFI47:
 851              		.cfi_def_cfa_offset 8
 852 0074 BD46     		mov	sp, r7
 853              	.LCFI48:
 854              		.cfi_def_cfa_register 13
 855              		@ sp needed
 856 0076 80BD     		pop	{r7, pc}
 857              	.L48:
 858              		.align	2
 859              	.L47:
 860 0078 00000000 		.word	.LC0
 861 007c 00700040 		.word	1073770496
 862 0080 00ED00E0 		.word	-536810240
 863              		.cfi_endproc
 864              	.LFE139:
 866              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 867              		.align	1
 868              		.global	HAL_PWR_EnterSTANDBYMode
 869              		.syntax unified
 870              		.thumb
 871              		.thumb_func
 872              		.fpu fpv4-sp-d16
 874              	HAL_PWR_EnterSTANDBYMode:
 875              	.LFB140:
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
ARM GAS  /tmp/cc9XwU9K.s 			page 24


 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enters Standby mode.
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Standby mode, all I/O pins are high impedance except for:
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - Reset pad (still available) 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 876              		.loc 1 462 1
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 1, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 881 0000 80B4     		push	{r7}
 882              	.LCFI49:
 883              		.cfi_def_cfa_offset 4
 884              		.cfi_offset 7, -4
 885 0002 00AF     		add	r7, sp, #0
 886              	.LCFI50:
 887              		.cfi_def_cfa_register 7
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select Standby mode */
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 888              		.loc 1 464 3
 889 0004 084B     		ldr	r3, .L50
 890 0006 1B68     		ldr	r3, [r3]
 891 0008 074A     		ldr	r2, .L50
 892 000a 43F00203 		orr	r3, r3, #2
 893 000e 1360     		str	r3, [r2]
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 894              		.loc 1 467 3
 895 0010 064B     		ldr	r3, .L50+4
 896 0012 1B69     		ldr	r3, [r3, #16]
 897 0014 054A     		ldr	r2, .L50+4
 898 0016 43F00403 		orr	r3, r3, #4
 899 001a 1361     		str	r3, [r2, #16]
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #if defined ( __CC_ARM)
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __force_stores();
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #endif
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __WFI();
 900              		.loc 1 474 3
 901              		.syntax unified
 902              	@ 474 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 903 001c 30BF     		wfi
 904              	@ 0 "" 2
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 905              		.loc 1 475 1
 906              		.thumb
 907              		.syntax unified
ARM GAS  /tmp/cc9XwU9K.s 			page 25


 908 001e 00BF     		nop
 909 0020 BD46     		mov	sp, r7
 910              	.LCFI51:
 911              		.cfi_def_cfa_register 13
 912              		@ sp needed
 913 0022 5DF8047B 		ldr	r7, [sp], #4
 914              	.LCFI52:
 915              		.cfi_restore 7
 916              		.cfi_def_cfa_offset 0
 917 0026 7047     		bx	lr
 918              	.L51:
 919              		.align	2
 920              	.L50:
 921 0028 00700040 		.word	1073770496
 922 002c 00ED00E0 		.word	-536810240
 923              		.cfi_endproc
 924              	.LFE140:
 926              		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 927              		.align	1
 928              		.global	HAL_PWR_PVD_IRQHandler
 929              		.syntax unified
 930              		.thumb
 931              		.thumb_func
 932              		.fpu fpv4-sp-d16
 934              	HAL_PWR_PVD_IRQHandler:
 935              	.LFB141:
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief This function handles the PWR PVD interrupt request.
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note This API should be called under the PVD_IRQHandler().
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 936              		.loc 1 483 1
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 1, uses_anonymous_args = 0
 940 0000 80B5     		push	{r7, lr}
 941              	.LCFI53:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 00AF     		add	r7, sp, #0
 946              	.LCFI54:
 947              		.cfi_def_cfa_register 7
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check PWR Exti flag */
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 948              		.loc 1 485 6
 949 0004 064B     		ldr	r3, .L55
 950 0006 5B69     		ldr	r3, [r3, #20]
 951 0008 03F48033 		and	r3, r3, #65536
 952              		.loc 1 485 5
 953 000c 002B     		cmp	r3, #0
 954 000e 05D0     		beq	.L54
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
ARM GAS  /tmp/cc9XwU9K.s 			page 26


 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 955              		.loc 1 488 5
 956 0010 FFF7FEFF 		bl	HAL_PWR_PVDCallback
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 957              		.loc 1 491 5
 958 0014 024B     		ldr	r3, .L55
 959 0016 4FF48032 		mov	r2, #65536
 960 001a 5A61     		str	r2, [r3, #20]
 961              	.L54:
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 962              		.loc 1 493 1
 963 001c 00BF     		nop
 964 001e 80BD     		pop	{r7, pc}
 965              	.L56:
 966              		.align	2
 967              	.L55:
 968 0020 003C0140 		.word	1073822720
 969              		.cfi_endproc
 970              	.LFE141:
 972              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 973              		.align	1
 974              		.weak	HAL_PWR_PVDCallback
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	HAL_PWR_PVDCallback:
 981              	.LFB142:
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 982              		.loc 1 500 1
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 1, uses_anonymous_args = 0
 986              		@ link register save eliminated.
 987 0000 80B4     		push	{r7}
 988              	.LCFI55:
 989              		.cfi_def_cfa_offset 4
 990              		.cfi_offset 7, -4
 991 0002 00AF     		add	r7, sp, #0
 992              	.LCFI56:
 993              		.cfi_def_cfa_register 7
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****             the HAL_PWR_PVDCallback could be implemented in the user file
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    */ 
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 994              		.loc 1 504 1
 995 0004 00BF     		nop
 996 0006 BD46     		mov	sp, r7
ARM GAS  /tmp/cc9XwU9K.s 			page 27


 997              	.LCFI57:
 998              		.cfi_def_cfa_register 13
 999              		@ sp needed
 1000 0008 5DF8047B 		ldr	r7, [sp], #4
 1001              	.LCFI58:
 1002              		.cfi_restore 7
 1003              		.cfi_def_cfa_offset 0
 1004 000c 7047     		bx	lr
 1005              		.cfi_endproc
 1006              	.LFE142:
 1008              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 1009              		.align	1
 1010              		.global	HAL_PWR_EnableSleepOnExit
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu fpv4-sp-d16
 1016              	HAL_PWR_EnableSleepOnExit:
 1017              	.LFB143:
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       interruptions handling.         
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 1018              		.loc 1 515 1
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 0
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023 0000 80B4     		push	{r7}
 1024              	.LCFI59:
 1025              		.cfi_def_cfa_offset 4
 1026              		.cfi_offset 7, -4
 1027 0002 00AF     		add	r7, sp, #0
 1028              	.LCFI60:
 1029              		.cfi_def_cfa_register 7
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 1030              		.loc 1 517 3
 1031 0004 054B     		ldr	r3, .L59
 1032 0006 1B69     		ldr	r3, [r3, #16]
 1033 0008 044A     		ldr	r2, .L59
 1034 000a 43F00203 		orr	r3, r3, #2
 1035 000e 1361     		str	r3, [r2, #16]
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 1036              		.loc 1 518 1
 1037 0010 00BF     		nop
 1038 0012 BD46     		mov	sp, r7
 1039              	.LCFI61:
 1040              		.cfi_def_cfa_register 13
 1041              		@ sp needed
ARM GAS  /tmp/cc9XwU9K.s 			page 28


 1042 0014 5DF8047B 		ldr	r7, [sp], #4
 1043              	.LCFI62:
 1044              		.cfi_restore 7
 1045              		.cfi_def_cfa_offset 0
 1046 0018 7047     		bx	lr
 1047              	.L60:
 1048 001a 00BF     		.align	2
 1049              	.L59:
 1050 001c 00ED00E0 		.word	-536810240
 1051              		.cfi_endproc
 1052              	.LFE143:
 1054              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 1055              		.align	1
 1056              		.global	HAL_PWR_DisableSleepOnExit
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu fpv4-sp-d16
 1062              	HAL_PWR_DisableSleepOnExit:
 1063              	.LFB144:
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 1064              		.loc 1 527 1
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 1, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069 0000 80B4     		push	{r7}
 1070              	.LCFI63:
 1071              		.cfi_def_cfa_offset 4
 1072              		.cfi_offset 7, -4
 1073 0002 00AF     		add	r7, sp, #0
 1074              	.LCFI64:
 1075              		.cfi_def_cfa_register 7
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 1076              		.loc 1 529 3
 1077 0004 054B     		ldr	r3, .L62
 1078 0006 1B69     		ldr	r3, [r3, #16]
 1079 0008 044A     		ldr	r2, .L62
 1080 000a 23F00203 		bic	r3, r3, #2
 1081 000e 1361     		str	r3, [r2, #16]
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 1082              		.loc 1 530 1
 1083 0010 00BF     		nop
 1084 0012 BD46     		mov	sp, r7
 1085              	.LCFI65:
 1086              		.cfi_def_cfa_register 13
 1087              		@ sp needed
 1088 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc9XwU9K.s 			page 29


 1089              	.LCFI66:
 1090              		.cfi_restore 7
 1091              		.cfi_def_cfa_offset 0
 1092 0018 7047     		bx	lr
 1093              	.L63:
 1094 001a 00BF     		.align	2
 1095              	.L62:
 1096 001c 00ED00E0 		.word	-536810240
 1097              		.cfi_endproc
 1098              	.LFE144:
 1100              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 1101              		.align	1
 1102              		.global	HAL_PWR_EnableSEVOnPend
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	HAL_PWR_EnableSEVOnPend:
 1109              	.LFB145:
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables CORTEX M4 SEVONPEND bit. 
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 1110              		.loc 1 539 1
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 1, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 1115 0000 80B4     		push	{r7}
 1116              	.LCFI67:
 1117              		.cfi_def_cfa_offset 4
 1118              		.cfi_offset 7, -4
 1119 0002 00AF     		add	r7, sp, #0
 1120              	.LCFI68:
 1121              		.cfi_def_cfa_register 7
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 1122              		.loc 1 541 3
 1123 0004 054B     		ldr	r3, .L65
 1124 0006 1B69     		ldr	r3, [r3, #16]
 1125 0008 044A     		ldr	r2, .L65
 1126 000a 43F01003 		orr	r3, r3, #16
 1127 000e 1361     		str	r3, [r2, #16]
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 1128              		.loc 1 542 1
 1129 0010 00BF     		nop
 1130 0012 BD46     		mov	sp, r7
 1131              	.LCFI69:
 1132              		.cfi_def_cfa_register 13
 1133              		@ sp needed
 1134 0014 5DF8047B 		ldr	r7, [sp], #4
 1135              	.LCFI70:
ARM GAS  /tmp/cc9XwU9K.s 			page 30


 1136              		.cfi_restore 7
 1137              		.cfi_def_cfa_offset 0
 1138 0018 7047     		bx	lr
 1139              	.L66:
 1140 001a 00BF     		.align	2
 1141              	.L65:
 1142 001c 00ED00E0 		.word	-536810240
 1143              		.cfi_endproc
 1144              	.LFE145:
 1146              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 1147              		.align	1
 1148              		.global	HAL_PWR_DisableSEVOnPend
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1152              		.fpu fpv4-sp-d16
 1154              	HAL_PWR_DisableSEVOnPend:
 1155              	.LFB146:
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables CORTEX M4 SEVONPEND bit. 
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 1156              		.loc 1 551 1
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161 0000 80B4     		push	{r7}
 1162              	.LCFI71:
 1163              		.cfi_def_cfa_offset 4
 1164              		.cfi_offset 7, -4
 1165 0002 00AF     		add	r7, sp, #0
 1166              	.LCFI72:
 1167              		.cfi_def_cfa_register 7
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 1168              		.loc 1 553 3
 1169 0004 054B     		ldr	r3, .L68
 1170 0006 1B69     		ldr	r3, [r3, #16]
 1171 0008 044A     		ldr	r2, .L68
 1172 000a 23F01003 		bic	r3, r3, #16
 1173 000e 1361     		str	r3, [r2, #16]
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 1174              		.loc 1 554 1
 1175 0010 00BF     		nop
 1176 0012 BD46     		mov	sp, r7
 1177              	.LCFI73:
 1178              		.cfi_def_cfa_register 13
 1179              		@ sp needed
 1180 0014 5DF8047B 		ldr	r7, [sp], #4
 1181              	.LCFI74:
 1182              		.cfi_restore 7
ARM GAS  /tmp/cc9XwU9K.s 			page 31


 1183              		.cfi_def_cfa_offset 0
 1184 0018 7047     		bx	lr
 1185              	.L69:
 1186 001a 00BF     		.align	2
 1187              	.L68:
 1188 001c 00ED00E0 		.word	-536810240
 1189              		.cfi_endproc
 1190              	.LFE146:
 1192              		.text
 1193              	.Letext0:
 1194              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1195              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 1196              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1197              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1198              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr.h"
ARM GAS  /tmp/cc9XwU9K.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_pwr.c
     /tmp/cc9XwU9K.s:18     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/cc9XwU9K.s:26     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/cc9XwU9K.s:67     .text.HAL_PWR_DeInit:0000000000000028 $d
     /tmp/cc9XwU9K.s:72     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/cc9XwU9K.s:79     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/cc9XwU9K.s:125    .text.HAL_PWR_EnableBkUpAccess:0000000000000020 $d
     /tmp/cc9XwU9K.s:131    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/cc9XwU9K.s:138    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/cc9XwU9K.s:184    .text.HAL_PWR_DisableBkUpAccess:0000000000000020 $d
     /tmp/cc9XwU9K.s:190    .rodata:0000000000000000 $d
     /tmp/cc9XwU9K.s:195    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/cc9XwU9K.s:202    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/cc9XwU9K.s:415    .text.HAL_PWR_ConfigPVD:000000000000014c $d
     /tmp/cc9XwU9K.s:426    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/cc9XwU9K.s:433    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/cc9XwU9K.s:466    .text.HAL_PWR_EnablePVD:0000000000000014 $d
     /tmp/cc9XwU9K.s:471    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/cc9XwU9K.s:478    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/cc9XwU9K.s:511    .text.HAL_PWR_DisablePVD:0000000000000014 $d
     /tmp/cc9XwU9K.s:516    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/cc9XwU9K.s:523    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/cc9XwU9K.s:570    .text.HAL_PWR_EnableWakeUpPin:0000000000000030 $d
     /tmp/cc9XwU9K.s:576    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/cc9XwU9K.s:583    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/cc9XwU9K.s:631    .text.HAL_PWR_DisableWakeUpPin:0000000000000030 $d
     /tmp/cc9XwU9K.s:637    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/cc9XwU9K.s:644    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/cc9XwU9K.s:739    .text.HAL_PWR_EnterSLEEPMode:000000000000005c $d
     /tmp/cc9XwU9K.s:745    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/cc9XwU9K.s:752    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/cc9XwU9K.s:860    .text.HAL_PWR_EnterSTOPMode:0000000000000078 $d
     /tmp/cc9XwU9K.s:867    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cc9XwU9K.s:874    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/cc9XwU9K.s:921    .text.HAL_PWR_EnterSTANDBYMode:0000000000000028 $d
     /tmp/cc9XwU9K.s:927    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
     /tmp/cc9XwU9K.s:934    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
     /tmp/cc9XwU9K.s:980    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
     /tmp/cc9XwU9K.s:968    .text.HAL_PWR_PVD_IRQHandler:0000000000000020 $d
     /tmp/cc9XwU9K.s:973    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/cc9XwU9K.s:1009   .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/cc9XwU9K.s:1016   .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/cc9XwU9K.s:1050   .text.HAL_PWR_EnableSleepOnExit:000000000000001c $d
     /tmp/cc9XwU9K.s:1055   .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/cc9XwU9K.s:1062   .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/cc9XwU9K.s:1096   .text.HAL_PWR_DisableSleepOnExit:000000000000001c $d
     /tmp/cc9XwU9K.s:1101   .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/cc9XwU9K.s:1108   .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/cc9XwU9K.s:1142   .text.HAL_PWR_EnableSEVOnPend:000000000000001c $d
     /tmp/cc9XwU9K.s:1147   .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/cc9XwU9K.s:1154   .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/cc9XwU9K.s:1188   .text.HAL_PWR_DisableSEVOnPend:000000000000001c $d

UNDEFINED SYMBOLS
assert_failed
