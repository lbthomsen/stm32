ARM GAS  /tmp/ccJXrP5v.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	NMI_Handler:
  27              	.LFB130:
  28              		.file 1 "Core/Src/stm32f4xx_it.c"
   1:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f4xx_it.c **** /**
   3:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Core/Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f4xx_it.c ****   * @attention
   8:Core/Src/stm32f4xx_it.c ****   *
   9:Core/Src/stm32f4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32f4xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f4xx_it.c ****   *
  12:Core/Src/stm32f4xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32f4xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32f4xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32f4xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32f4xx_it.c ****   *
  17:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f4xx_it.c ****   */
  19:Core/Src/stm32f4xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f4xx_it.c **** 
  21:Core/Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f4xx_it.c **** #include "main.h"
  23:Core/Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  24:Core/Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f4xx_it.c **** 
  28:Core/Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f4xx_it.c **** 
ARM GAS  /tmp/ccJXrP5v.s 			page 2


  31:Core/Src/stm32f4xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f4xx_it.c **** 
  33:Core/Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f4xx_it.c **** 
  36:Core/Src/stm32f4xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f4xx_it.c **** 
  38:Core/Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f4xx_it.c **** 
  41:Core/Src/stm32f4xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f4xx_it.c **** 
  43:Core/Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f4xx_it.c **** 
  46:Core/Src/stm32f4xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f4xx_it.c **** 
  48:Core/Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f4xx_it.c **** 
  51:Core/Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f4xx_it.c **** 
  53:Core/Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f4xx_it.c **** 
  56:Core/Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f4xx_it.c **** 
  58:Core/Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f4xx_it.c **** 
  60:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  61:Core/Src/stm32f4xx_it.c **** 
  62:Core/Src/stm32f4xx_it.c **** /* USER CODE END EV */
  63:Core/Src/stm32f4xx_it.c **** 
  64:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  65:Core/Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  66:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  67:Core/Src/stm32f4xx_it.c **** /**
  68:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  69:Core/Src/stm32f4xx_it.c ****   */
  70:Core/Src/stm32f4xx_it.c **** void NMI_Handler(void)
  71:Core/Src/stm32f4xx_it.c **** {
  29              		.loc 1 71 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  41              	.L2:
  72:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  73:Core/Src/stm32f4xx_it.c **** 
  74:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
ARM GAS  /tmp/ccJXrP5v.s 			page 3


  75:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  76:Core/Src/stm32f4xx_it.c ****   while (1)
  42              		.loc 1 76 9 discriminator 1
  43 0004 FEE7     		b	.L2
  44              		.cfi_endproc
  45              	.LFE130:
  47              		.section	.text.HardFault_Handler,"ax",%progbits
  48              		.align	1
  49              		.global	HardFault_Handler
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	HardFault_Handler:
  56              	.LFB131:
  77:Core/Src/stm32f4xx_it.c ****   {
  78:Core/Src/stm32f4xx_it.c ****   }
  79:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32f4xx_it.c **** }
  81:Core/Src/stm32f4xx_it.c **** 
  82:Core/Src/stm32f4xx_it.c **** /**
  83:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  84:Core/Src/stm32f4xx_it.c ****   */
  85:Core/Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  86:Core/Src/stm32f4xx_it.c **** {
  57              		.loc 1 86 1
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62 0000 80B4     		push	{r7}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 4
  65              		.cfi_offset 7, -4
  66 0002 00AF     		add	r7, sp, #0
  67              	.LCFI3:
  68              		.cfi_def_cfa_register 7
  69              	.L4:
  87:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  88:Core/Src/stm32f4xx_it.c **** 
  89:Core/Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  90:Core/Src/stm32f4xx_it.c ****   while (1)
  70              		.loc 1 90 9 discriminator 1
  71 0004 FEE7     		b	.L4
  72              		.cfi_endproc
  73              	.LFE131:
  75              		.section	.text.MemManage_Handler,"ax",%progbits
  76              		.align	1
  77              		.global	MemManage_Handler
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu fpv4-sp-d16
  83              	MemManage_Handler:
  84              	.LFB132:
  91:Core/Src/stm32f4xx_it.c ****   {
  92:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
ARM GAS  /tmp/ccJXrP5v.s 			page 4


  93:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  94:Core/Src/stm32f4xx_it.c ****   }
  95:Core/Src/stm32f4xx_it.c **** }
  96:Core/Src/stm32f4xx_it.c **** 
  97:Core/Src/stm32f4xx_it.c **** /**
  98:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
  99:Core/Src/stm32f4xx_it.c ****   */
 100:Core/Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 101:Core/Src/stm32f4xx_it.c **** {
  85              		.loc 1 101 1
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0000 80B4     		push	{r7}
  91              	.LCFI4:
  92              		.cfi_def_cfa_offset 4
  93              		.cfi_offset 7, -4
  94 0002 00AF     		add	r7, sp, #0
  95              	.LCFI5:
  96              		.cfi_def_cfa_register 7
  97              	.L6:
 102:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 103:Core/Src/stm32f4xx_it.c **** 
 104:Core/Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 105:Core/Src/stm32f4xx_it.c ****   while (1)
  98              		.loc 1 105 9 discriminator 1
  99 0004 FEE7     		b	.L6
 100              		.cfi_endproc
 101              	.LFE132:
 103              		.section	.text.BusFault_Handler,"ax",%progbits
 104              		.align	1
 105              		.global	BusFault_Handler
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu fpv4-sp-d16
 111              	BusFault_Handler:
 112              	.LFB133:
 106:Core/Src/stm32f4xx_it.c ****   {
 107:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 108:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 109:Core/Src/stm32f4xx_it.c ****   }
 110:Core/Src/stm32f4xx_it.c **** }
 111:Core/Src/stm32f4xx_it.c **** 
 112:Core/Src/stm32f4xx_it.c **** /**
 113:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 114:Core/Src/stm32f4xx_it.c ****   */
 115:Core/Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 116:Core/Src/stm32f4xx_it.c **** {
 113              		.loc 1 116 1
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0000 80B4     		push	{r7}
 119              	.LCFI6:
ARM GAS  /tmp/ccJXrP5v.s 			page 5


 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 7, -4
 122 0002 00AF     		add	r7, sp, #0
 123              	.LCFI7:
 124              		.cfi_def_cfa_register 7
 125              	.L8:
 117:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 118:Core/Src/stm32f4xx_it.c **** 
 119:Core/Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 120:Core/Src/stm32f4xx_it.c ****   while (1)
 126              		.loc 1 120 9 discriminator 1
 127 0004 FEE7     		b	.L8
 128              		.cfi_endproc
 129              	.LFE133:
 131              		.section	.text.UsageFault_Handler,"ax",%progbits
 132              		.align	1
 133              		.global	UsageFault_Handler
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu fpv4-sp-d16
 139              	UsageFault_Handler:
 140              	.LFB134:
 121:Core/Src/stm32f4xx_it.c ****   {
 122:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 123:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 124:Core/Src/stm32f4xx_it.c ****   }
 125:Core/Src/stm32f4xx_it.c **** }
 126:Core/Src/stm32f4xx_it.c **** 
 127:Core/Src/stm32f4xx_it.c **** /**
 128:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 129:Core/Src/stm32f4xx_it.c ****   */
 130:Core/Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 131:Core/Src/stm32f4xx_it.c **** {
 141              		.loc 1 131 1
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 80B4     		push	{r7}
 147              	.LCFI8:
 148              		.cfi_def_cfa_offset 4
 149              		.cfi_offset 7, -4
 150 0002 00AF     		add	r7, sp, #0
 151              	.LCFI9:
 152              		.cfi_def_cfa_register 7
 153              	.L10:
 132:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 133:Core/Src/stm32f4xx_it.c **** 
 134:Core/Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 135:Core/Src/stm32f4xx_it.c ****   while (1)
 154              		.loc 1 135 9 discriminator 1
 155 0004 FEE7     		b	.L10
 156              		.cfi_endproc
 157              	.LFE134:
 159              		.section	.text.SVC_Handler,"ax",%progbits
 160              		.align	1
ARM GAS  /tmp/ccJXrP5v.s 			page 6


 161              		.global	SVC_Handler
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu fpv4-sp-d16
 167              	SVC_Handler:
 168              	.LFB135:
 136:Core/Src/stm32f4xx_it.c ****   {
 137:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 138:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 139:Core/Src/stm32f4xx_it.c ****   }
 140:Core/Src/stm32f4xx_it.c **** }
 141:Core/Src/stm32f4xx_it.c **** 
 142:Core/Src/stm32f4xx_it.c **** /**
 143:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 144:Core/Src/stm32f4xx_it.c ****   */
 145:Core/Src/stm32f4xx_it.c **** void SVC_Handler(void)
 146:Core/Src/stm32f4xx_it.c **** {
 169              		.loc 1 146 1
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 1, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174 0000 80B4     		push	{r7}
 175              	.LCFI10:
 176              		.cfi_def_cfa_offset 4
 177              		.cfi_offset 7, -4
 178 0002 00AF     		add	r7, sp, #0
 179              	.LCFI11:
 180              		.cfi_def_cfa_register 7
 147:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 148:Core/Src/stm32f4xx_it.c **** 
 149:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 150:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 151:Core/Src/stm32f4xx_it.c **** 
 152:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 153:Core/Src/stm32f4xx_it.c **** }
 181              		.loc 1 153 1
 182 0004 00BF     		nop
 183 0006 BD46     		mov	sp, r7
 184              	.LCFI12:
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 0008 5DF8047B 		ldr	r7, [sp], #4
 188              	.LCFI13:
 189              		.cfi_restore 7
 190              		.cfi_def_cfa_offset 0
 191 000c 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE135:
 195              		.section	.text.DebugMon_Handler,"ax",%progbits
 196              		.align	1
 197              		.global	DebugMon_Handler
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccJXrP5v.s 			page 7


 203              	DebugMon_Handler:
 204              	.LFB136:
 154:Core/Src/stm32f4xx_it.c **** 
 155:Core/Src/stm32f4xx_it.c **** /**
 156:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 157:Core/Src/stm32f4xx_it.c ****   */
 158:Core/Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 159:Core/Src/stm32f4xx_it.c **** {
 205              		.loc 1 159 1
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210 0000 80B4     		push	{r7}
 211              	.LCFI14:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 7, -4
 214 0002 00AF     		add	r7, sp, #0
 215              	.LCFI15:
 216              		.cfi_def_cfa_register 7
 160:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 161:Core/Src/stm32f4xx_it.c **** 
 162:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 163:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 164:Core/Src/stm32f4xx_it.c **** 
 165:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 166:Core/Src/stm32f4xx_it.c **** }
 217              		.loc 1 166 1
 218 0004 00BF     		nop
 219 0006 BD46     		mov	sp, r7
 220              	.LCFI16:
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 0008 5DF8047B 		ldr	r7, [sp], #4
 224              	.LCFI17:
 225              		.cfi_restore 7
 226              		.cfi_def_cfa_offset 0
 227 000c 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE136:
 231              		.section	.text.PendSV_Handler,"ax",%progbits
 232              		.align	1
 233              		.global	PendSV_Handler
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	PendSV_Handler:
 240              	.LFB137:
 167:Core/Src/stm32f4xx_it.c **** 
 168:Core/Src/stm32f4xx_it.c **** /**
 169:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pendable request for system service.
 170:Core/Src/stm32f4xx_it.c ****   */
 171:Core/Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 172:Core/Src/stm32f4xx_it.c **** {
 241              		.loc 1 172 1
 242              		.cfi_startproc
ARM GAS  /tmp/ccJXrP5v.s 			page 8


 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246 0000 80B4     		push	{r7}
 247              	.LCFI18:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 7, -4
 250 0002 00AF     		add	r7, sp, #0
 251              	.LCFI19:
 252              		.cfi_def_cfa_register 7
 173:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 174:Core/Src/stm32f4xx_it.c **** 
 175:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 176:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 177:Core/Src/stm32f4xx_it.c **** 
 178:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 179:Core/Src/stm32f4xx_it.c **** }
 253              		.loc 1 179 1
 254 0004 00BF     		nop
 255 0006 BD46     		mov	sp, r7
 256              	.LCFI20:
 257              		.cfi_def_cfa_register 13
 258              		@ sp needed
 259 0008 5DF8047B 		ldr	r7, [sp], #4
 260              	.LCFI21:
 261              		.cfi_restore 7
 262              		.cfi_def_cfa_offset 0
 263 000c 7047     		bx	lr
 264              		.cfi_endproc
 265              	.LFE137:
 267              		.section	.text.SysTick_Handler,"ax",%progbits
 268              		.align	1
 269              		.global	SysTick_Handler
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv4-sp-d16
 275              	SysTick_Handler:
 276              	.LFB138:
 180:Core/Src/stm32f4xx_it.c **** 
 181:Core/Src/stm32f4xx_it.c **** /**
 182:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 183:Core/Src/stm32f4xx_it.c ****   */
 184:Core/Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 185:Core/Src/stm32f4xx_it.c **** {
 277              		.loc 1 185 1
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              	.LCFI22:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 00AF     		add	r7, sp, #0
 287              	.LCFI23:
 288              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccJXrP5v.s 			page 9


 186:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 187:Core/Src/stm32f4xx_it.c **** 
 188:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 189:Core/Src/stm32f4xx_it.c ****   HAL_IncTick();
 289              		.loc 1 189 3
 290 0004 FFF7FEFF 		bl	HAL_IncTick
 190:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 191:Core/Src/stm32f4xx_it.c **** 
 192:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 193:Core/Src/stm32f4xx_it.c **** }
 291              		.loc 1 193 1
 292 0008 00BF     		nop
 293 000a 80BD     		pop	{r7, pc}
 294              		.cfi_endproc
 295              	.LFE138:
 297              		.text
 298              	.Letext0:
ARM GAS  /tmp/ccJXrP5v.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccJXrP5v.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccJXrP5v.s:48     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:55     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccJXrP5v.s:76     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:83     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccJXrP5v.s:104    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:111    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccJXrP5v.s:132    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:139    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccJXrP5v.s:160    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:167    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccJXrP5v.s:196    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:203    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccJXrP5v.s:232    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:239    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccJXrP5v.s:268    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccJXrP5v.s:275    .text.SysTick_Handler:0000000000000000 SysTick_Handler

UNDEFINED SYMBOLS
HAL_IncTick
