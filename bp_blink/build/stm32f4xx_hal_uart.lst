ARM GAS  /tmp/cceCIUcs.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              	.LC0:
  20 0000 44726976 		.ascii	"Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart"
  20      6572732F 
  20      53544D33 
  20      32463478 
  20      785F4841 
  21 0033 2E6300   		.ascii	".c\000"
  22              		.section	.text.HAL_UART_Init,"ax",%progbits
  23              		.align	1
  24              		.global	HAL_UART_Init
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	HAL_UART_Init:
  32              	.LFB130:
  33              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @file    stm32f4xx_hal_uart.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @attention
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * Copyright (c) 2016 STMicroelectronics.
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * All rights reserved.
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * in the root directory of this software component.
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
ARM GAS  /tmp/cceCIUcs.s 			page 2


  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   @verbatim
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                         ##### How to use this driver #####
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) UART pins configuration:
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the UART TX/RX pins as alternate function pull-up.
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   Tx/Rx parameters.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx stream.
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx stream.
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_UART_Init() API.
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             and receive process.
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             HAL_UART_MspInit() API.
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/cceCIUcs.s 			page 3


  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ##### Callback registration #####
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ==================================
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     Use Function HAL_UART_RegisterCallback() to register a user callback.
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     Function HAL_UART_RegisterCallback() allows to register following callbacks:
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and a pointer to the user callback function.
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     Use function HAL_UART_UnRegisterCallback() to reset a callback to the default
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     weak (surcharged) function.
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and the Callback ID.
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This function allows to reset following callbacks:
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     respectively HAL_UART_RegisterRxEventCallback() , HAL_UART_UnRegisterRxEventCallback().
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     By default, after the HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     examples HAL_UART_TxCpltCallback(), HAL_UART_RxHalfCpltCallback().
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the HAL_UART_Init()
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the HAL_UART_Init() and HAL_UART_DeInit()
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
ARM GAS  /tmp/cceCIUcs.s 			page 4


 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     using HAL_UART_RegisterCallback() before calling HAL_UART_DeInit()
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     or HAL_UART_Init() function.
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     not defined, the callback registration feature is not available
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         Three operation modes are available within this driver :
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** Polling mode IO operation ***
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      =================================
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ===================================
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** DMA mode IO operation ***
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ==============================
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     services to user. (For example, these functions allow application to handle use cases
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     where number of data to be received is unknown).
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Compared to standard reception services which only consider number of received
ARM GAS  /tmp/cceCIUcs.s 			page 5


 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         data elements as reception completion criteria, these functions also consider additional ev
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         as triggers for updating reception status to caller :
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                for 1 frame time, after last received byte.
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) There are two mode of transfer:
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            are returned by function after finishing transfer.
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            These API's return the HAL status.
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The end of the data processing will be indicated through the
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Blocking mode API:
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non-Blocking mode API with Interrupt:
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non-Blocking mode API with DMA:
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** UART HAL driver macros list ***
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      =============================================
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   @endverbatim
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     +-------------------------------------------------------------+
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |---------------------|---------------------------------------|
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
ARM GAS  /tmp/cceCIUcs.s 			page 6


 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     +-------------------------------------------------------------+
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #include "stm32f4xx_hal.h"
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup STM32F4xx_HAL_Driver
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART UART
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief HAL UART module driver
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                                      uint32_t Tickstart, uint32_t Timeout);
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/cceCIUcs.s 			page 7


 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  ===============================================================================
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  ===============================================================================
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     in asynchronous mode.
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Baud Rate
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Word Length
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Stop Bit
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Hardware flow control
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Receiver/transmitter modes
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Over Sampling Method
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     procedures (details for the procedures are available in reference manual
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (RM0430 for STM32F4X3xx MCUs and RM0402 for STM32F412xx MCUs
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      RM0383 for STM32F411xC/E MCUs and RM0401 for STM32F410xx MCUs
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      RM0090 for STM32F4X5xx/STM32F4X7xx/STM32F429xx/STM32F439xx MCUs
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      RM0390 for STM32F446xx MCUs and RM0386 for STM32F469xx/STM32F479xx MCUs)).
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
  34              		.loc 1 358 1
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 8
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/cceCIUcs.s 			page 8


  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 16
  46 0004 00AF     		add	r7, sp, #0
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  49 0006 7860     		str	r0, [r7, #4]
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart == NULL)
  50              		.loc 1 360 6
  51 0008 7B68     		ldr	r3, [r7, #4]
  52 000a 002B     		cmp	r3, #0
  53 000c 01D1     		bne	.L2
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
  54              		.loc 1 362 12
  55 000e 0123     		movs	r3, #1
  56 0010 A0E0     		b	.L3
  57              	.L2:
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
  58              		.loc 1 366 18
  59 0012 7B68     		ldr	r3, [r7, #4]
  60 0014 9B69     		ldr	r3, [r3, #24]
  61              		.loc 1 366 6
  62 0016 002B     		cmp	r3, #0
  63 0018 2CD0     		beq	.L4
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     */
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
  64              		.loc 1 371 5
  65 001a 7B68     		ldr	r3, [r7, #4]
  66 001c 1B68     		ldr	r3, [r3]
  67 001e 4F4A     		ldr	r2, .L10
  68 0020 9342     		cmp	r3, r2
  69 0022 0ED0     		beq	.L5
  70              		.loc 1 371 5 is_stmt 0 discriminator 1
  71 0024 7B68     		ldr	r3, [r7, #4]
  72 0026 1B68     		ldr	r3, [r3]
  73 0028 4D4A     		ldr	r2, .L10+4
  74 002a 9342     		cmp	r3, r2
  75 002c 09D0     		beq	.L5
  76              		.loc 1 371 5 discriminator 2
  77 002e 7B68     		ldr	r3, [r7, #4]
  78 0030 1B68     		ldr	r3, [r3]
  79 0032 4C4A     		ldr	r2, .L10+8
  80 0034 9342     		cmp	r3, r2
  81 0036 04D0     		beq	.L5
  82              		.loc 1 371 5 discriminator 3
ARM GAS  /tmp/cceCIUcs.s 			page 9


  83 0038 40F27311 		movw	r1, #371
  84 003c 4A48     		ldr	r0, .L10+12
  85 003e FFF7FEFF 		bl	assert_failed
  86              	.L5:
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  87              		.loc 1 372 5 is_stmt 1
  88 0042 7B68     		ldr	r3, [r7, #4]
  89 0044 9B69     		ldr	r3, [r3, #24]
  90 0046 002B     		cmp	r3, #0
  91 0048 28D0     		beq	.L6
  92              		.loc 1 372 5 is_stmt 0 discriminator 1
  93 004a 7B68     		ldr	r3, [r7, #4]
  94 004c 9B69     		ldr	r3, [r3, #24]
  95 004e B3F5807F 		cmp	r3, #256
  96 0052 23D0     		beq	.L6
  97              		.loc 1 372 5 discriminator 2
  98 0054 7B68     		ldr	r3, [r7, #4]
  99 0056 9B69     		ldr	r3, [r3, #24]
 100 0058 B3F5007F 		cmp	r3, #512
 101 005c 1ED0     		beq	.L6
 102              		.loc 1 372 5 discriminator 3
 103 005e 7B68     		ldr	r3, [r7, #4]
 104 0060 9B69     		ldr	r3, [r3, #24]
 105 0062 B3F5407F 		cmp	r3, #768
 106 0066 19D0     		beq	.L6
 107              		.loc 1 372 5 discriminator 4
 108 0068 4FF4BA71 		mov	r1, #372
 109 006c 3E48     		ldr	r0, .L10+12
 110 006e FFF7FEFF 		bl	assert_failed
 111 0072 13E0     		b	.L6
 112              	.L4:
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 113              		.loc 1 376 5 is_stmt 1
 114 0074 7B68     		ldr	r3, [r7, #4]
 115 0076 1B68     		ldr	r3, [r3]
 116 0078 384A     		ldr	r2, .L10
 117 007a 9342     		cmp	r3, r2
 118 007c 0ED0     		beq	.L6
 119              		.loc 1 376 5 is_stmt 0 discriminator 1
 120 007e 7B68     		ldr	r3, [r7, #4]
 121 0080 1B68     		ldr	r3, [r3]
 122 0082 374A     		ldr	r2, .L10+4
 123 0084 9342     		cmp	r3, r2
 124 0086 09D0     		beq	.L6
 125              		.loc 1 376 5 discriminator 2
 126 0088 7B68     		ldr	r3, [r7, #4]
 127 008a 1B68     		ldr	r3, [r3]
 128 008c 354A     		ldr	r2, .L10+8
 129 008e 9342     		cmp	r3, r2
 130 0090 04D0     		beq	.L6
 131              		.loc 1 376 5 discriminator 3
 132 0092 4FF4BC71 		mov	r1, #376
 133 0096 3448     		ldr	r0, .L10+12
 134 0098 FFF7FEFF 		bl	assert_failed
ARM GAS  /tmp/cceCIUcs.s 			page 10


 135              	.L6:
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 136              		.loc 1 378 3 is_stmt 1
 137 009c 7B68     		ldr	r3, [r7, #4]
 138 009e 9B68     		ldr	r3, [r3, #8]
 139 00a0 002B     		cmp	r3, #0
 140 00a2 09D0     		beq	.L7
 141              		.loc 1 378 3 is_stmt 0 discriminator 1
 142 00a4 7B68     		ldr	r3, [r7, #4]
 143 00a6 9B68     		ldr	r3, [r3, #8]
 144 00a8 B3F5805F 		cmp	r3, #4096
 145 00ac 04D0     		beq	.L7
 146              		.loc 1 378 3 discriminator 2
 147 00ae 4FF4BD71 		mov	r1, #378
 148 00b2 2D48     		ldr	r0, .L10+12
 149 00b4 FFF7FEFF 		bl	assert_failed
 150              	.L7:
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 151              		.loc 1 379 3 is_stmt 1
 152 00b8 7B68     		ldr	r3, [r7, #4]
 153 00ba DB69     		ldr	r3, [r3, #28]
 154 00bc 002B     		cmp	r3, #0
 155 00be 09D0     		beq	.L8
 156              		.loc 1 379 3 is_stmt 0 discriminator 1
 157 00c0 7B68     		ldr	r3, [r7, #4]
 158 00c2 DB69     		ldr	r3, [r3, #28]
 159 00c4 B3F5004F 		cmp	r3, #32768
 160 00c8 04D0     		beq	.L8
 161              		.loc 1 379 3 discriminator 2
 162 00ca 40F27B11 		movw	r1, #379
 163 00ce 2648     		ldr	r0, .L10+12
 164 00d0 FFF7FEFF 		bl	assert_failed
 165              	.L8:
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 166              		.loc 1 381 12 is_stmt 1
 167 00d4 7B68     		ldr	r3, [r7, #4]
 168 00d6 93F83D30 		ldrb	r3, [r3, #61]
 169 00da DBB2     		uxtb	r3, r3
 170              		.loc 1 381 6
 171 00dc 002B     		cmp	r3, #0
 172 00de 06D1     		bne	.L9
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 173              		.loc 1 384 17
 174 00e0 7B68     		ldr	r3, [r7, #4]
 175 00e2 0022     		movs	r2, #0
 176 00e4 83F83C20 		strb	r2, [r3, #60]
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
ARM GAS  /tmp/cceCIUcs.s 			page 11


 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->MspInitCallback(huart);
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 177              		.loc 1 398 5
 178 00e8 7868     		ldr	r0, [r7, #4]
 179 00ea FFF7FEFF 		bl	HAL_UART_MspInit
 180              	.L9:
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 181              		.loc 1 402 17
 182 00ee 7B68     		ldr	r3, [r7, #4]
 183 00f0 2422     		movs	r2, #36
 184 00f2 83F83D20 		strb	r2, [r3, #61]
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 185              		.loc 1 405 3
 186 00f6 7B68     		ldr	r3, [r7, #4]
 187 00f8 1B68     		ldr	r3, [r3]
 188 00fa DA68     		ldr	r2, [r3, #12]
 189 00fc 7B68     		ldr	r3, [r7, #4]
 190 00fe 1B68     		ldr	r3, [r3]
 191 0100 22F40052 		bic	r2, r2, #8192
 192 0104 DA60     		str	r2, [r3, #12]
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 193              		.loc 1 408 3
 194 0106 7868     		ldr	r0, [r7, #4]
 195 0108 FFF7FEFF 		bl	UART_SetConfig
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 196              		.loc 1 413 3
 197 010c 7B68     		ldr	r3, [r7, #4]
 198 010e 1B68     		ldr	r3, [r3]
 199 0110 1A69     		ldr	r2, [r3, #16]
 200 0112 7B68     		ldr	r3, [r7, #4]
 201 0114 1B68     		ldr	r3, [r3]
 202 0116 22F49042 		bic	r2, r2, #18432
 203 011a 1A61     		str	r2, [r3, #16]
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 204              		.loc 1 414 3
 205 011c 7B68     		ldr	r3, [r7, #4]
 206 011e 1B68     		ldr	r3, [r3]
 207 0120 5A69     		ldr	r2, [r3, #20]
 208 0122 7B68     		ldr	r3, [r7, #4]
 209 0124 1B68     		ldr	r3, [r3]
 210 0126 22F02A02 		bic	r2, r2, #42
ARM GAS  /tmp/cceCIUcs.s 			page 12


 211 012a 5A61     		str	r2, [r3, #20]
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 212              		.loc 1 417 3
 213 012c 7B68     		ldr	r3, [r7, #4]
 214 012e 1B68     		ldr	r3, [r3]
 215 0130 DA68     		ldr	r2, [r3, #12]
 216 0132 7B68     		ldr	r3, [r7, #4]
 217 0134 1B68     		ldr	r3, [r3]
 218 0136 42F40052 		orr	r2, r2, #8192
 219 013a DA60     		str	r2, [r3, #12]
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state */
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 220              		.loc 1 420 20
 221 013c 7B68     		ldr	r3, [r7, #4]
 222 013e 0022     		movs	r2, #0
 223 0140 1A64     		str	r2, [r3, #64]
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 224              		.loc 1 421 17
 225 0142 7B68     		ldr	r3, [r7, #4]
 226 0144 2022     		movs	r2, #32
 227 0146 83F83D20 		strb	r2, [r3, #61]
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 228              		.loc 1 422 18
 229 014a 7B68     		ldr	r3, [r7, #4]
 230 014c 2022     		movs	r2, #32
 231 014e 83F83E20 		strb	r2, [r3, #62]
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 232              		.loc 1 424 10
 233 0152 0023     		movs	r3, #0
 234              	.L3:
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 235              		.loc 1 425 1
 236 0154 1846     		mov	r0, r3
 237 0156 0837     		adds	r7, r7, #8
 238              	.LCFI3:
 239              		.cfi_def_cfa_offset 8
 240 0158 BD46     		mov	sp, r7
 241              	.LCFI4:
 242              		.cfi_def_cfa_register 13
 243              		@ sp needed
 244 015a 80BD     		pop	{r7, pc}
 245              	.L11:
 246              		.align	2
 247              	.L10:
 248 015c 00100140 		.word	1073811456
 249 0160 00440040 		.word	1073759232
 250 0164 00140140 		.word	1073812480
 251 0168 00000000 		.word	.LC0
 252              		.cfi_endproc
 253              	.LFE130:
 255              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 256              		.align	1
 257              		.global	HAL_HalfDuplex_Init
ARM GAS  /tmp/cceCIUcs.s 			page 13


 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu fpv4-sp-d16
 263              	HAL_HalfDuplex_Init:
 264              	.LFB131:
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 265              		.loc 1 435 1
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI5:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 82B0     		sub	sp, sp, #8
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI7:
 279              		.cfi_def_cfa_register 7
 280 0006 7860     		str	r0, [r7, #4]
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart == NULL)
 281              		.loc 1 437 6
 282 0008 7B68     		ldr	r3, [r7, #4]
 283 000a 002B     		cmp	r3, #0
 284 000c 01D1     		bne	.L13
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 285              		.loc 1 439 12
 286 000e 0123     		movs	r3, #1
 287 0010 77E0     		b	.L14
 288              	.L13:
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 289              		.loc 1 443 3
 290 0012 7B68     		ldr	r3, [r7, #4]
 291 0014 1B68     		ldr	r3, [r3]
 292 0016 3D4A     		ldr	r2, .L19
 293 0018 9342     		cmp	r3, r2
 294 001a 0ED0     		beq	.L15
 295              		.loc 1 443 3 is_stmt 0 discriminator 1
 296 001c 7B68     		ldr	r3, [r7, #4]
 297 001e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 14


 298 0020 3B4A     		ldr	r2, .L19+4
 299 0022 9342     		cmp	r3, r2
 300 0024 09D0     		beq	.L15
 301              		.loc 1 443 3 discriminator 2
 302 0026 7B68     		ldr	r3, [r7, #4]
 303 0028 1B68     		ldr	r3, [r3]
 304 002a 3A4A     		ldr	r2, .L19+8
 305 002c 9342     		cmp	r3, r2
 306 002e 04D0     		beq	.L15
 307              		.loc 1 443 3 discriminator 3
 308 0030 40F2BB11 		movw	r1, #443
 309 0034 3848     		ldr	r0, .L19+12
 310 0036 FFF7FEFF 		bl	assert_failed
 311              	.L15:
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 312              		.loc 1 444 3 is_stmt 1
 313 003a 7B68     		ldr	r3, [r7, #4]
 314 003c 9B68     		ldr	r3, [r3, #8]
 315 003e 002B     		cmp	r3, #0
 316 0040 09D0     		beq	.L16
 317              		.loc 1 444 3 is_stmt 0 discriminator 1
 318 0042 7B68     		ldr	r3, [r7, #4]
 319 0044 9B68     		ldr	r3, [r3, #8]
 320 0046 B3F5805F 		cmp	r3, #4096
 321 004a 04D0     		beq	.L16
 322              		.loc 1 444 3 discriminator 2
 323 004c 4FF4DE71 		mov	r1, #444
 324 0050 3148     		ldr	r0, .L19+12
 325 0052 FFF7FEFF 		bl	assert_failed
 326              	.L16:
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 327              		.loc 1 445 3 is_stmt 1
 328 0056 7B68     		ldr	r3, [r7, #4]
 329 0058 DB69     		ldr	r3, [r3, #28]
 330 005a 002B     		cmp	r3, #0
 331 005c 09D0     		beq	.L17
 332              		.loc 1 445 3 is_stmt 0 discriminator 1
 333 005e 7B68     		ldr	r3, [r7, #4]
 334 0060 DB69     		ldr	r3, [r3, #28]
 335 0062 B3F5004F 		cmp	r3, #32768
 336 0066 04D0     		beq	.L17
 337              		.loc 1 445 3 discriminator 2
 338 0068 40F2BD11 		movw	r1, #445
 339 006c 2A48     		ldr	r0, .L19+12
 340 006e FFF7FEFF 		bl	assert_failed
 341              	.L17:
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 342              		.loc 1 447 12 is_stmt 1
 343 0072 7B68     		ldr	r3, [r7, #4]
 344 0074 93F83D30 		ldrb	r3, [r3, #61]
 345 0078 DBB2     		uxtb	r3, r3
 346              		.loc 1 447 6
 347 007a 002B     		cmp	r3, #0
 348 007c 06D1     		bne	.L18
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/cceCIUcs.s 			page 15


 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 349              		.loc 1 450 17
 350 007e 7B68     		ldr	r3, [r7, #4]
 351 0080 0022     		movs	r2, #0
 352 0082 83F83C20 		strb	r2, [r3, #60]
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->MspInitCallback(huart);
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 353              		.loc 1 464 5
 354 0086 7868     		ldr	r0, [r7, #4]
 355 0088 FFF7FEFF 		bl	HAL_UART_MspInit
 356              	.L18:
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 357              		.loc 1 468 17
 358 008c 7B68     		ldr	r3, [r7, #4]
 359 008e 2422     		movs	r2, #36
 360 0090 83F83D20 		strb	r2, [r3, #61]
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 361              		.loc 1 471 3
 362 0094 7B68     		ldr	r3, [r7, #4]
 363 0096 1B68     		ldr	r3, [r3]
 364 0098 DA68     		ldr	r2, [r3, #12]
 365 009a 7B68     		ldr	r3, [r7, #4]
 366 009c 1B68     		ldr	r3, [r3]
 367 009e 22F40052 		bic	r2, r2, #8192
 368 00a2 DA60     		str	r2, [r3, #12]
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 369              		.loc 1 474 3
 370 00a4 7868     		ldr	r0, [r7, #4]
 371 00a6 FFF7FEFF 		bl	UART_SetConfig
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 372              		.loc 1 479 3
 373 00aa 7B68     		ldr	r3, [r7, #4]
 374 00ac 1B68     		ldr	r3, [r3]
 375 00ae 1A69     		ldr	r2, [r3, #16]
ARM GAS  /tmp/cceCIUcs.s 			page 16


 376 00b0 7B68     		ldr	r3, [r7, #4]
 377 00b2 1B68     		ldr	r3, [r3]
 378 00b4 22F49042 		bic	r2, r2, #18432
 379 00b8 1A61     		str	r2, [r3, #16]
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 380              		.loc 1 480 3
 381 00ba 7B68     		ldr	r3, [r7, #4]
 382 00bc 1B68     		ldr	r3, [r3]
 383 00be 5A69     		ldr	r2, [r3, #20]
 384 00c0 7B68     		ldr	r3, [r7, #4]
 385 00c2 1B68     		ldr	r3, [r3]
 386 00c4 22F02202 		bic	r2, r2, #34
 387 00c8 5A61     		str	r2, [r3, #20]
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 388              		.loc 1 483 3
 389 00ca 7B68     		ldr	r3, [r7, #4]
 390 00cc 1B68     		ldr	r3, [r3]
 391 00ce 5A69     		ldr	r2, [r3, #20]
 392 00d0 7B68     		ldr	r3, [r7, #4]
 393 00d2 1B68     		ldr	r3, [r3]
 394 00d4 42F00802 		orr	r2, r2, #8
 395 00d8 5A61     		str	r2, [r3, #20]
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 396              		.loc 1 486 3
 397 00da 7B68     		ldr	r3, [r7, #4]
 398 00dc 1B68     		ldr	r3, [r3]
 399 00de DA68     		ldr	r2, [r3, #12]
 400 00e0 7B68     		ldr	r3, [r7, #4]
 401 00e2 1B68     		ldr	r3, [r3]
 402 00e4 42F40052 		orr	r2, r2, #8192
 403 00e8 DA60     		str	r2, [r3, #12]
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state*/
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 404              		.loc 1 489 20
 405 00ea 7B68     		ldr	r3, [r7, #4]
 406 00ec 0022     		movs	r2, #0
 407 00ee 1A64     		str	r2, [r3, #64]
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 408              		.loc 1 490 17
 409 00f0 7B68     		ldr	r3, [r7, #4]
 410 00f2 2022     		movs	r2, #32
 411 00f4 83F83D20 		strb	r2, [r3, #61]
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 412              		.loc 1 491 18
 413 00f8 7B68     		ldr	r3, [r7, #4]
 414 00fa 2022     		movs	r2, #32
 415 00fc 83F83E20 		strb	r2, [r3, #62]
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 416              		.loc 1 493 10
 417 0100 0023     		movs	r3, #0
 418              	.L14:
ARM GAS  /tmp/cceCIUcs.s 			page 17


 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 419              		.loc 1 494 1
 420 0102 1846     		mov	r0, r3
 421 0104 0837     		adds	r7, r7, #8
 422              	.LCFI8:
 423              		.cfi_def_cfa_offset 8
 424 0106 BD46     		mov	sp, r7
 425              	.LCFI9:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0108 80BD     		pop	{r7, pc}
 429              	.L20:
 430 010a 00BF     		.align	2
 431              	.L19:
 432 010c 00100140 		.word	1073811456
 433 0110 00440040 		.word	1073759232
 434 0114 00140140 		.word	1073812480
 435 0118 00000000 		.word	.LC0
 436              		.cfi_endproc
 437              	.LFE131:
 439              		.section	.text.HAL_LIN_Init,"ax",%progbits
 440              		.align	1
 441              		.global	HAL_LIN_Init
 442              		.syntax unified
 443              		.thumb
 444              		.thumb_func
 445              		.fpu fpv4-sp-d16
 447              	HAL_LIN_Init:
 448              	.LFB132:
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This parameter can be one of the following values:
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 449              		.loc 1 508 1
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 8
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453 0000 80B5     		push	{r7, lr}
 454              	.LCFI10:
 455              		.cfi_def_cfa_offset 8
 456              		.cfi_offset 7, -8
 457              		.cfi_offset 14, -4
 458 0002 82B0     		sub	sp, sp, #8
 459              	.LCFI11:
 460              		.cfi_def_cfa_offset 16
 461 0004 00AF     		add	r7, sp, #0
 462              	.LCFI12:
ARM GAS  /tmp/cceCIUcs.s 			page 18


 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 3960     		str	r1, [r7]
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart == NULL)
 466              		.loc 1 510 6
 467 000a 7B68     		ldr	r3, [r7, #4]
 468 000c 002B     		cmp	r3, #0
 469 000e 01D1     		bne	.L22
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 470              		.loc 1 512 12
 471 0010 0123     		movs	r3, #1
 472 0012 88E0     		b	.L23
 473              	.L22:
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the LIN UART instance */
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 474              		.loc 1 516 3
 475 0014 7B68     		ldr	r3, [r7, #4]
 476 0016 1B68     		ldr	r3, [r3]
 477 0018 454A     		ldr	r2, .L29
 478 001a 9342     		cmp	r3, r2
 479 001c 0ED0     		beq	.L24
 480              		.loc 1 516 3 is_stmt 0 discriminator 1
 481 001e 7B68     		ldr	r3, [r7, #4]
 482 0020 1B68     		ldr	r3, [r3]
 483 0022 444A     		ldr	r2, .L29+4
 484 0024 9342     		cmp	r3, r2
 485 0026 09D0     		beq	.L24
 486              		.loc 1 516 3 discriminator 2
 487 0028 7B68     		ldr	r3, [r7, #4]
 488 002a 1B68     		ldr	r3, [r3]
 489 002c 424A     		ldr	r2, .L29+8
 490 002e 9342     		cmp	r3, r2
 491 0030 04D0     		beq	.L24
 492              		.loc 1 516 3 discriminator 3
 493 0032 4FF40171 		mov	r1, #516
 494 0036 4148     		ldr	r0, .L29+12
 495 0038 FFF7FEFF 		bl	assert_failed
 496              	.L24:
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the Break detection length parameter */
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 497              		.loc 1 519 3 is_stmt 1
 498 003c 3B68     		ldr	r3, [r7]
 499 003e 002B     		cmp	r3, #0
 500 0040 07D0     		beq	.L25
 501              		.loc 1 519 3 is_stmt 0 discriminator 1
 502 0042 3B68     		ldr	r3, [r7]
 503 0044 202B     		cmp	r3, #32
 504 0046 04D0     		beq	.L25
 505              		.loc 1 519 3 discriminator 2
 506 0048 40F20721 		movw	r1, #519
 507 004c 3B48     		ldr	r0, .L29+12
 508 004e FFF7FEFF 		bl	assert_failed
ARM GAS  /tmp/cceCIUcs.s 			page 19


 509              	.L25:
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 510              		.loc 1 520 3 is_stmt 1
 511 0052 7B68     		ldr	r3, [r7, #4]
 512 0054 9B68     		ldr	r3, [r3, #8]
 513 0056 002B     		cmp	r3, #0
 514 0058 04D0     		beq	.L26
 515              		.loc 1 520 3 is_stmt 0 discriminator 1
 516 005a 4FF40271 		mov	r1, #520
 517 005e 3748     		ldr	r0, .L29+12
 518 0060 FFF7FEFF 		bl	assert_failed
 519              	.L26:
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 520              		.loc 1 521 3 is_stmt 1
 521 0064 7B68     		ldr	r3, [r7, #4]
 522 0066 DB69     		ldr	r3, [r3, #28]
 523 0068 002B     		cmp	r3, #0
 524 006a 04D0     		beq	.L27
 525              		.loc 1 521 3 is_stmt 0 discriminator 1
 526 006c 40F20921 		movw	r1, #521
 527 0070 3248     		ldr	r0, .L29+12
 528 0072 FFF7FEFF 		bl	assert_failed
 529              	.L27:
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 530              		.loc 1 523 12 is_stmt 1
 531 0076 7B68     		ldr	r3, [r7, #4]
 532 0078 93F83D30 		ldrb	r3, [r3, #61]
 533 007c DBB2     		uxtb	r3, r3
 534              		.loc 1 523 6
 535 007e 002B     		cmp	r3, #0
 536 0080 06D1     		bne	.L28
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 537              		.loc 1 526 17
 538 0082 7B68     		ldr	r3, [r7, #4]
 539 0084 0022     		movs	r2, #0
 540 0086 83F83C20 		strb	r2, [r3, #60]
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->MspInitCallback(huart);
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 541              		.loc 1 540 5
 542 008a 7868     		ldr	r0, [r7, #4]
 543 008c FFF7FEFF 		bl	HAL_UART_MspInit
 544              	.L28:
ARM GAS  /tmp/cceCIUcs.s 			page 20


 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 545              		.loc 1 544 17
 546 0090 7B68     		ldr	r3, [r7, #4]
 547 0092 2422     		movs	r2, #36
 548 0094 83F83D20 		strb	r2, [r3, #61]
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 549              		.loc 1 547 3
 550 0098 7B68     		ldr	r3, [r7, #4]
 551 009a 1B68     		ldr	r3, [r3]
 552 009c DA68     		ldr	r2, [r3, #12]
 553 009e 7B68     		ldr	r3, [r7, #4]
 554 00a0 1B68     		ldr	r3, [r3]
 555 00a2 22F40052 		bic	r2, r2, #8192
 556 00a6 DA60     		str	r2, [r3, #12]
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 557              		.loc 1 550 3
 558 00a8 7868     		ldr	r0, [r7, #4]
 559 00aa FFF7FEFF 		bl	UART_SetConfig
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 560              		.loc 1 555 3
 561 00ae 7B68     		ldr	r3, [r7, #4]
 562 00b0 1B68     		ldr	r3, [r3]
 563 00b2 1A69     		ldr	r2, [r3, #16]
 564 00b4 7B68     		ldr	r3, [r7, #4]
 565 00b6 1B68     		ldr	r3, [r3]
 566 00b8 22F40062 		bic	r2, r2, #2048
 567 00bc 1A61     		str	r2, [r3, #16]
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 568              		.loc 1 556 3
 569 00be 7B68     		ldr	r3, [r7, #4]
 570 00c0 1B68     		ldr	r3, [r3]
 571 00c2 5A69     		ldr	r2, [r3, #20]
 572 00c4 7B68     		ldr	r3, [r7, #4]
 573 00c6 1B68     		ldr	r3, [r3]
 574 00c8 22F02A02 		bic	r2, r2, #42
 575 00cc 5A61     		str	r2, [r3, #20]
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 576              		.loc 1 559 3
 577 00ce 7B68     		ldr	r3, [r7, #4]
 578 00d0 1B68     		ldr	r3, [r3]
 579 00d2 1A69     		ldr	r2, [r3, #16]
 580 00d4 7B68     		ldr	r3, [r7, #4]
 581 00d6 1B68     		ldr	r3, [r3]
 582 00d8 42F48042 		orr	r2, r2, #16384
ARM GAS  /tmp/cceCIUcs.s 			page 21


 583 00dc 1A61     		str	r2, [r3, #16]
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 584              		.loc 1 562 3
 585 00de 7B68     		ldr	r3, [r7, #4]
 586 00e0 1B68     		ldr	r3, [r3]
 587 00e2 1A69     		ldr	r2, [r3, #16]
 588 00e4 7B68     		ldr	r3, [r7, #4]
 589 00e6 1B68     		ldr	r3, [r3]
 590 00e8 22F02002 		bic	r2, r2, #32
 591 00ec 1A61     		str	r2, [r3, #16]
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 592              		.loc 1 563 3
 593 00ee 7B68     		ldr	r3, [r7, #4]
 594 00f0 1B68     		ldr	r3, [r3]
 595 00f2 1969     		ldr	r1, [r3, #16]
 596 00f4 7B68     		ldr	r3, [r7, #4]
 597 00f6 1B68     		ldr	r3, [r3]
 598 00f8 3A68     		ldr	r2, [r7]
 599 00fa 0A43     		orrs	r2, r2, r1
 600 00fc 1A61     		str	r2, [r3, #16]
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 601              		.loc 1 566 3
 602 00fe 7B68     		ldr	r3, [r7, #4]
 603 0100 1B68     		ldr	r3, [r3]
 604 0102 DA68     		ldr	r2, [r3, #12]
 605 0104 7B68     		ldr	r3, [r7, #4]
 606 0106 1B68     		ldr	r3, [r3]
 607 0108 42F40052 		orr	r2, r2, #8192
 608 010c DA60     		str	r2, [r3, #12]
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state*/
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 609              		.loc 1 569 20
 610 010e 7B68     		ldr	r3, [r7, #4]
 611 0110 0022     		movs	r2, #0
 612 0112 1A64     		str	r2, [r3, #64]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 613              		.loc 1 570 17
 614 0114 7B68     		ldr	r3, [r7, #4]
 615 0116 2022     		movs	r2, #32
 616 0118 83F83D20 		strb	r2, [r3, #61]
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 617              		.loc 1 571 18
 618 011c 7B68     		ldr	r3, [r7, #4]
 619 011e 2022     		movs	r2, #32
 620 0120 83F83E20 		strb	r2, [r3, #62]
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 621              		.loc 1 573 10
 622 0124 0023     		movs	r3, #0
 623              	.L23:
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 624              		.loc 1 574 1
ARM GAS  /tmp/cceCIUcs.s 			page 22


 625 0126 1846     		mov	r0, r3
 626 0128 0837     		adds	r7, r7, #8
 627              	.LCFI13:
 628              		.cfi_def_cfa_offset 8
 629 012a BD46     		mov	sp, r7
 630              	.LCFI14:
 631              		.cfi_def_cfa_register 13
 632              		@ sp needed
 633 012c 80BD     		pop	{r7, pc}
 634              	.L30:
 635 012e 00BF     		.align	2
 636              	.L29:
 637 0130 00100140 		.word	1073811456
 638 0134 00440040 		.word	1073759232
 639 0138 00140140 		.word	1073812480
 640 013c 00000000 		.word	.LC0
 641              		.cfi_endproc
 642              	.LFE132:
 644              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 645              		.align	1
 646              		.global	HAL_MultiProcessor_Init
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	HAL_MultiProcessor_Init:
 653              	.LFB133:
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Address USART address
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This parameter can be one of the following values:
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 654              		.loc 1 589 1
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 16
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658 0000 80B5     		push	{r7, lr}
 659              	.LCFI15:
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 7, -8
 662              		.cfi_offset 14, -4
 663 0002 84B0     		sub	sp, sp, #16
 664              	.LCFI16:
 665              		.cfi_def_cfa_offset 24
 666 0004 00AF     		add	r7, sp, #0
 667              	.LCFI17:
 668              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cceCIUcs.s 			page 23


 669 0006 F860     		str	r0, [r7, #12]
 670 0008 0B46     		mov	r3, r1
 671 000a 7A60     		str	r2, [r7, #4]
 672 000c FB72     		strb	r3, [r7, #11]
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart == NULL)
 673              		.loc 1 591 6
 674 000e FB68     		ldr	r3, [r7, #12]
 675 0010 002B     		cmp	r3, #0
 676 0012 01D1     		bne	.L32
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 677              		.loc 1 593 12
 678 0014 0123     		movs	r3, #1
 679 0016 A3E0     		b	.L33
 680              	.L32:
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 681              		.loc 1 597 3
 682 0018 FB68     		ldr	r3, [r7, #12]
 683 001a 1B68     		ldr	r3, [r3]
 684 001c 524A     		ldr	r2, .L40
 685 001e 9342     		cmp	r3, r2
 686 0020 0ED0     		beq	.L34
 687              		.loc 1 597 3 is_stmt 0 discriminator 1
 688 0022 FB68     		ldr	r3, [r7, #12]
 689 0024 1B68     		ldr	r3, [r3]
 690 0026 514A     		ldr	r2, .L40+4
 691 0028 9342     		cmp	r3, r2
 692 002a 09D0     		beq	.L34
 693              		.loc 1 597 3 discriminator 2
 694 002c FB68     		ldr	r3, [r7, #12]
 695 002e 1B68     		ldr	r3, [r3]
 696 0030 4F4A     		ldr	r2, .L40+8
 697 0032 9342     		cmp	r3, r2
 698 0034 04D0     		beq	.L34
 699              		.loc 1 597 3 discriminator 3
 700 0036 40F25521 		movw	r1, #597
 701 003a 4E48     		ldr	r0, .L40+12
 702 003c FFF7FEFF 		bl	assert_failed
 703              	.L34:
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 704              		.loc 1 600 3 is_stmt 1
 705 0040 7B68     		ldr	r3, [r7, #4]
 706 0042 002B     		cmp	r3, #0
 707 0044 08D0     		beq	.L35
 708              		.loc 1 600 3 is_stmt 0 discriminator 1
 709 0046 7B68     		ldr	r3, [r7, #4]
 710 0048 B3F5006F 		cmp	r3, #2048
 711 004c 04D0     		beq	.L35
 712              		.loc 1 600 3 discriminator 2
 713 004e 4FF41671 		mov	r1, #600
 714 0052 4848     		ldr	r0, .L40+12
ARM GAS  /tmp/cceCIUcs.s 			page 24


 715 0054 FFF7FEFF 		bl	assert_failed
 716              	.L35:
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 717              		.loc 1 601 3 is_stmt 1
 718 0058 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 719 005a 0F2B     		cmp	r3, #15
 720 005c 04D9     		bls	.L36
 721              		.loc 1 601 3 is_stmt 0 discriminator 1
 722 005e 40F25921 		movw	r1, #601
 723 0062 4448     		ldr	r0, .L40+12
 724 0064 FFF7FEFF 		bl	assert_failed
 725              	.L36:
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 726              		.loc 1 602 3 is_stmt 1
 727 0068 FB68     		ldr	r3, [r7, #12]
 728 006a 9B68     		ldr	r3, [r3, #8]
 729 006c 002B     		cmp	r3, #0
 730 006e 09D0     		beq	.L37
 731              		.loc 1 602 3 is_stmt 0 discriminator 1
 732 0070 FB68     		ldr	r3, [r7, #12]
 733 0072 9B68     		ldr	r3, [r3, #8]
 734 0074 B3F5805F 		cmp	r3, #4096
 735 0078 04D0     		beq	.L37
 736              		.loc 1 602 3 discriminator 2
 737 007a 40F25A21 		movw	r1, #602
 738 007e 3D48     		ldr	r0, .L40+12
 739 0080 FFF7FEFF 		bl	assert_failed
 740              	.L37:
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 741              		.loc 1 603 3 is_stmt 1
 742 0084 FB68     		ldr	r3, [r7, #12]
 743 0086 DB69     		ldr	r3, [r3, #28]
 744 0088 002B     		cmp	r3, #0
 745 008a 09D0     		beq	.L38
 746              		.loc 1 603 3 is_stmt 0 discriminator 1
 747 008c FB68     		ldr	r3, [r7, #12]
 748 008e DB69     		ldr	r3, [r3, #28]
 749 0090 B3F5004F 		cmp	r3, #32768
 750 0094 04D0     		beq	.L38
 751              		.loc 1 603 3 discriminator 2
 752 0096 40F25B21 		movw	r1, #603
 753 009a 3648     		ldr	r0, .L40+12
 754 009c FFF7FEFF 		bl	assert_failed
 755              	.L38:
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 756              		.loc 1 605 12 is_stmt 1
 757 00a0 FB68     		ldr	r3, [r7, #12]
 758 00a2 93F83D30 		ldrb	r3, [r3, #61]
 759 00a6 DBB2     		uxtb	r3, r3
 760              		.loc 1 605 6
 761 00a8 002B     		cmp	r3, #0
 762 00aa 06D1     		bne	.L39
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 763              		.loc 1 608 17
ARM GAS  /tmp/cceCIUcs.s 			page 25


 764 00ac FB68     		ldr	r3, [r7, #12]
 765 00ae 0022     		movs	r2, #0
 766 00b0 83F83C20 		strb	r2, [r3, #60]
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->MspInitCallback(huart);
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 767              		.loc 1 622 5
 768 00b4 F868     		ldr	r0, [r7, #12]
 769 00b6 FFF7FEFF 		bl	HAL_UART_MspInit
 770              	.L39:
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 771              		.loc 1 626 17
 772 00ba FB68     		ldr	r3, [r7, #12]
 773 00bc 2422     		movs	r2, #36
 774 00be 83F83D20 		strb	r2, [r3, #61]
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 775              		.loc 1 629 3
 776 00c2 FB68     		ldr	r3, [r7, #12]
 777 00c4 1B68     		ldr	r3, [r3]
 778 00c6 DA68     		ldr	r2, [r3, #12]
 779 00c8 FB68     		ldr	r3, [r7, #12]
 780 00ca 1B68     		ldr	r3, [r3]
 781 00cc 22F40052 		bic	r2, r2, #8192
 782 00d0 DA60     		str	r2, [r3, #12]
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 783              		.loc 1 632 3
 784 00d2 F868     		ldr	r0, [r7, #12]
 785 00d4 FFF7FEFF 		bl	UART_SetConfig
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 786              		.loc 1 637 3
 787 00d8 FB68     		ldr	r3, [r7, #12]
 788 00da 1B68     		ldr	r3, [r3]
 789 00dc 1A69     		ldr	r2, [r3, #16]
 790 00de FB68     		ldr	r3, [r7, #12]
 791 00e0 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 26


 792 00e2 22F49042 		bic	r2, r2, #18432
 793 00e6 1A61     		str	r2, [r3, #16]
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 794              		.loc 1 638 3
 795 00e8 FB68     		ldr	r3, [r7, #12]
 796 00ea 1B68     		ldr	r3, [r3]
 797 00ec 5A69     		ldr	r2, [r3, #20]
 798 00ee FB68     		ldr	r3, [r7, #12]
 799 00f0 1B68     		ldr	r3, [r3]
 800 00f2 22F02A02 		bic	r2, r2, #42
 801 00f6 5A61     		str	r2, [r3, #20]
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the USART address node */
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 802              		.loc 1 641 3
 803 00f8 FB68     		ldr	r3, [r7, #12]
 804 00fa 1B68     		ldr	r3, [r3]
 805 00fc 1A69     		ldr	r2, [r3, #16]
 806 00fe FB68     		ldr	r3, [r7, #12]
 807 0100 1B68     		ldr	r3, [r3]
 808 0102 22F00F02 		bic	r2, r2, #15
 809 0106 1A61     		str	r2, [r3, #16]
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 810              		.loc 1 642 3
 811 0108 FB68     		ldr	r3, [r7, #12]
 812 010a 1B68     		ldr	r3, [r3]
 813 010c 1969     		ldr	r1, [r3, #16]
 814 010e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 815 0110 FB68     		ldr	r3, [r7, #12]
 816 0112 1B68     		ldr	r3, [r3]
 817 0114 0A43     		orrs	r2, r2, r1
 818 0116 1A61     		str	r2, [r3, #16]
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 819              		.loc 1 645 3
 820 0118 FB68     		ldr	r3, [r7, #12]
 821 011a 1B68     		ldr	r3, [r3]
 822 011c DA68     		ldr	r2, [r3, #12]
 823 011e FB68     		ldr	r3, [r7, #12]
 824 0120 1B68     		ldr	r3, [r3]
 825 0122 22F40062 		bic	r2, r2, #2048
 826 0126 DA60     		str	r2, [r3, #12]
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 827              		.loc 1 646 3
 828 0128 FB68     		ldr	r3, [r7, #12]
 829 012a 1B68     		ldr	r3, [r3]
 830 012c D968     		ldr	r1, [r3, #12]
 831 012e FB68     		ldr	r3, [r7, #12]
 832 0130 1B68     		ldr	r3, [r3]
 833 0132 7A68     		ldr	r2, [r7, #4]
 834 0134 0A43     		orrs	r2, r2, r1
 835 0136 DA60     		str	r2, [r3, #12]
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 836              		.loc 1 649 3
ARM GAS  /tmp/cceCIUcs.s 			page 27


 837 0138 FB68     		ldr	r3, [r7, #12]
 838 013a 1B68     		ldr	r3, [r3]
 839 013c DA68     		ldr	r2, [r3, #12]
 840 013e FB68     		ldr	r3, [r7, #12]
 841 0140 1B68     		ldr	r3, [r3]
 842 0142 42F40052 		orr	r2, r2, #8192
 843 0146 DA60     		str	r2, [r3, #12]
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state */
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 844              		.loc 1 652 20
 845 0148 FB68     		ldr	r3, [r7, #12]
 846 014a 0022     		movs	r2, #0
 847 014c 1A64     		str	r2, [r3, #64]
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 848              		.loc 1 653 17
 849 014e FB68     		ldr	r3, [r7, #12]
 850 0150 2022     		movs	r2, #32
 851 0152 83F83D20 		strb	r2, [r3, #61]
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 852              		.loc 1 654 18
 853 0156 FB68     		ldr	r3, [r7, #12]
 854 0158 2022     		movs	r2, #32
 855 015a 83F83E20 		strb	r2, [r3, #62]
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 856              		.loc 1 656 10
 857 015e 0023     		movs	r3, #0
 858              	.L33:
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 859              		.loc 1 657 1
 860 0160 1846     		mov	r0, r3
 861 0162 1037     		adds	r7, r7, #16
 862              	.LCFI18:
 863              		.cfi_def_cfa_offset 8
 864 0164 BD46     		mov	sp, r7
 865              	.LCFI19:
 866              		.cfi_def_cfa_register 13
 867              		@ sp needed
 868 0166 80BD     		pop	{r7, pc}
 869              	.L41:
 870              		.align	2
 871              	.L40:
 872 0168 00100140 		.word	1073811456
 873 016c 00440040 		.word	1073759232
 874 0170 00140140 		.word	1073812480
 875 0174 00000000 		.word	.LC0
 876              		.cfi_endproc
 877              	.LFE133:
 879              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 880              		.align	1
 881              		.global	HAL_UART_DeInit
 882              		.syntax unified
 883              		.thumb
 884              		.thumb_func
 885              		.fpu fpv4-sp-d16
 887              	HAL_UART_DeInit:
ARM GAS  /tmp/cceCIUcs.s 			page 28


 888              	.LFB134:
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 889              		.loc 1 666 1
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 8
 892              		@ frame_needed = 1, uses_anonymous_args = 0
 893 0000 80B5     		push	{r7, lr}
 894              	.LCFI20:
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 7, -8
 897              		.cfi_offset 14, -4
 898 0002 82B0     		sub	sp, sp, #8
 899              	.LCFI21:
 900              		.cfi_def_cfa_offset 16
 901 0004 00AF     		add	r7, sp, #0
 902              	.LCFI22:
 903              		.cfi_def_cfa_register 7
 904 0006 7860     		str	r0, [r7, #4]
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart == NULL)
 905              		.loc 1 668 6
 906 0008 7B68     		ldr	r3, [r7, #4]
 907 000a 002B     		cmp	r3, #0
 908 000c 01D1     		bne	.L43
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 909              		.loc 1 670 12
 910 000e 0123     		movs	r3, #1
 911 0010 35E0     		b	.L44
 912              	.L43:
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 913              		.loc 1 674 3
 914 0012 7B68     		ldr	r3, [r7, #4]
 915 0014 1B68     		ldr	r3, [r3]
 916 0016 1C4A     		ldr	r2, .L46
 917 0018 9342     		cmp	r3, r2
 918 001a 0ED0     		beq	.L45
 919              		.loc 1 674 3 is_stmt 0 discriminator 1
 920 001c 7B68     		ldr	r3, [r7, #4]
 921 001e 1B68     		ldr	r3, [r3]
 922 0020 1A4A     		ldr	r2, .L46+4
 923 0022 9342     		cmp	r3, r2
 924 0024 09D0     		beq	.L45
 925              		.loc 1 674 3 discriminator 2
 926 0026 7B68     		ldr	r3, [r7, #4]
 927 0028 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 29


 928 002a 194A     		ldr	r2, .L46+8
 929 002c 9342     		cmp	r3, r2
 930 002e 04D0     		beq	.L45
 931              		.loc 1 674 3 discriminator 3
 932 0030 40F2A221 		movw	r1, #674
 933 0034 1748     		ldr	r0, .L46+12
 934 0036 FFF7FEFF 		bl	assert_failed
 935              	.L45:
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 936              		.loc 1 676 17 is_stmt 1
 937 003a 7B68     		ldr	r3, [r7, #4]
 938 003c 2422     		movs	r2, #36
 939 003e 83F83D20 		strb	r2, [r3, #61]
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the Peripheral */
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 940              		.loc 1 679 3
 941 0042 7B68     		ldr	r3, [r7, #4]
 942 0044 1B68     		ldr	r3, [r3]
 943 0046 DA68     		ldr	r2, [r3, #12]
 944 0048 7B68     		ldr	r3, [r7, #4]
 945 004a 1B68     		ldr	r3, [r3]
 946 004c 22F40052 		bic	r2, r2, #8192
 947 0050 DA60     		str	r2, [r3, #12]
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DeInit the low level hardware */
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DeInit the low level hardware */
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 948              		.loc 1 690 3
 949 0052 7868     		ldr	r0, [r7, #4]
 950 0054 FFF7FEFF 		bl	HAL_UART_MspDeInit
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 951              		.loc 1 693 20
 952 0058 7B68     		ldr	r3, [r7, #4]
 953 005a 0022     		movs	r2, #0
 954 005c 1A64     		str	r2, [r3, #64]
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 955              		.loc 1 694 17
 956 005e 7B68     		ldr	r3, [r7, #4]
 957 0060 0022     		movs	r2, #0
 958 0062 83F83D20 		strb	r2, [r3, #61]
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 959              		.loc 1 695 18
 960 0066 7B68     		ldr	r3, [r7, #4]
 961 0068 0022     		movs	r2, #0
 962 006a 83F83E20 		strb	r2, [r3, #62]
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
ARM GAS  /tmp/cceCIUcs.s 			page 30


 963              		.loc 1 696 24
 964 006e 7B68     		ldr	r3, [r7, #4]
 965 0070 0022     		movs	r2, #0
 966 0072 1A63     		str	r2, [r3, #48]
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlock */
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 967              		.loc 1 699 3
 968 0074 7B68     		ldr	r3, [r7, #4]
 969 0076 0022     		movs	r2, #0
 970 0078 83F83C20 		strb	r2, [r3, #60]
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 971              		.loc 1 701 10
 972 007c 0023     		movs	r3, #0
 973              	.L44:
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 974              		.loc 1 702 1
 975 007e 1846     		mov	r0, r3
 976 0080 0837     		adds	r7, r7, #8
 977              	.LCFI23:
 978              		.cfi_def_cfa_offset 8
 979 0082 BD46     		mov	sp, r7
 980              	.LCFI24:
 981              		.cfi_def_cfa_register 13
 982              		@ sp needed
 983 0084 80BD     		pop	{r7, pc}
 984              	.L47:
 985 0086 00BF     		.align	2
 986              	.L46:
 987 0088 00100140 		.word	1073811456
 988 008c 00440040 		.word	1073759232
 989 0090 00140140 		.word	1073812480
 990 0094 00000000 		.word	.LC0
 991              		.cfi_endproc
 992              	.LFE134:
 994              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 995              		.align	1
 996              		.weak	HAL_UART_MspInit
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	HAL_UART_MspInit:
 1003              	.LFB135:
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART MSP Init.
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1004              		.loc 1 711 1
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cceCIUcs.s 			page 31


 1007              		@ frame_needed = 1, uses_anonymous_args = 0
 1008              		@ link register save eliminated.
 1009 0000 80B4     		push	{r7}
 1010              	.LCFI25:
 1011              		.cfi_def_cfa_offset 4
 1012              		.cfi_offset 7, -4
 1013 0002 83B0     		sub	sp, sp, #12
 1014              	.LCFI26:
 1015              		.cfi_def_cfa_offset 16
 1016 0004 00AF     		add	r7, sp, #0
 1017              	.LCFI27:
 1018              		.cfi_def_cfa_register 7
 1019 0006 7860     		str	r0, [r7, #4]
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1020              		.loc 1 717 1
 1021 0008 00BF     		nop
 1022 000a 0C37     		adds	r7, r7, #12
 1023              	.LCFI28:
 1024              		.cfi_def_cfa_offset 4
 1025 000c BD46     		mov	sp, r7
 1026              	.LCFI29:
 1027              		.cfi_def_cfa_register 13
 1028              		@ sp needed
 1029 000e 5DF8047B 		ldr	r7, [sp], #4
 1030              	.LCFI30:
 1031              		.cfi_restore 7
 1032              		.cfi_def_cfa_offset 0
 1033 0012 7047     		bx	lr
 1034              		.cfi_endproc
 1035              	.LFE135:
 1037              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 1038              		.align	1
 1039              		.weak	HAL_UART_MspDeInit
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu fpv4-sp-d16
 1045              	HAL_UART_MspDeInit:
 1046              	.LFB136:
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1047              		.loc 1 726 1
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 8
 1050              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cceCIUcs.s 			page 32


 1051              		@ link register save eliminated.
 1052 0000 80B4     		push	{r7}
 1053              	.LCFI31:
 1054              		.cfi_def_cfa_offset 4
 1055              		.cfi_offset 7, -4
 1056 0002 83B0     		sub	sp, sp, #12
 1057              	.LCFI32:
 1058              		.cfi_def_cfa_offset 16
 1059 0004 00AF     		add	r7, sp, #0
 1060              	.LCFI33:
 1061              		.cfi_def_cfa_register 7
 1062 0006 7860     		str	r0, [r7, #4]
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1063              		.loc 1 732 1
 1064 0008 00BF     		nop
 1065 000a 0C37     		adds	r7, r7, #12
 1066              	.LCFI34:
 1067              		.cfi_def_cfa_offset 4
 1068 000c BD46     		mov	sp, r7
 1069              	.LCFI35:
 1070              		.cfi_def_cfa_register 13
 1071              		@ sp needed
 1072 000e 5DF8047B 		ldr	r7, [sp], #4
 1073              	.LCFI36:
 1074              		.cfi_restore 7
 1075              		.cfi_def_cfa_offset 0
 1076 0012 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE136:
 1080              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 1081              		.align	1
 1082              		.global	HAL_UART_Transmit
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv4-sp-d16
 1088              	HAL_UART_Transmit:
 1089              	.LFB137:
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Register a User UART Callback
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart uart handle
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This parameter can be one of the following values:
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
ARM GAS  /tmp/cceCIUcs.s 			page 33


 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (pCallback == NULL)
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Update the error code */
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process locked */
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     switch (CallbackID)
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
ARM GAS  /tmp/cceCIUcs.s 			page 34


 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       default :
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Update the error code */
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Return error status */
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         status =  HAL_ERROR;
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     switch (CallbackID)
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       default :
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Update the error code */
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Return error status */
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         status =  HAL_ERROR;
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Update the error code */
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Return error status */
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     status =  HAL_ERROR;
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Release Lock */
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return status;
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
ARM GAS  /tmp/cceCIUcs.s 			page 35


 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart uart handle
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This parameter can be one of the following values:
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process locked */
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     switch (CallbackID)
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
ARM GAS  /tmp/cceCIUcs.s 			page 36


 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       default :
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Update the error code */
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Return error status */
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         status =  HAL_ERROR;
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     switch (CallbackID)
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       default :
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Update the error code */
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Return error status */
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         status =  HAL_ERROR;
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         break;
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Update the error code */
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Return error status */
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     status =  HAL_ERROR;
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Release Lock */
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return status;
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
ARM GAS  /tmp/cceCIUcs.s 			page 37


 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart     Uart handle
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (pCallback == NULL)
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process locked */
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     status =  HAL_ERROR;
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Release Lock */
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return status;
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart     Uart handle
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process locked */
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     status =  HAL_ERROR;
ARM GAS  /tmp/cceCIUcs.s 			page 38


1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Release Lock */
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return status;
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  ===============================================================================
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                       ##### IO operation functions #####
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  ===============================================================================
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and Half duplex data transfers.
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) There are two modes of transfer:
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            after finishing transfer.
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            or DMA, these API's return the HAL status.
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The end of the data processing will be indicated through the
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            using DMA mode.
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Blocking mode API's are :
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Receive()
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
ARM GAS  /tmp/cceCIUcs.s 			page 39


1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Abort()
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         Errors are handled as follows :
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of u16 provided through pData.
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size,
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1090              		.loc 1 1137 1
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 32
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094 0000 80B5     		push	{r7, lr}
 1095              	.LCFI37:
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 7, -8
ARM GAS  /tmp/cceCIUcs.s 			page 40


 1098              		.cfi_offset 14, -4
 1099 0002 8AB0     		sub	sp, sp, #40
 1100              	.LCFI38:
 1101              		.cfi_def_cfa_offset 48
 1102 0004 02AF     		add	r7, sp, #8
 1103              	.LCFI39:
 1104              		.cfi_def_cfa 7, 40
 1105 0006 F860     		str	r0, [r7, #12]
 1106 0008 B960     		str	r1, [r7, #8]
 1107 000a 3B60     		str	r3, [r7]
 1108 000c 1346     		mov	r3, r2	@ movhi
 1109 000e FB80     		strh	r3, [r7, #6]	@ movhi
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   const uint8_t  *pdata8bits;
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   const uint16_t *pdata16bits;
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart = 0U;
 1110              		.loc 1 1140 12
 1111 0010 0023     		movs	r3, #0
 1112 0012 7B61     		str	r3, [r7, #20]
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1113              		.loc 1 1143 12
 1114 0014 FB68     		ldr	r3, [r7, #12]
 1115 0016 93F83D30 		ldrb	r3, [r3, #61]
 1116 001a DBB2     		uxtb	r3, r3
 1117              		.loc 1 1143 6
 1118 001c 202B     		cmp	r3, #32
 1119 001e 7CD1     		bne	.L51
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1120              		.loc 1 1145 8
 1121 0020 BB68     		ldr	r3, [r7, #8]
 1122 0022 002B     		cmp	r3, #0
 1123 0024 02D0     		beq	.L52
 1124              		.loc 1 1145 25 discriminator 1
 1125 0026 FB88     		ldrh	r3, [r7, #6]
 1126 0028 002B     		cmp	r3, #0
 1127 002a 01D1     		bne	.L53
 1128              	.L52:
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 1129              		.loc 1 1147 15
 1130 002c 0123     		movs	r3, #1
 1131 002e 75E0     		b	.L54
 1132              	.L53:
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1133              		.loc 1 1151 5
 1134 0030 FB68     		ldr	r3, [r7, #12]
 1135 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1136 0036 012B     		cmp	r3, #1
 1137 0038 01D1     		bne	.L55
 1138              		.loc 1 1151 5 is_stmt 0 discriminator 1
 1139 003a 0223     		movs	r3, #2
 1140 003c 6EE0     		b	.L54
ARM GAS  /tmp/cceCIUcs.s 			page 41


 1141              	.L55:
 1142              		.loc 1 1151 5 discriminator 2
 1143 003e FB68     		ldr	r3, [r7, #12]
 1144 0040 0122     		movs	r2, #1
 1145 0042 83F83C20 		strb	r2, [r3, #60]
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1146              		.loc 1 1153 22 is_stmt 1 discriminator 2
 1147 0046 FB68     		ldr	r3, [r7, #12]
 1148 0048 0022     		movs	r2, #0
 1149 004a 1A64     		str	r2, [r3, #64]
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1150              		.loc 1 1154 19 discriminator 2
 1151 004c FB68     		ldr	r3, [r7, #12]
 1152 004e 2122     		movs	r2, #33
 1153 0050 83F83D20 		strb	r2, [r3, #61]
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout management */
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1154              		.loc 1 1157 17 discriminator 2
 1155 0054 FFF7FEFF 		bl	HAL_GetTick
 1156 0058 7861     		str	r0, [r7, #20]
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1157              		.loc 1 1159 23 discriminator 2
 1158 005a FB68     		ldr	r3, [r7, #12]
 1159 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1160 005e 9A84     		strh	r2, [r3, #36]	@ movhi
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1161              		.loc 1 1160 24 discriminator 2
 1162 0060 FB68     		ldr	r3, [r7, #12]
 1163 0062 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1164 0064 DA84     		strh	r2, [r3, #38]	@ movhi
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1165              		.loc 1 1163 21 discriminator 2
 1166 0066 FB68     		ldr	r3, [r7, #12]
 1167 0068 9B68     		ldr	r3, [r3, #8]
 1168              		.loc 1 1163 8 discriminator 2
 1169 006a B3F5805F 		cmp	r3, #4096
 1170 006e 08D1     		bne	.L56
 1171              		.loc 1 1163 71 discriminator 1
 1172 0070 FB68     		ldr	r3, [r7, #12]
 1173 0072 1B69     		ldr	r3, [r3, #16]
 1174              		.loc 1 1163 56 discriminator 1
 1175 0074 002B     		cmp	r3, #0
 1176 0076 04D1     		bne	.L56
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = NULL;
 1177              		.loc 1 1165 19
 1178 0078 0023     		movs	r3, #0
 1179 007a FB61     		str	r3, [r7, #28]
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = (const uint16_t *) pData;
 1180              		.loc 1 1166 19
 1181 007c BB68     		ldr	r3, [r7, #8]
 1182 007e BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/cceCIUcs.s 			page 42


 1183 0080 03E0     		b	.L57
 1184              	.L56:
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = pData;
 1185              		.loc 1 1170 19
 1186 0082 BB68     		ldr	r3, [r7, #8]
 1187 0084 FB61     		str	r3, [r7, #28]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = NULL;
 1188              		.loc 1 1171 19
 1189 0086 0023     		movs	r3, #0
 1190 0088 BB61     		str	r3, [r7, #24]
 1191              	.L57:
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1192              		.loc 1 1175 5
 1193 008a FB68     		ldr	r3, [r7, #12]
 1194 008c 0022     		movs	r2, #0
 1195 008e 83F83C20 		strb	r2, [r3, #60]
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 1196              		.loc 1 1177 11
 1197 0092 2AE0     		b	.L58
 1198              	.L62:
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 1199              		.loc 1 1179 11
 1200 0094 3B68     		ldr	r3, [r7]
 1201 0096 0093     		str	r3, [sp]
 1202 0098 7B69     		ldr	r3, [r7, #20]
 1203 009a 0022     		movs	r2, #0
 1204 009c 8021     		movs	r1, #128
 1205 009e F868     		ldr	r0, [r7, #12]
 1206 00a0 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1207 00a4 0346     		mov	r3, r0
 1208              		.loc 1 1179 10
 1209 00a6 002B     		cmp	r3, #0
 1210 00a8 01D0     		beq	.L59
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         return HAL_TIMEOUT;
 1211              		.loc 1 1181 16
 1212 00aa 0323     		movs	r3, #3
 1213 00ac 36E0     		b	.L54
 1214              	.L59:
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (pdata8bits == NULL)
 1215              		.loc 1 1183 10
 1216 00ae FB69     		ldr	r3, [r7, #28]
 1217 00b0 002B     		cmp	r3, #0
 1218 00b2 0BD1     		bne	.L60
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 1219              		.loc 1 1185 42
 1220 00b4 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cceCIUcs.s 			page 43


 1221 00b6 1B88     		ldrh	r3, [r3]
 1222              		.loc 1 1185 31
 1223 00b8 1A46     		mov	r2, r3
 1224              		.loc 1 1185 14
 1225 00ba FB68     		ldr	r3, [r7, #12]
 1226 00bc 1B68     		ldr	r3, [r3]
 1227              		.loc 1 1185 31
 1228 00be C2F30802 		ubfx	r2, r2, #0, #9
 1229              		.loc 1 1185 29
 1230 00c2 5A60     		str	r2, [r3, #4]
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         pdata16bits++;
 1231              		.loc 1 1186 20
 1232 00c4 BB69     		ldr	r3, [r7, #24]
 1233 00c6 0233     		adds	r3, r3, #2
 1234 00c8 BB61     		str	r3, [r7, #24]
 1235 00ca 07E0     		b	.L61
 1236              	.L60:
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 1237              		.loc 1 1190 41
 1238 00cc FB69     		ldr	r3, [r7, #28]
 1239 00ce 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1240              		.loc 1 1190 14
 1241 00d0 FB68     		ldr	r3, [r7, #12]
 1242 00d2 1B68     		ldr	r3, [r3]
 1243              		.loc 1 1190 29
 1244 00d4 5A60     		str	r2, [r3, #4]
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         pdata8bits++;
 1245              		.loc 1 1191 19
 1246 00d6 FB69     		ldr	r3, [r7, #28]
 1247 00d8 0133     		adds	r3, r3, #1
 1248 00da FB61     		str	r3, [r7, #28]
 1249              	.L61:
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->TxXferCount--;
 1250              		.loc 1 1193 12
 1251 00dc FB68     		ldr	r3, [r7, #12]
 1252 00de DB8C     		ldrh	r3, [r3, #38]	@ movhi
 1253 00e0 9BB2     		uxth	r3, r3
 1254              		.loc 1 1193 25
 1255 00e2 013B     		subs	r3, r3, #1
 1256 00e4 9AB2     		uxth	r2, r3
 1257 00e6 FB68     		ldr	r3, [r7, #12]
 1258 00e8 DA84     		strh	r2, [r3, #38]	@ movhi
 1259              	.L58:
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 1260              		.loc 1 1177 17
 1261 00ea FB68     		ldr	r3, [r7, #12]
 1262 00ec DB8C     		ldrh	r3, [r3, #38]	@ movhi
 1263 00ee 9BB2     		uxth	r3, r3
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 1264              		.loc 1 1177 11
 1265 00f0 002B     		cmp	r3, #0
 1266 00f2 CFD1     		bne	.L62
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
ARM GAS  /tmp/cceCIUcs.s 			page 44


1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 1267              		.loc 1 1196 9
 1268 00f4 3B68     		ldr	r3, [r7]
 1269 00f6 0093     		str	r3, [sp]
 1270 00f8 7B69     		ldr	r3, [r7, #20]
 1271 00fa 0022     		movs	r2, #0
 1272 00fc 4021     		movs	r1, #64
 1273 00fe F868     		ldr	r0, [r7, #12]
 1274 0100 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1275 0104 0346     		mov	r3, r0
 1276              		.loc 1 1196 8
 1277 0106 002B     		cmp	r3, #0
 1278 0108 01D0     		beq	.L63
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_TIMEOUT;
 1279              		.loc 1 1198 14
 1280 010a 0323     		movs	r3, #3
 1281 010c 06E0     		b	.L54
 1282              	.L63:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 1283              		.loc 1 1202 19
 1284 010e FB68     		ldr	r3, [r7, #12]
 1285 0110 2022     		movs	r2, #32
 1286 0112 83F83D20 		strb	r2, [r3, #61]
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1287              		.loc 1 1204 12
 1288 0116 0023     		movs	r3, #0
 1289 0118 00E0     		b	.L54
 1290              	.L51:
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1291              		.loc 1 1208 12
 1292 011a 0223     		movs	r3, #2
 1293              	.L54:
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1294              		.loc 1 1210 1
 1295 011c 1846     		mov	r0, r3
 1296 011e 2037     		adds	r7, r7, #32
 1297              	.LCFI40:
 1298              		.cfi_def_cfa_offset 8
 1299 0120 BD46     		mov	sp, r7
 1300              	.LCFI41:
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 0122 80BD     		pop	{r7, pc}
 1304              		.cfi_endproc
 1305              	.LFE137:
 1307              		.section	.text.HAL_UART_Receive,"ax",%progbits
 1308              		.align	1
ARM GAS  /tmp/cceCIUcs.s 			page 45


 1309              		.global	HAL_UART_Receive
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu fpv4-sp-d16
 1315              	HAL_UART_Receive:
 1316              	.LFB138:
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of u16 available through pData.
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1317              		.loc 1 1225 1
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 32
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321 0000 80B5     		push	{r7, lr}
 1322              	.LCFI42:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 7, -8
 1325              		.cfi_offset 14, -4
 1326 0002 8AB0     		sub	sp, sp, #40
 1327              	.LCFI43:
 1328              		.cfi_def_cfa_offset 48
 1329 0004 02AF     		add	r7, sp, #8
 1330              	.LCFI44:
 1331              		.cfi_def_cfa 7, 40
 1332 0006 F860     		str	r0, [r7, #12]
 1333 0008 B960     		str	r1, [r7, #8]
 1334 000a 3B60     		str	r3, [r7]
 1335 000c 1346     		mov	r3, r2	@ movhi
 1336 000e FB80     		strh	r3, [r7, #6]	@ movhi
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint8_t  *pdata8bits;
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t *pdata16bits;
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart = 0U;
 1337              		.loc 1 1228 12
 1338 0010 0023     		movs	r3, #0
 1339 0012 7B61     		str	r3, [r7, #20]
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1340              		.loc 1 1231 12
 1341 0014 FB68     		ldr	r3, [r7, #12]
 1342 0016 93F83E30 		ldrb	r3, [r3, #62]
 1343 001a DBB2     		uxtb	r3, r3
 1344              		.loc 1 1231 6
 1345 001c 202B     		cmp	r3, #32
ARM GAS  /tmp/cceCIUcs.s 			page 46


 1346 001e 40F08C80 		bne	.L65
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1347              		.loc 1 1233 8
 1348 0022 BB68     		ldr	r3, [r7, #8]
 1349 0024 002B     		cmp	r3, #0
 1350 0026 02D0     		beq	.L66
 1351              		.loc 1 1233 25 discriminator 1
 1352 0028 FB88     		ldrh	r3, [r7, #6]
 1353 002a 002B     		cmp	r3, #0
 1354 002c 01D1     		bne	.L67
 1355              	.L66:
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 1356              		.loc 1 1235 15
 1357 002e 0123     		movs	r3, #1
 1358 0030 84E0     		b	.L68
 1359              	.L67:
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1360              		.loc 1 1239 5
 1361 0032 FB68     		ldr	r3, [r7, #12]
 1362 0034 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1363 0038 012B     		cmp	r3, #1
 1364 003a 01D1     		bne	.L69
 1365              		.loc 1 1239 5 is_stmt 0 discriminator 1
 1366 003c 0223     		movs	r3, #2
 1367 003e 7DE0     		b	.L68
 1368              	.L69:
 1369              		.loc 1 1239 5 discriminator 2
 1370 0040 FB68     		ldr	r3, [r7, #12]
 1371 0042 0122     		movs	r2, #1
 1372 0044 83F83C20 		strb	r2, [r3, #60]
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1373              		.loc 1 1241 22 is_stmt 1 discriminator 2
 1374 0048 FB68     		ldr	r3, [r7, #12]
 1375 004a 0022     		movs	r2, #0
 1376 004c 1A64     		str	r2, [r3, #64]
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1377              		.loc 1 1242 20 discriminator 2
 1378 004e FB68     		ldr	r3, [r7, #12]
 1379 0050 2222     		movs	r2, #34
 1380 0052 83F83E20 		strb	r2, [r3, #62]
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1381              		.loc 1 1243 26 discriminator 2
 1382 0056 FB68     		ldr	r3, [r7, #12]
 1383 0058 0022     		movs	r2, #0
 1384 005a 1A63     		str	r2, [r3, #48]
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout management */
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1385              		.loc 1 1246 17 discriminator 2
 1386 005c FFF7FEFF 		bl	HAL_GetTick
 1387 0060 7861     		str	r0, [r7, #20]
ARM GAS  /tmp/cceCIUcs.s 			page 47


1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size;
 1388              		.loc 1 1248 23 discriminator 2
 1389 0062 FB68     		ldr	r3, [r7, #12]
 1390 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1391 0066 9A85     		strh	r2, [r3, #44]	@ movhi
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = Size;
 1392              		.loc 1 1249 24 discriminator 2
 1393 0068 FB68     		ldr	r3, [r7, #12]
 1394 006a FA88     		ldrh	r2, [r7, #6]	@ movhi
 1395 006c DA85     		strh	r2, [r3, #46]	@ movhi
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1396              		.loc 1 1252 21 discriminator 2
 1397 006e FB68     		ldr	r3, [r7, #12]
 1398 0070 9B68     		ldr	r3, [r3, #8]
 1399              		.loc 1 1252 8 discriminator 2
 1400 0072 B3F5805F 		cmp	r3, #4096
 1401 0076 08D1     		bne	.L70
 1402              		.loc 1 1252 71 discriminator 1
 1403 0078 FB68     		ldr	r3, [r7, #12]
 1404 007a 1B69     		ldr	r3, [r3, #16]
 1405              		.loc 1 1252 56 discriminator 1
 1406 007c 002B     		cmp	r3, #0
 1407 007e 04D1     		bne	.L70
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = NULL;
 1408              		.loc 1 1254 19
 1409 0080 0023     		movs	r3, #0
 1410 0082 FB61     		str	r3, [r7, #28]
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1411              		.loc 1 1255 19
 1412 0084 BB68     		ldr	r3, [r7, #8]
 1413 0086 BB61     		str	r3, [r7, #24]
 1414 0088 03E0     		b	.L71
 1415              	.L70:
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = pData;
 1416              		.loc 1 1259 19
 1417 008a BB68     		ldr	r3, [r7, #8]
 1418 008c FB61     		str	r3, [r7, #28]
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = NULL;
 1419              		.loc 1 1260 19
 1420 008e 0023     		movs	r3, #0
 1421 0090 BB61     		str	r3, [r7, #24]
 1422              	.L71:
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1423              		.loc 1 1264 5
 1424 0092 FB68     		ldr	r3, [r7, #12]
 1425 0094 0022     		movs	r2, #0
 1426 0096 83F83C20 		strb	r2, [r3, #60]
ARM GAS  /tmp/cceCIUcs.s 			page 48


1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check the remain data to be received */
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1427              		.loc 1 1267 11
 1428 009a 43E0     		b	.L72
 1429              	.L79:
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1430              		.loc 1 1269 11
 1431 009c 3B68     		ldr	r3, [r7]
 1432 009e 0093     		str	r3, [sp]
 1433 00a0 7B69     		ldr	r3, [r7, #20]
 1434 00a2 0022     		movs	r2, #0
 1435 00a4 2021     		movs	r1, #32
 1436 00a6 F868     		ldr	r0, [r7, #12]
 1437 00a8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1438 00ac 0346     		mov	r3, r0
 1439              		.loc 1 1269 10
 1440 00ae 002B     		cmp	r3, #0
 1441 00b0 01D0     		beq	.L73
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         return HAL_TIMEOUT;
 1442              		.loc 1 1271 16
 1443 00b2 0323     		movs	r3, #3
 1444 00b4 42E0     		b	.L68
 1445              	.L73:
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (pdata8bits == NULL)
 1446              		.loc 1 1273 10
 1447 00b6 FB69     		ldr	r3, [r7, #28]
 1448 00b8 002B     		cmp	r3, #0
 1449 00ba 0CD1     		bne	.L74
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 1450              		.loc 1 1275 40
 1451 00bc FB68     		ldr	r3, [r7, #12]
 1452 00be 1B68     		ldr	r3, [r3]
 1453              		.loc 1 1275 50
 1454 00c0 5B68     		ldr	r3, [r3, #4]
 1455              		.loc 1 1275 24
 1456 00c2 9BB2     		uxth	r3, r3
 1457 00c4 C3F30803 		ubfx	r3, r3, #0, #9
 1458 00c8 9AB2     		uxth	r2, r3
 1459              		.loc 1 1275 22
 1460 00ca BB69     		ldr	r3, [r7, #24]
 1461 00cc 1A80     		strh	r2, [r3]	@ movhi
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         pdata16bits++;
 1462              		.loc 1 1276 20
 1463 00ce BB69     		ldr	r3, [r7, #24]
 1464 00d0 0233     		adds	r3, r3, #2
 1465 00d2 BB61     		str	r3, [r7, #24]
 1466 00d4 1FE0     		b	.L75
 1467              	.L74:
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORD
ARM GAS  /tmp/cceCIUcs.s 			page 49


 1468              		.loc 1 1280 25
 1469 00d6 FB68     		ldr	r3, [r7, #12]
 1470 00d8 9B68     		ldr	r3, [r3, #8]
 1471              		.loc 1 1280 12
 1472 00da B3F5805F 		cmp	r3, #4096
 1473 00de 07D0     		beq	.L76
 1474              		.loc 1 1280 76 discriminator 1
 1475 00e0 FB68     		ldr	r3, [r7, #12]
 1476 00e2 9B68     		ldr	r3, [r3, #8]
 1477              		.loc 1 1280 60 discriminator 1
 1478 00e4 002B     		cmp	r3, #0
 1479 00e6 0AD1     		bne	.L77
 1480              		.loc 1 1280 126 discriminator 2
 1481 00e8 FB68     		ldr	r3, [r7, #12]
 1482 00ea 1B69     		ldr	r3, [r3, #16]
 1483              		.loc 1 1280 111 discriminator 2
 1484 00ec 002B     		cmp	r3, #0
 1485 00ee 06D1     		bne	.L77
 1486              	.L76:
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1487              		.loc 1 1282 40
 1488 00f0 FB68     		ldr	r3, [r7, #12]
 1489 00f2 1B68     		ldr	r3, [r3]
 1490              		.loc 1 1282 50
 1491 00f4 5B68     		ldr	r3, [r3, #4]
 1492              		.loc 1 1282 25
 1493 00f6 DAB2     		uxtb	r2, r3
 1494              		.loc 1 1282 23
 1495 00f8 FB69     		ldr	r3, [r7, #28]
 1496 00fa 1A70     		strb	r2, [r3]
 1497 00fc 08E0     		b	.L78
 1498              	.L77:
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1499              		.loc 1 1286 40
 1500 00fe FB68     		ldr	r3, [r7, #12]
 1501 0100 1B68     		ldr	r3, [r3]
 1502              		.loc 1 1286 50
 1503 0102 5B68     		ldr	r3, [r3, #4]
 1504              		.loc 1 1286 25
 1505 0104 DBB2     		uxtb	r3, r3
 1506 0106 03F07F03 		and	r3, r3, #127
 1507 010a DAB2     		uxtb	r2, r3
 1508              		.loc 1 1286 23
 1509 010c FB69     		ldr	r3, [r7, #28]
 1510 010e 1A70     		strb	r2, [r3]
 1511              	.L78:
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         pdata8bits++;
 1512              		.loc 1 1288 19
 1513 0110 FB69     		ldr	r3, [r7, #28]
 1514 0112 0133     		adds	r3, r3, #1
 1515 0114 FB61     		str	r3, [r7, #28]
 1516              	.L75:
ARM GAS  /tmp/cceCIUcs.s 			page 50


1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxXferCount--;
 1517              		.loc 1 1290 12
 1518 0116 FB68     		ldr	r3, [r7, #12]
 1519 0118 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1520 011a 9BB2     		uxth	r3, r3
 1521              		.loc 1 1290 25
 1522 011c 013B     		subs	r3, r3, #1
 1523 011e 9AB2     		uxth	r2, r3
 1524 0120 FB68     		ldr	r3, [r7, #12]
 1525 0122 DA85     		strh	r2, [r3, #46]	@ movhi
 1526              	.L72:
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 1527              		.loc 1 1267 17
 1528 0124 FB68     		ldr	r3, [r7, #12]
 1529 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1530 0128 9BB2     		uxth	r3, r3
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 1531              		.loc 1 1267 11
 1532 012a 002B     		cmp	r3, #0
 1533 012c B6D1     		bne	.L79
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1534              		.loc 1 1294 20
 1535 012e FB68     		ldr	r3, [r7, #12]
 1536 0130 2022     		movs	r2, #32
 1537 0132 83F83E20 		strb	r2, [r3, #62]
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1538              		.loc 1 1296 12
 1539 0136 0023     		movs	r3, #0
 1540 0138 00E0     		b	.L68
 1541              	.L65:
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1542              		.loc 1 1300 12
 1543 013a 0223     		movs	r3, #2
 1544              	.L68:
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1545              		.loc 1 1302 1
 1546 013c 1846     		mov	r0, r3
 1547 013e 2037     		adds	r7, r7, #32
 1548              	.LCFI45:
 1549              		.cfi_def_cfa_offset 8
 1550 0140 BD46     		mov	sp, r7
 1551              	.LCFI46:
 1552              		.cfi_def_cfa_register 13
 1553              		@ sp needed
 1554 0142 80BD     		pop	{r7, pc}
 1555              		.cfi_endproc
 1556              	.LFE138:
 1558              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
ARM GAS  /tmp/cceCIUcs.s 			page 51


 1559              		.align	1
 1560              		.global	HAL_UART_Transmit_IT
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv4-sp-d16
 1566              	HAL_UART_Transmit_IT:
 1567              	.LFB139:
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of u16 provided through pData.
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Si
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1568              		.loc 1 1316 1
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 16
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
 1572              		@ link register save eliminated.
 1573 0000 80B4     		push	{r7}
 1574              	.LCFI47:
 1575              		.cfi_def_cfa_offset 4
 1576              		.cfi_offset 7, -4
 1577 0002 85B0     		sub	sp, sp, #20
 1578              	.LCFI48:
 1579              		.cfi_def_cfa_offset 24
 1580 0004 00AF     		add	r7, sp, #0
 1581              	.LCFI49:
 1582              		.cfi_def_cfa_register 7
 1583 0006 F860     		str	r0, [r7, #12]
 1584 0008 B960     		str	r1, [r7, #8]
 1585 000a 1346     		mov	r3, r2
 1586 000c FB80     		strh	r3, [r7, #6]	@ movhi
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1587              		.loc 1 1318 12
 1588 000e FB68     		ldr	r3, [r7, #12]
 1589 0010 93F83D30 		ldrb	r3, [r3, #61]
 1590 0014 DBB2     		uxtb	r3, r3
 1591              		.loc 1 1318 6
 1592 0016 202B     		cmp	r3, #32
 1593 0018 30D1     		bne	.L81
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1594              		.loc 1 1320 8
 1595 001a BB68     		ldr	r3, [r7, #8]
 1596 001c 002B     		cmp	r3, #0
 1597 001e 02D0     		beq	.L82
 1598              		.loc 1 1320 25 discriminator 1
ARM GAS  /tmp/cceCIUcs.s 			page 52


 1599 0020 FB88     		ldrh	r3, [r7, #6]
 1600 0022 002B     		cmp	r3, #0
 1601 0024 01D1     		bne	.L83
 1602              	.L82:
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1603              		.loc 1 1322 14
 1604 0026 0123     		movs	r3, #1
 1605 0028 29E0     		b	.L84
 1606              	.L83:
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1607              		.loc 1 1326 5
 1608 002a FB68     		ldr	r3, [r7, #12]
 1609 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1610 0030 012B     		cmp	r3, #1
 1611 0032 01D1     		bne	.L85
 1612              		.loc 1 1326 5 is_stmt 0 discriminator 1
 1613 0034 0223     		movs	r3, #2
 1614 0036 22E0     		b	.L84
 1615              	.L85:
 1616              		.loc 1 1326 5 discriminator 2
 1617 0038 FB68     		ldr	r3, [r7, #12]
 1618 003a 0122     		movs	r2, #1
 1619 003c 83F83C20 		strb	r2, [r3, #60]
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1620              		.loc 1 1328 23 is_stmt 1 discriminator 2
 1621 0040 FB68     		ldr	r3, [r7, #12]
 1622 0042 BA68     		ldr	r2, [r7, #8]
 1623 0044 1A62     		str	r2, [r3, #32]
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1624              		.loc 1 1329 23 discriminator 2
 1625 0046 FB68     		ldr	r3, [r7, #12]
 1626 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1627 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1628              		.loc 1 1330 24 discriminator 2
 1629 004c FB68     		ldr	r3, [r7, #12]
 1630 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1631 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1632              		.loc 1 1332 22 discriminator 2
 1633 0052 FB68     		ldr	r3, [r7, #12]
 1634 0054 0022     		movs	r2, #0
 1635 0056 1A64     		str	r2, [r3, #64]
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1636              		.loc 1 1333 19 discriminator 2
 1637 0058 FB68     		ldr	r3, [r7, #12]
 1638 005a 2122     		movs	r2, #33
 1639 005c 83F83D20 		strb	r2, [r3, #61]
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
ARM GAS  /tmp/cceCIUcs.s 			page 53


 1640              		.loc 1 1336 5 discriminator 2
 1641 0060 FB68     		ldr	r3, [r7, #12]
 1642 0062 0022     		movs	r2, #0
 1643 0064 83F83C20 		strb	r2, [r3, #60]
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1644              		.loc 1 1339 5 discriminator 2
 1645 0068 FB68     		ldr	r3, [r7, #12]
 1646 006a 1B68     		ldr	r3, [r3]
 1647 006c DA68     		ldr	r2, [r3, #12]
 1648 006e FB68     		ldr	r3, [r7, #12]
 1649 0070 1B68     		ldr	r3, [r3]
 1650 0072 42F08002 		orr	r2, r2, #128
 1651 0076 DA60     		str	r2, [r3, #12]
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1652              		.loc 1 1341 12 discriminator 2
 1653 0078 0023     		movs	r3, #0
 1654 007a 00E0     		b	.L84
 1655              	.L81:
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1656              		.loc 1 1345 12
 1657 007c 0223     		movs	r3, #2
 1658              	.L84:
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1659              		.loc 1 1347 1
 1660 007e 1846     		mov	r0, r3
 1661 0080 1437     		adds	r7, r7, #20
 1662              	.LCFI50:
 1663              		.cfi_def_cfa_offset 4
 1664 0082 BD46     		mov	sp, r7
 1665              	.LCFI51:
 1666              		.cfi_def_cfa_register 13
 1667              		@ sp needed
 1668 0084 5DF8047B 		ldr	r7, [sp], #4
 1669              	.LCFI52:
 1670              		.cfi_restore 7
 1671              		.cfi_def_cfa_offset 0
 1672 0088 7047     		bx	lr
 1673              		.cfi_endproc
 1674              	.LFE139:
 1676              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1677              		.align	1
 1678              		.global	HAL_UART_Receive_IT
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu fpv4-sp-d16
 1684              	HAL_UART_Receive_IT:
 1685              	.LFB140:
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
ARM GAS  /tmp/cceCIUcs.s 			page 54


1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of u16 available through pData.
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1686              		.loc 1 1361 1
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 16
 1689              		@ frame_needed = 1, uses_anonymous_args = 0
 1690 0000 80B5     		push	{r7, lr}
 1691              	.LCFI53:
 1692              		.cfi_def_cfa_offset 8
 1693              		.cfi_offset 7, -8
 1694              		.cfi_offset 14, -4
 1695 0002 84B0     		sub	sp, sp, #16
 1696              	.LCFI54:
 1697              		.cfi_def_cfa_offset 24
 1698 0004 00AF     		add	r7, sp, #0
 1699              	.LCFI55:
 1700              		.cfi_def_cfa_register 7
 1701 0006 F860     		str	r0, [r7, #12]
 1702 0008 B960     		str	r1, [r7, #8]
 1703 000a 1346     		mov	r3, r2
 1704 000c FB80     		strh	r3, [r7, #6]	@ movhi
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1705              		.loc 1 1363 12
 1706 000e FB68     		ldr	r3, [r7, #12]
 1707 0010 93F83E30 		ldrb	r3, [r3, #62]
 1708 0014 DBB2     		uxtb	r3, r3
 1709              		.loc 1 1363 6
 1710 0016 202B     		cmp	r3, #32
 1711 0018 1DD1     		bne	.L87
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1712              		.loc 1 1365 8
 1713 001a BB68     		ldr	r3, [r7, #8]
 1714 001c 002B     		cmp	r3, #0
 1715 001e 02D0     		beq	.L88
 1716              		.loc 1 1365 25 discriminator 1
 1717 0020 FB88     		ldrh	r3, [r7, #6]
 1718 0022 002B     		cmp	r3, #0
 1719 0024 01D1     		bne	.L89
 1720              	.L88:
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1721              		.loc 1 1367 14
 1722 0026 0123     		movs	r3, #1
 1723 0028 16E0     		b	.L90
 1724              	.L89:
ARM GAS  /tmp/cceCIUcs.s 			page 55


1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1725              		.loc 1 1371 5
 1726 002a FB68     		ldr	r3, [r7, #12]
 1727 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1728 0030 012B     		cmp	r3, #1
 1729 0032 01D1     		bne	.L91
 1730              		.loc 1 1371 5 is_stmt 0 discriminator 1
 1731 0034 0223     		movs	r3, #2
 1732 0036 0FE0     		b	.L90
 1733              	.L91:
 1734              		.loc 1 1371 5 discriminator 2
 1735 0038 FB68     		ldr	r3, [r7, #12]
 1736 003a 0122     		movs	r2, #1
 1737 003c 83F83C20 		strb	r2, [r3, #60]
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1738              		.loc 1 1374 26 is_stmt 1 discriminator 2
 1739 0040 FB68     		ldr	r3, [r7, #12]
 1740 0042 0022     		movs	r2, #0
 1741 0044 1A63     		str	r2, [r3, #48]
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return (UART_Start_Receive_IT(huart, pData, Size));
 1742              		.loc 1 1376 13 discriminator 2
 1743 0046 FB88     		ldrh	r3, [r7, #6]
 1744 0048 1A46     		mov	r2, r3
 1745 004a B968     		ldr	r1, [r7, #8]
 1746 004c F868     		ldr	r0, [r7, #12]
 1747 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 1748 0052 0346     		mov	r3, r0
 1749 0054 00E0     		b	.L90
 1750              	.L87:
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1751              		.loc 1 1380 12
 1752 0056 0223     		movs	r3, #2
 1753              	.L90:
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1754              		.loc 1 1382 1
 1755 0058 1846     		mov	r0, r3
 1756 005a 1037     		adds	r7, r7, #16
 1757              	.LCFI56:
 1758              		.cfi_def_cfa_offset 8
 1759 005c BD46     		mov	sp, r7
 1760              	.LCFI57:
 1761              		.cfi_def_cfa_register 13
 1762              		@ sp needed
 1763 005e 80BD     		pop	{r7, pc}
 1764              		.cfi_endproc
 1765              	.LFE140:
 1767              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
ARM GAS  /tmp/cceCIUcs.s 			page 56


 1768              		.align	1
 1769              		.global	HAL_UART_Transmit_DMA
 1770              		.syntax unified
 1771              		.thumb
 1772              		.thumb_func
 1773              		.fpu fpv4-sp-d16
 1775              	HAL_UART_Transmit_DMA:
 1776              	.LFB141:
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of u16 provided through pData.
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t S
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1777              		.loc 1 1396 1
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 48
 1780              		@ frame_needed = 1, uses_anonymous_args = 0
 1781 0000 80B5     		push	{r7, lr}
 1782              	.LCFI58:
 1783              		.cfi_def_cfa_offset 8
 1784              		.cfi_offset 7, -8
 1785              		.cfi_offset 14, -4
 1786 0002 8CB0     		sub	sp, sp, #48
 1787              	.LCFI59:
 1788              		.cfi_def_cfa_offset 56
 1789 0004 00AF     		add	r7, sp, #0
 1790              	.LCFI60:
 1791              		.cfi_def_cfa_register 7
 1792 0006 F860     		str	r0, [r7, #12]
 1793 0008 B960     		str	r1, [r7, #8]
 1794 000a 1346     		mov	r3, r2
 1795 000c FB80     		strh	r3, [r7, #6]	@ movhi
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   const uint32_t *tmp;
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1796              		.loc 1 1400 12
 1797 000e FB68     		ldr	r3, [r7, #12]
 1798 0010 93F83D30 		ldrb	r3, [r3, #61]
 1799 0014 DBB2     		uxtb	r3, r3
 1800              		.loc 1 1400 6
 1801 0016 202B     		cmp	r3, #32
 1802 0018 65D1     		bne	.L93
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1803              		.loc 1 1402 16
 1804 001a BB68     		ldr	r3, [r7, #8]
 1805              		.loc 1 1402 8
ARM GAS  /tmp/cceCIUcs.s 			page 57


 1806 001c 002B     		cmp	r3, #0
 1807 001e 02D0     		beq	.L94
 1808              		.loc 1 1402 25 discriminator 1
 1809 0020 FB88     		ldrh	r3, [r7, #6]
 1810 0022 002B     		cmp	r3, #0
 1811 0024 01D1     		bne	.L95
 1812              	.L94:
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1813              		.loc 1 1404 14
 1814 0026 0123     		movs	r3, #1
 1815 0028 5EE0     		b	.L96
 1816              	.L95:
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1817              		.loc 1 1408 5
 1818 002a FB68     		ldr	r3, [r7, #12]
 1819 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1820 0030 012B     		cmp	r3, #1
 1821 0032 01D1     		bne	.L97
 1822              		.loc 1 1408 5 is_stmt 0 discriminator 1
 1823 0034 0223     		movs	r3, #2
 1824 0036 57E0     		b	.L96
 1825              	.L97:
 1826              		.loc 1 1408 5 discriminator 2
 1827 0038 FB68     		ldr	r3, [r7, #12]
 1828 003a 0122     		movs	r2, #1
 1829 003c 83F83C20 		strb	r2, [r3, #60]
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1830              		.loc 1 1410 23 is_stmt 1 discriminator 2
 1831 0040 BA68     		ldr	r2, [r7, #8]
 1832 0042 FB68     		ldr	r3, [r7, #12]
 1833 0044 1A62     		str	r2, [r3, #32]
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1834              		.loc 1 1411 23 discriminator 2
 1835 0046 FB68     		ldr	r3, [r7, #12]
 1836 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1837 004a 9A84     		strh	r2, [r3, #36]	@ movhi
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1838              		.loc 1 1412 24 discriminator 2
 1839 004c FB68     		ldr	r3, [r7, #12]
 1840 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1841 0050 DA84     		strh	r2, [r3, #38]	@ movhi
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1842              		.loc 1 1414 22 discriminator 2
 1843 0052 FB68     		ldr	r3, [r7, #12]
 1844 0054 0022     		movs	r2, #0
 1845 0056 1A64     		str	r2, [r3, #64]
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1846              		.loc 1 1415 19 discriminator 2
 1847 0058 FB68     		ldr	r3, [r7, #12]
 1848 005a 2122     		movs	r2, #33
 1849 005c 83F83D20 		strb	r2, [r3, #61]
ARM GAS  /tmp/cceCIUcs.s 			page 58


1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1850              		.loc 1 1418 10 discriminator 2
 1851 0060 FB68     		ldr	r3, [r7, #12]
 1852 0062 5B6B     		ldr	r3, [r3, #52]
 1853              		.loc 1 1418 37 discriminator 2
 1854 0064 224A     		ldr	r2, .L101
 1855 0066 DA63     		str	r2, [r3, #60]
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1856              		.loc 1 1421 10 discriminator 2
 1857 0068 FB68     		ldr	r3, [r7, #12]
 1858 006a 5B6B     		ldr	r3, [r3, #52]
 1859              		.loc 1 1421 41 discriminator 2
 1860 006c 214A     		ldr	r2, .L101+4
 1861 006e 1A64     		str	r2, [r3, #64]
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA error callback */
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1862              		.loc 1 1424 10 discriminator 2
 1863 0070 FB68     		ldr	r3, [r7, #12]
 1864 0072 5B6B     		ldr	r3, [r3, #52]
 1865              		.loc 1 1424 38 discriminator 2
 1866 0074 204A     		ldr	r2, .L101+8
 1867 0076 DA64     		str	r2, [r3, #76]
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA abort callback */
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1868              		.loc 1 1427 10 discriminator 2
 1869 0078 FB68     		ldr	r3, [r7, #12]
 1870 007a 5B6B     		ldr	r3, [r3, #52]
 1871              		.loc 1 1427 38 discriminator 2
 1872 007c 0022     		movs	r2, #0
 1873 007e 1A65     		str	r2, [r3, #80]
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART transmit DMA stream */
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tmp = (const uint32_t *)&pData;
 1874              		.loc 1 1430 9 discriminator 2
 1875 0080 07F10803 		add	r3, r7, #8
 1876 0084 FB62     		str	r3, [r7, #44]
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 1877              		.loc 1 1431 5 discriminator 2
 1878 0086 FB68     		ldr	r3, [r7, #12]
 1879 0088 586B     		ldr	r0, [r3, #52]
 1880 008a FB6A     		ldr	r3, [r7, #44]
 1881 008c 1968     		ldr	r1, [r3]
 1882              		.loc 1 1431 77 discriminator 2
 1883 008e FB68     		ldr	r3, [r7, #12]
 1884 0090 1B68     		ldr	r3, [r3]
 1885              		.loc 1 1431 71 discriminator 2
 1886 0092 0433     		adds	r3, r3, #4
 1887              		.loc 1 1431 5 discriminator 2
 1888 0094 1A46     		mov	r2, r3
 1889 0096 FB88     		ldrh	r3, [r7, #6]
 1890 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
ARM GAS  /tmp/cceCIUcs.s 			page 59


1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1891              		.loc 1 1434 5 discriminator 2
 1892 009c FB68     		ldr	r3, [r7, #12]
 1893 009e 1B68     		ldr	r3, [r3]
 1894 00a0 6FF04002 		mvn	r2, #64
 1895 00a4 1A60     		str	r2, [r3]
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1896              		.loc 1 1437 5 discriminator 2
 1897 00a6 FB68     		ldr	r3, [r7, #12]
 1898 00a8 0022     		movs	r2, #0
 1899 00aa 83F83C20 		strb	r2, [r3, #60]
 1900              	.L100:
 1901              	.LBB320:
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1902              		.loc 1 1441 5 discriminator 1
 1903 00ae FB68     		ldr	r3, [r7, #12]
 1904 00b0 1B68     		ldr	r3, [r3]
 1905 00b2 1433     		adds	r3, r3, #20
 1906 00b4 BB61     		str	r3, [r7, #24]
 1907              	.LBB321:
 1908              	.LBB322:
 1909              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/cceCIUcs.s 			page 60


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cceCIUcs.s 			page 61


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /tmp/cceCIUcs.s 			page 62


 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cceCIUcs.s 			page 63


 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cceCIUcs.s 			page 64


 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
ARM GAS  /tmp/cceCIUcs.s 			page 65


 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
ARM GAS  /tmp/cceCIUcs.s 			page 66


 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cceCIUcs.s 			page 67


 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cceCIUcs.s 			page 68


 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cceCIUcs.s 			page 69


 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cceCIUcs.s 			page 70


 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
ARM GAS  /tmp/cceCIUcs.s 			page 71


 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cceCIUcs.s 			page 72


 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
ARM GAS  /tmp/cceCIUcs.s 			page 73


 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cceCIUcs.s 			page 74


 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cceCIUcs.s 			page 75


 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cceCIUcs.s 			page 76


 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
ARM GAS  /tmp/cceCIUcs.s 			page 77


 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1004:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1007:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1010:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CLZ             (uint8_t)__builtin_clz
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1018:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1021:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1022:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1024:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1025:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1027:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1028:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1029:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1031:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1032:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1035:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1037:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1038:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1041:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1042:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1046:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1047:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1048:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1051:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
ARM GAS  /tmp/cceCIUcs.s 			page 78


1055:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1056:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1057:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1058:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1059:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1060:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1061:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1062:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1067:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1070:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 1910              		.loc 2 1072 4 discriminator 1
 1911 00b6 BB69     		ldr	r3, [r7, #24]
 1912              		.syntax unified
 1913              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1914 00b8 53E8003F 		ldrex r3, [r3]
 1915              	@ 0 "" 2
 1916              		.thumb
 1917              		.syntax unified
 1918 00bc 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1919              		.loc 2 1073 10 discriminator 1
 1920 00be 7B69     		ldr	r3, [r7, #20]
 1921              	.LBE322:
 1922              	.LBE321:
 1923              		.loc 1 1441 5 discriminator 1
 1924 00c0 43F08003 		orr	r3, r3, #128
 1925 00c4 BB62     		str	r3, [r7, #40]
 1926 00c6 FB68     		ldr	r3, [r7, #12]
 1927 00c8 1B68     		ldr	r3, [r3]
 1928 00ca 1433     		adds	r3, r3, #20
 1929 00cc BA6A     		ldr	r2, [r7, #40]
 1930 00ce 7A62     		str	r2, [r7, #36]
 1931 00d0 3B62     		str	r3, [r7, #32]
 1932              	.LBB323:
 1933              	.LBB324:
1074:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1075:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1076:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1077:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1078:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1079:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1085:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1086:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
ARM GAS  /tmp/cceCIUcs.s 			page 79


1088:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1091:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1092:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1093:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1095:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1096:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1097:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1101:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1102:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1103:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1105:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1107:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1109:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1113:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1119:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1121:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 1934              		.loc 2 1123 4 discriminator 1
 1935 00d2 396A     		ldr	r1, [r7, #32]
 1936 00d4 7A6A     		ldr	r2, [r7, #36]
 1937              		.syntax unified
 1938              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1939 00d6 41E80023 		strex r3, r2, [r1]
 1940              	@ 0 "" 2
 1941              		.thumb
 1942              		.syntax unified
 1943 00da FB61     		str	r3, [r7, #28]
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1944              		.loc 2 1124 10 discriminator 1
 1945 00dc FB69     		ldr	r3, [r7, #28]
 1946              	.LBE324:
 1947              	.LBE323:
 1948              		.loc 1 1441 5 discriminator 1
 1949 00de 002B     		cmp	r3, #0
 1950 00e0 E5D1     		bne	.L100
 1951              	.LBE320:
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
ARM GAS  /tmp/cceCIUcs.s 			page 80


 1952              		.loc 1 1443 12
 1953 00e2 0023     		movs	r3, #0
 1954 00e4 00E0     		b	.L96
 1955              	.L93:
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1956              		.loc 1 1447 12
 1957 00e6 0223     		movs	r3, #2
 1958              	.L96:
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1959              		.loc 1 1449 1
 1960 00e8 1846     		mov	r0, r3
 1961 00ea 3037     		adds	r7, r7, #48
 1962              	.LCFI61:
 1963              		.cfi_def_cfa_offset 8
 1964 00ec BD46     		mov	sp, r7
 1965              	.LCFI62:
 1966              		.cfi_def_cfa_register 13
 1967              		@ sp needed
 1968 00ee 80BD     		pop	{r7, pc}
 1969              	.L102:
 1970              		.align	2
 1971              	.L101:
 1972 00f0 00000000 		.word	UART_DMATransmitCplt
 1973 00f4 00000000 		.word	UART_DMATxHalfCplt
 1974 00f8 00000000 		.word	UART_DMAError
 1975              		.cfi_endproc
 1976              	.LFE141:
 1978              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1979              		.align	1
 1980              		.global	HAL_UART_Receive_DMA
 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1984              		.fpu fpv4-sp-d16
 1986              	HAL_UART_Receive_DMA:
 1987              	.LFB142:
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of u16 available through pData.
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1988              		.loc 1 1464 1
 1989              		.cfi_startproc
ARM GAS  /tmp/cceCIUcs.s 			page 81


 1990              		@ args = 0, pretend = 0, frame = 16
 1991              		@ frame_needed = 1, uses_anonymous_args = 0
 1992 0000 80B5     		push	{r7, lr}
 1993              	.LCFI63:
 1994              		.cfi_def_cfa_offset 8
 1995              		.cfi_offset 7, -8
 1996              		.cfi_offset 14, -4
 1997 0002 84B0     		sub	sp, sp, #16
 1998              	.LCFI64:
 1999              		.cfi_def_cfa_offset 24
 2000 0004 00AF     		add	r7, sp, #0
 2001              	.LCFI65:
 2002              		.cfi_def_cfa_register 7
 2003 0006 F860     		str	r0, [r7, #12]
 2004 0008 B960     		str	r1, [r7, #8]
 2005 000a 1346     		mov	r3, r2
 2006 000c FB80     		strh	r3, [r7, #6]	@ movhi
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2007              		.loc 1 1466 12
 2008 000e FB68     		ldr	r3, [r7, #12]
 2009 0010 93F83E30 		ldrb	r3, [r3, #62]
 2010 0014 DBB2     		uxtb	r3, r3
 2011              		.loc 1 1466 6
 2012 0016 202B     		cmp	r3, #32
 2013 0018 1DD1     		bne	.L104
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2014              		.loc 1 1468 8
 2015 001a BB68     		ldr	r3, [r7, #8]
 2016 001c 002B     		cmp	r3, #0
 2017 001e 02D0     		beq	.L105
 2018              		.loc 1 1468 25 discriminator 1
 2019 0020 FB88     		ldrh	r3, [r7, #6]
 2020 0022 002B     		cmp	r3, #0
 2021 0024 01D1     		bne	.L106
 2022              	.L105:
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 2023              		.loc 1 1470 14
 2024 0026 0123     		movs	r3, #1
 2025 0028 16E0     		b	.L107
 2026              	.L106:
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 2027              		.loc 1 1474 5
 2028 002a FB68     		ldr	r3, [r7, #12]
 2029 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2030 0030 012B     		cmp	r3, #1
 2031 0032 01D1     		bne	.L108
 2032              		.loc 1 1474 5 is_stmt 0 discriminator 1
 2033 0034 0223     		movs	r3, #2
 2034 0036 0FE0     		b	.L107
 2035              	.L108:
 2036              		.loc 1 1474 5 discriminator 2
ARM GAS  /tmp/cceCIUcs.s 			page 82


 2037 0038 FB68     		ldr	r3, [r7, #12]
 2038 003a 0122     		movs	r2, #1
 2039 003c 83F83C20 		strb	r2, [r3, #60]
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2040              		.loc 1 1477 26 is_stmt 1 discriminator 2
 2041 0040 FB68     		ldr	r3, [r7, #12]
 2042 0042 0022     		movs	r2, #0
 2043 0044 1A63     		str	r2, [r3, #48]
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return (UART_Start_Receive_DMA(huart, pData, Size));
 2044              		.loc 1 1479 13 discriminator 2
 2045 0046 FB88     		ldrh	r3, [r7, #6]
 2046 0048 1A46     		mov	r2, r3
 2047 004a B968     		ldr	r1, [r7, #8]
 2048 004c F868     		ldr	r0, [r7, #12]
 2049 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 2050 0052 0346     		mov	r3, r0
 2051 0054 00E0     		b	.L107
 2052              	.L104:
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 2053              		.loc 1 1483 12
 2054 0056 0223     		movs	r3, #2
 2055              	.L107:
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2056              		.loc 1 1485 1
 2057 0058 1846     		mov	r0, r3
 2058 005a 1037     		adds	r7, r7, #16
 2059              	.LCFI66:
 2060              		.cfi_def_cfa_offset 8
 2061 005c BD46     		mov	sp, r7
 2062              	.LCFI67:
 2063              		.cfi_def_cfa_register 13
 2064              		@ sp needed
 2065 005e 80BD     		pop	{r7, pc}
 2066              		.cfi_endproc
 2067              	.LFE142:
 2069              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 2070              		.align	1
 2071              		.global	HAL_UART_DMAPause
 2072              		.syntax unified
 2073              		.thumb
 2074              		.thumb_func
 2075              		.fpu fpv4-sp-d16
 2077              	HAL_UART_DMAPause:
 2078              	.LFB143:
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/cceCIUcs.s 			page 83


1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2079              		.loc 1 1494 1
 2080              		.cfi_startproc
 2081              		@ args = 0, pretend = 0, frame = 112
 2082              		@ frame_needed = 1, uses_anonymous_args = 0
 2083              		@ link register save eliminated.
 2084 0000 80B4     		push	{r7}
 2085              	.LCFI68:
 2086              		.cfi_def_cfa_offset 4
 2087              		.cfi_offset 7, -4
 2088 0002 9DB0     		sub	sp, sp, #116
 2089              	.LCFI69:
 2090              		.cfi_def_cfa_offset 120
 2091 0004 00AF     		add	r7, sp, #0
 2092              	.LCFI70:
 2093              		.cfi_def_cfa_register 7
 2094 0006 7860     		str	r0, [r7, #4]
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2095              		.loc 1 1495 12
 2096 0008 0023     		movs	r3, #0
 2097 000a FB66     		str	r3, [r7, #108]
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 2098              		.loc 1 1498 3
 2099 000c 7B68     		ldr	r3, [r7, #4]
 2100 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2101 0012 012B     		cmp	r3, #1
 2102 0014 01D1     		bne	.L110
 2103              		.loc 1 1498 3 is_stmt 0 discriminator 1
 2104 0016 0223     		movs	r3, #2
 2105 0018 98E0     		b	.L111
 2106              	.L110:
 2107              		.loc 1 1498 3 discriminator 2
 2108 001a 7B68     		ldr	r3, [r7, #4]
 2109 001c 0122     		movs	r2, #1
 2110 001e 83F83C20 		strb	r2, [r3, #60]
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2111              		.loc 1 1500 16 is_stmt 1 discriminator 2
 2112 0022 7B68     		ldr	r3, [r7, #4]
 2113 0024 1B68     		ldr	r3, [r3]
 2114 0026 5B69     		ldr	r3, [r3, #20]
 2115 0028 03F08003 		and	r3, r3, #128
 2116 002c 802B     		cmp	r3, #128
 2117 002e 0CBF     		ite	eq
 2118 0030 0123     		moveq	r3, #1
 2119 0032 0023     		movne	r3, #0
 2120 0034 DBB2     		uxtb	r3, r3
 2121              		.loc 1 1500 14 discriminator 2
 2122 0036 FB66     		str	r3, [r7, #108]
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2123              		.loc 1 1501 13 discriminator 2
 2124 0038 7B68     		ldr	r3, [r7, #4]
 2125 003a 93F83D30 		ldrb	r3, [r3, #61]
ARM GAS  /tmp/cceCIUcs.s 			page 84


 2126 003e DBB2     		uxtb	r3, r3
 2127              		.loc 1 1501 6 discriminator 2
 2128 0040 212B     		cmp	r3, #33
 2129 0042 1CD1     		bne	.L112
 2130              		.loc 1 1501 49 discriminator 1
 2131 0044 FB6E     		ldr	r3, [r7, #108]
 2132 0046 002B     		cmp	r3, #0
 2133 0048 19D0     		beq	.L112
 2134              	.L115:
 2135              	.LBB325:
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2136              		.loc 1 1504 5 discriminator 1
 2137 004a 7B68     		ldr	r3, [r7, #4]
 2138 004c 1B68     		ldr	r3, [r3]
 2139 004e 1433     		adds	r3, r3, #20
 2140 0050 FB64     		str	r3, [r7, #76]
 2141              	.LBB326:
 2142              	.LBB327:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2143              		.loc 2 1072 4 discriminator 1
 2144 0052 FB6C     		ldr	r3, [r7, #76]
 2145              		.syntax unified
 2146              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2147 0054 53E8003F 		ldrex r3, [r3]
 2148              	@ 0 "" 2
 2149              		.thumb
 2150              		.syntax unified
 2151 0058 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2152              		.loc 2 1073 10 discriminator 1
 2153 005a BB6C     		ldr	r3, [r7, #72]
 2154              	.LBE327:
 2155              	.LBE326:
 2156              		.loc 1 1504 5 discriminator 1
 2157 005c 23F08003 		bic	r3, r3, #128
 2158 0060 BB66     		str	r3, [r7, #104]
 2159 0062 7B68     		ldr	r3, [r7, #4]
 2160 0064 1B68     		ldr	r3, [r3]
 2161 0066 1433     		adds	r3, r3, #20
 2162 0068 BA6E     		ldr	r2, [r7, #104]
 2163 006a BA65     		str	r2, [r7, #88]
 2164 006c 7B65     		str	r3, [r7, #84]
 2165              	.LBB328:
 2166              	.LBB329:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2167              		.loc 2 1123 4 discriminator 1
 2168 006e 796D     		ldr	r1, [r7, #84]
 2169 0070 BA6D     		ldr	r2, [r7, #88]
 2170              		.syntax unified
 2171              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2172 0072 41E80023 		strex r3, r2, [r1]
 2173              	@ 0 "" 2
 2174              		.thumb
 2175              		.syntax unified
 2176 0076 3B65     		str	r3, [r7, #80]
ARM GAS  /tmp/cceCIUcs.s 			page 85


 2177              		.loc 2 1124 10 discriminator 1
 2178 0078 3B6D     		ldr	r3, [r7, #80]
 2179              	.LBE329:
 2180              	.LBE328:
 2181              		.loc 1 1504 5 discriminator 1
 2182 007a 002B     		cmp	r3, #0
 2183 007c E5D1     		bne	.L115
 2184              	.L112:
 2185              	.LBE325:
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2186              		.loc 1 1507 16
 2187 007e 7B68     		ldr	r3, [r7, #4]
 2188 0080 1B68     		ldr	r3, [r3]
 2189 0082 5B69     		ldr	r3, [r3, #20]
 2190 0084 03F04003 		and	r3, r3, #64
 2191 0088 402B     		cmp	r3, #64
 2192 008a 0CBF     		ite	eq
 2193 008c 0123     		moveq	r3, #1
 2194 008e 0023     		movne	r3, #0
 2195 0090 DBB2     		uxtb	r3, r3
 2196              		.loc 1 1507 14
 2197 0092 FB66     		str	r3, [r7, #108]
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2198              		.loc 1 1508 13
 2199 0094 7B68     		ldr	r3, [r7, #4]
 2200 0096 93F83E30 		ldrb	r3, [r3, #62]
 2201 009a DBB2     		uxtb	r3, r3
 2202              		.loc 1 1508 6
 2203 009c 222B     		cmp	r3, #34
 2204 009e 50D1     		bne	.L116
 2205              		.loc 1 1508 50 discriminator 1
 2206 00a0 FB6E     		ldr	r3, [r7, #108]
 2207 00a2 002B     		cmp	r3, #0
 2208 00a4 4DD0     		beq	.L116
 2209              	.L119:
 2210              	.LBB330:
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2211              		.loc 1 1511 5 discriminator 1
 2212 00a6 7B68     		ldr	r3, [r7, #4]
 2213 00a8 1B68     		ldr	r3, [r3]
 2214 00aa 0C33     		adds	r3, r3, #12
 2215 00ac BB63     		str	r3, [r7, #56]
 2216              	.LBB331:
 2217              	.LBB332:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2218              		.loc 2 1072 4 discriminator 1
 2219 00ae BB6B     		ldr	r3, [r7, #56]
 2220              		.syntax unified
 2221              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2222 00b0 53E8003F 		ldrex r3, [r3]
 2223              	@ 0 "" 2
 2224              		.thumb
 2225              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 86


 2226 00b4 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2227              		.loc 2 1073 10 discriminator 1
 2228 00b6 7B6B     		ldr	r3, [r7, #52]
 2229              	.LBE332:
 2230              	.LBE331:
 2231              		.loc 1 1511 5 discriminator 1
 2232 00b8 23F48073 		bic	r3, r3, #256
 2233 00bc 7B66     		str	r3, [r7, #100]
 2234 00be 7B68     		ldr	r3, [r7, #4]
 2235 00c0 1B68     		ldr	r3, [r3]
 2236 00c2 0C33     		adds	r3, r3, #12
 2237 00c4 7A6E     		ldr	r2, [r7, #100]
 2238 00c6 7A64     		str	r2, [r7, #68]
 2239 00c8 3B64     		str	r3, [r7, #64]
 2240              	.LBB333:
 2241              	.LBB334:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2242              		.loc 2 1123 4 discriminator 1
 2243 00ca 396C     		ldr	r1, [r7, #64]
 2244 00cc 7A6C     		ldr	r2, [r7, #68]
 2245              		.syntax unified
 2246              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2247 00ce 41E80023 		strex r3, r2, [r1]
 2248              	@ 0 "" 2
 2249              		.thumb
 2250              		.syntax unified
 2251 00d2 FB63     		str	r3, [r7, #60]
 2252              		.loc 2 1124 10 discriminator 1
 2253 00d4 FB6B     		ldr	r3, [r7, #60]
 2254              	.LBE334:
 2255              	.LBE333:
 2256              		.loc 1 1511 5 discriminator 1
 2257 00d6 002B     		cmp	r3, #0
 2258 00d8 E5D1     		bne	.L119
 2259              	.L122:
 2260              	.LBE330:
 2261              	.LBB335:
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2262              		.loc 1 1512 5 discriminator 1
 2263 00da 7B68     		ldr	r3, [r7, #4]
 2264 00dc 1B68     		ldr	r3, [r3]
 2265 00de 1433     		adds	r3, r3, #20
 2266 00e0 7B62     		str	r3, [r7, #36]
 2267              	.LBB336:
 2268              	.LBB337:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2269              		.loc 2 1072 4 discriminator 1
 2270 00e2 7B6A     		ldr	r3, [r7, #36]
 2271              		.syntax unified
 2272              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2273 00e4 53E8003F 		ldrex r3, [r3]
 2274              	@ 0 "" 2
 2275              		.thumb
 2276              		.syntax unified
 2277 00e8 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cceCIUcs.s 			page 87


 2278              		.loc 2 1073 10 discriminator 1
 2279 00ea 3B6A     		ldr	r3, [r7, #32]
 2280              	.LBE337:
 2281              	.LBE336:
 2282              		.loc 1 1512 5 discriminator 1
 2283 00ec 23F00103 		bic	r3, r3, #1
 2284 00f0 3B66     		str	r3, [r7, #96]
 2285 00f2 7B68     		ldr	r3, [r7, #4]
 2286 00f4 1B68     		ldr	r3, [r3]
 2287 00f6 1433     		adds	r3, r3, #20
 2288 00f8 3A6E     		ldr	r2, [r7, #96]
 2289 00fa 3A63     		str	r2, [r7, #48]
 2290 00fc FB62     		str	r3, [r7, #44]
 2291              	.LBB338:
 2292              	.LBB339:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2293              		.loc 2 1123 4 discriminator 1
 2294 00fe F96A     		ldr	r1, [r7, #44]
 2295 0100 3A6B     		ldr	r2, [r7, #48]
 2296              		.syntax unified
 2297              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2298 0102 41E80023 		strex r3, r2, [r1]
 2299              	@ 0 "" 2
 2300              		.thumb
 2301              		.syntax unified
 2302 0106 BB62     		str	r3, [r7, #40]
 2303              		.loc 2 1124 10 discriminator 1
 2304 0108 BB6A     		ldr	r3, [r7, #40]
 2305              	.LBE339:
 2306              	.LBE338:
 2307              		.loc 1 1512 5 discriminator 1
 2308 010a 002B     		cmp	r3, #0
 2309 010c E5D1     		bne	.L122
 2310              	.L125:
 2311              	.LBE335:
 2312              	.LBB340:
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2313              		.loc 1 1515 5 discriminator 1
 2314 010e 7B68     		ldr	r3, [r7, #4]
 2315 0110 1B68     		ldr	r3, [r3]
 2316 0112 1433     		adds	r3, r3, #20
 2317 0114 3B61     		str	r3, [r7, #16]
 2318              	.LBB341:
 2319              	.LBB342:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2320              		.loc 2 1072 4 discriminator 1
 2321 0116 3B69     		ldr	r3, [r7, #16]
 2322              		.syntax unified
 2323              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2324 0118 53E8003F 		ldrex r3, [r3]
 2325              	@ 0 "" 2
 2326              		.thumb
 2327              		.syntax unified
 2328 011c FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cceCIUcs.s 			page 88


 2329              		.loc 2 1073 10 discriminator 1
 2330 011e FB68     		ldr	r3, [r7, #12]
 2331              	.LBE342:
 2332              	.LBE341:
 2333              		.loc 1 1515 5 discriminator 1
 2334 0120 23F04003 		bic	r3, r3, #64
 2335 0124 FB65     		str	r3, [r7, #92]
 2336 0126 7B68     		ldr	r3, [r7, #4]
 2337 0128 1B68     		ldr	r3, [r3]
 2338 012a 1433     		adds	r3, r3, #20
 2339 012c FA6D     		ldr	r2, [r7, #92]
 2340 012e FA61     		str	r2, [r7, #28]
 2341 0130 BB61     		str	r3, [r7, #24]
 2342              	.LBB343:
 2343              	.LBB344:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2344              		.loc 2 1123 4 discriminator 1
 2345 0132 B969     		ldr	r1, [r7, #24]
 2346 0134 FA69     		ldr	r2, [r7, #28]
 2347              		.syntax unified
 2348              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2349 0136 41E80023 		strex r3, r2, [r1]
 2350              	@ 0 "" 2
 2351              		.thumb
 2352              		.syntax unified
 2353 013a 7B61     		str	r3, [r7, #20]
 2354              		.loc 2 1124 10 discriminator 1
 2355 013c 7B69     		ldr	r3, [r7, #20]
 2356              	.LBE344:
 2357              	.LBE343:
 2358              		.loc 1 1515 5 discriminator 1
 2359 013e 002B     		cmp	r3, #0
 2360 0140 E5D1     		bne	.L125
 2361              	.L116:
 2362              	.LBE340:
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2363              		.loc 1 1519 3
 2364 0142 7B68     		ldr	r3, [r7, #4]
 2365 0144 0022     		movs	r2, #0
 2366 0146 83F83C20 		strb	r2, [r3, #60]
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2367              		.loc 1 1521 10
 2368 014a 0023     		movs	r3, #0
 2369              	.L111:
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2370              		.loc 1 1522 1
 2371 014c 1846     		mov	r0, r3
 2372 014e 7437     		adds	r7, r7, #116
 2373              	.LCFI71:
 2374              		.cfi_def_cfa_offset 4
 2375 0150 BD46     		mov	sp, r7
 2376              	.LCFI72:
 2377              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cceCIUcs.s 			page 89


 2378              		@ sp needed
 2379 0152 5DF8047B 		ldr	r7, [sp], #4
 2380              	.LCFI73:
 2381              		.cfi_restore 7
 2382              		.cfi_def_cfa_offset 0
 2383 0156 7047     		bx	lr
 2384              		.cfi_endproc
 2385              	.LFE143:
 2387              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 2388              		.align	1
 2389              		.global	HAL_UART_DMAResume
 2390              		.syntax unified
 2391              		.thumb
 2392              		.thumb_func
 2393              		.fpu fpv4-sp-d16
 2395              	HAL_UART_DMAResume:
 2396              	.LFB144:
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2397              		.loc 1 1531 1
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 112
 2400              		@ frame_needed = 1, uses_anonymous_args = 0
 2401              		@ link register save eliminated.
 2402 0000 80B4     		push	{r7}
 2403              	.LCFI74:
 2404              		.cfi_def_cfa_offset 4
 2405              		.cfi_offset 7, -4
 2406 0002 9DB0     		sub	sp, sp, #116
 2407              	.LCFI75:
 2408              		.cfi_def_cfa_offset 120
 2409 0004 00AF     		add	r7, sp, #0
 2410              	.LCFI76:
 2411              		.cfi_def_cfa_register 7
 2412 0006 7860     		str	r0, [r7, #4]
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 2413              		.loc 1 1533 3
 2414 0008 7B68     		ldr	r3, [r7, #4]
 2415 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2416 000e 012B     		cmp	r3, #1
 2417 0010 01D1     		bne	.L127
 2418              		.loc 1 1533 3 is_stmt 0 discriminator 1
 2419 0012 0223     		movs	r3, #2
 2420 0014 8BE0     		b	.L128
 2421              	.L127:
 2422              		.loc 1 1533 3 discriminator 2
 2423 0016 7B68     		ldr	r3, [r7, #4]
 2424 0018 0122     		movs	r2, #1
 2425 001a 83F83C20 		strb	r2, [r3, #60]
ARM GAS  /tmp/cceCIUcs.s 			page 90


1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 2426              		.loc 1 1535 12 is_stmt 1 discriminator 2
 2427 001e 7B68     		ldr	r3, [r7, #4]
 2428 0020 93F83D30 		ldrb	r3, [r3, #61]
 2429 0024 DBB2     		uxtb	r3, r3
 2430              		.loc 1 1535 6 discriminator 2
 2431 0026 212B     		cmp	r3, #33
 2432 0028 19D1     		bne	.L129
 2433              	.L132:
 2434              	.LBB345:
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2435              		.loc 1 1538 5 discriminator 1
 2436 002a 7B68     		ldr	r3, [r7, #4]
 2437 002c 1B68     		ldr	r3, [r3]
 2438 002e 1433     		adds	r3, r3, #20
 2439 0030 3B65     		str	r3, [r7, #80]
 2440              	.LBB346:
 2441              	.LBB347:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2442              		.loc 2 1072 4 discriminator 1
 2443 0032 3B6D     		ldr	r3, [r7, #80]
 2444              		.syntax unified
 2445              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2446 0034 53E8003F 		ldrex r3, [r3]
 2447              	@ 0 "" 2
 2448              		.thumb
 2449              		.syntax unified
 2450 0038 FB64     		str	r3, [r7, #76]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2451              		.loc 2 1073 10 discriminator 1
 2452 003a FB6C     		ldr	r3, [r7, #76]
 2453              	.LBE347:
 2454              	.LBE346:
 2455              		.loc 1 1538 5 discriminator 1
 2456 003c 43F08003 		orr	r3, r3, #128
 2457 0040 FB66     		str	r3, [r7, #108]
 2458 0042 7B68     		ldr	r3, [r7, #4]
 2459 0044 1B68     		ldr	r3, [r3]
 2460 0046 1433     		adds	r3, r3, #20
 2461 0048 FA6E     		ldr	r2, [r7, #108]
 2462 004a FA65     		str	r2, [r7, #92]
 2463 004c BB65     		str	r3, [r7, #88]
 2464              	.LBB348:
 2465              	.LBB349:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2466              		.loc 2 1123 4 discriminator 1
 2467 004e B96D     		ldr	r1, [r7, #88]
 2468 0050 FA6D     		ldr	r2, [r7, #92]
 2469              		.syntax unified
 2470              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2471 0052 41E80023 		strex r3, r2, [r1]
 2472              	@ 0 "" 2
 2473              		.thumb
 2474              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 91


 2475 0056 7B65     		str	r3, [r7, #84]
 2476              		.loc 2 1124 10 discriminator 1
 2477 0058 7B6D     		ldr	r3, [r7, #84]
 2478              	.LBE349:
 2479              	.LBE348:
 2480              		.loc 1 1538 5 discriminator 1
 2481 005a 002B     		cmp	r3, #0
 2482 005c E5D1     		bne	.L132
 2483              	.L129:
 2484              	.LBE345:
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2485              		.loc 1 1541 12
 2486 005e 7B68     		ldr	r3, [r7, #4]
 2487 0060 93F83E30 		ldrb	r3, [r3, #62]
 2488 0064 DBB2     		uxtb	r3, r3
 2489              		.loc 1 1541 6
 2490 0066 222B     		cmp	r3, #34
 2491 0068 5CD1     		bne	.L133
 2492              	.LBB350:
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 2493              		.loc 1 1544 5
 2494 006a 0023     		movs	r3, #0
 2495 006c FB60     		str	r3, [r7, #12]
 2496 006e 7B68     		ldr	r3, [r7, #4]
 2497 0070 1B68     		ldr	r3, [r3]
 2498 0072 1B68     		ldr	r3, [r3]
 2499 0074 FB60     		str	r3, [r7, #12]
 2500 0076 7B68     		ldr	r3, [r7, #4]
 2501 0078 1B68     		ldr	r3, [r3]
 2502 007a 5B68     		ldr	r3, [r3, #4]
 2503 007c FB60     		str	r3, [r7, #12]
 2504 007e FB68     		ldr	r3, [r7, #12]
 2505              	.LBE350:
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->Init.Parity != UART_PARITY_NONE)
 2506              		.loc 1 1547 20
 2507 0080 7B68     		ldr	r3, [r7, #4]
 2508 0082 1B69     		ldr	r3, [r3, #16]
 2509              		.loc 1 1547 8
 2510 0084 002B     		cmp	r3, #0
 2511 0086 19D0     		beq	.L140
 2512              	.L137:
 2513              	.LBB351:
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2514              		.loc 1 1549 7 discriminator 1
 2515 0088 7B68     		ldr	r3, [r7, #4]
 2516 008a 1B68     		ldr	r3, [r3]
 2517 008c 0C33     		adds	r3, r3, #12
 2518 008e FB63     		str	r3, [r7, #60]
 2519              	.LBB352:
 2520              	.LBB353:
ARM GAS  /tmp/cceCIUcs.s 			page 92


1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2521              		.loc 2 1072 4 discriminator 1
 2522 0090 FB6B     		ldr	r3, [r7, #60]
 2523              		.syntax unified
 2524              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2525 0092 53E8003F 		ldrex r3, [r3]
 2526              	@ 0 "" 2
 2527              		.thumb
 2528              		.syntax unified
 2529 0096 BB63     		str	r3, [r7, #56]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2530              		.loc 2 1073 10 discriminator 1
 2531 0098 BB6B     		ldr	r3, [r7, #56]
 2532              	.LBE353:
 2533              	.LBE352:
 2534              		.loc 1 1549 7 discriminator 1
 2535 009a 43F48073 		orr	r3, r3, #256
 2536 009e BB66     		str	r3, [r7, #104]
 2537 00a0 7B68     		ldr	r3, [r7, #4]
 2538 00a2 1B68     		ldr	r3, [r3]
 2539 00a4 0C33     		adds	r3, r3, #12
 2540 00a6 BA6E     		ldr	r2, [r7, #104]
 2541 00a8 BA64     		str	r2, [r7, #72]
 2542 00aa 7B64     		str	r3, [r7, #68]
 2543              	.LBB354:
 2544              	.LBB355:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2545              		.loc 2 1123 4 discriminator 1
 2546 00ac 796C     		ldr	r1, [r7, #68]
 2547 00ae BA6C     		ldr	r2, [r7, #72]
 2548              		.syntax unified
 2549              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2550 00b0 41E80023 		strex r3, r2, [r1]
 2551              	@ 0 "" 2
 2552              		.thumb
 2553              		.syntax unified
 2554 00b4 3B64     		str	r3, [r7, #64]
 2555              		.loc 2 1124 10 discriminator 1
 2556 00b6 3B6C     		ldr	r3, [r7, #64]
 2557              	.LBE355:
 2558              	.LBE354:
 2559              		.loc 1 1549 7 discriminator 1
 2560 00b8 002B     		cmp	r3, #0
 2561 00ba E5D1     		bne	.L137
 2562              	.L140:
 2563              	.LBE351:
 2564              	.LBB356:
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2565              		.loc 1 1551 5 discriminator 1
 2566 00bc 7B68     		ldr	r3, [r7, #4]
 2567 00be 1B68     		ldr	r3, [r3]
 2568 00c0 1433     		adds	r3, r3, #20
 2569 00c2 BB62     		str	r3, [r7, #40]
 2570              	.LBB357:
 2571              	.LBB358:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cceCIUcs.s 			page 93


 2572              		.loc 2 1072 4 discriminator 1
 2573 00c4 BB6A     		ldr	r3, [r7, #40]
 2574              		.syntax unified
 2575              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2576 00c6 53E8003F 		ldrex r3, [r3]
 2577              	@ 0 "" 2
 2578              		.thumb
 2579              		.syntax unified
 2580 00ca 7B62     		str	r3, [r7, #36]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2581              		.loc 2 1073 10 discriminator 1
 2582 00cc 7B6A     		ldr	r3, [r7, #36]
 2583              	.LBE358:
 2584              	.LBE357:
 2585              		.loc 1 1551 5 discriminator 1
 2586 00ce 43F00103 		orr	r3, r3, #1
 2587 00d2 7B66     		str	r3, [r7, #100]
 2588 00d4 7B68     		ldr	r3, [r7, #4]
 2589 00d6 1B68     		ldr	r3, [r3]
 2590 00d8 1433     		adds	r3, r3, #20
 2591 00da 7A6E     		ldr	r2, [r7, #100]
 2592 00dc 7A63     		str	r2, [r7, #52]
 2593 00de 3B63     		str	r3, [r7, #48]
 2594              	.LBB359:
 2595              	.LBB360:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2596              		.loc 2 1123 4 discriminator 1
 2597 00e0 396B     		ldr	r1, [r7, #48]
 2598 00e2 7A6B     		ldr	r2, [r7, #52]
 2599              		.syntax unified
 2600              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2601 00e4 41E80023 		strex r3, r2, [r1]
 2602              	@ 0 "" 2
 2603              		.thumb
 2604              		.syntax unified
 2605 00e8 FB62     		str	r3, [r7, #44]
 2606              		.loc 2 1124 10 discriminator 1
 2607 00ea FB6A     		ldr	r3, [r7, #44]
 2608              	.LBE360:
 2609              	.LBE359:
 2610              		.loc 1 1551 5 discriminator 1
 2611 00ec 002B     		cmp	r3, #0
 2612 00ee E5D1     		bne	.L140
 2613              	.L143:
 2614              	.LBE356:
 2615              	.LBB361:
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2616              		.loc 1 1554 5 discriminator 1
 2617 00f0 7B68     		ldr	r3, [r7, #4]
 2618 00f2 1B68     		ldr	r3, [r3]
 2619 00f4 1433     		adds	r3, r3, #20
 2620 00f6 7B61     		str	r3, [r7, #20]
 2621              	.LBB362:
 2622              	.LBB363:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cceCIUcs.s 			page 94


 2623              		.loc 2 1072 4 discriminator 1
 2624 00f8 7B69     		ldr	r3, [r7, #20]
 2625              		.syntax unified
 2626              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2627 00fa 53E8003F 		ldrex r3, [r3]
 2628              	@ 0 "" 2
 2629              		.thumb
 2630              		.syntax unified
 2631 00fe 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2632              		.loc 2 1073 10 discriminator 1
 2633 0100 3B69     		ldr	r3, [r7, #16]
 2634              	.LBE363:
 2635              	.LBE362:
 2636              		.loc 1 1554 5 discriminator 1
 2637 0102 43F04003 		orr	r3, r3, #64
 2638 0106 3B66     		str	r3, [r7, #96]
 2639 0108 7B68     		ldr	r3, [r7, #4]
 2640 010a 1B68     		ldr	r3, [r3]
 2641 010c 1433     		adds	r3, r3, #20
 2642 010e 3A6E     		ldr	r2, [r7, #96]
 2643 0110 3A62     		str	r2, [r7, #32]
 2644 0112 FB61     		str	r3, [r7, #28]
 2645              	.LBB364:
 2646              	.LBB365:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2647              		.loc 2 1123 4 discriminator 1
 2648 0114 F969     		ldr	r1, [r7, #28]
 2649 0116 3A6A     		ldr	r2, [r7, #32]
 2650              		.syntax unified
 2651              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2652 0118 41E80023 		strex r3, r2, [r1]
 2653              	@ 0 "" 2
 2654              		.thumb
 2655              		.syntax unified
 2656 011c BB61     		str	r3, [r7, #24]
 2657              		.loc 2 1124 10 discriminator 1
 2658 011e BB69     		ldr	r3, [r7, #24]
 2659              	.LBE365:
 2660              	.LBE364:
 2661              		.loc 1 1554 5 discriminator 1
 2662 0120 002B     		cmp	r3, #0
 2663 0122 E5D1     		bne	.L143
 2664              	.L133:
 2665              	.LBE361:
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2666              		.loc 1 1558 3
 2667 0124 7B68     		ldr	r3, [r7, #4]
 2668 0126 0022     		movs	r2, #0
 2669 0128 83F83C20 		strb	r2, [r3, #60]
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2670              		.loc 1 1560 10
 2671 012c 0023     		movs	r3, #0
ARM GAS  /tmp/cceCIUcs.s 			page 95


 2672              	.L128:
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2673              		.loc 1 1561 1
 2674 012e 1846     		mov	r0, r3
 2675 0130 7437     		adds	r7, r7, #116
 2676              	.LCFI77:
 2677              		.cfi_def_cfa_offset 4
 2678 0132 BD46     		mov	sp, r7
 2679              	.LCFI78:
 2680              		.cfi_def_cfa_register 13
 2681              		@ sp needed
 2682 0134 5DF8047B 		ldr	r7, [sp], #4
 2683              	.LCFI79:
 2684              		.cfi_restore 7
 2685              		.cfi_def_cfa_offset 0
 2686 0138 7047     		bx	lr
 2687              		.cfi_endproc
 2688              	.LFE144:
 2690              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2691              		.align	1
 2692              		.global	HAL_UART_DMAStop
 2693              		.syntax unified
 2694              		.thumb
 2695              		.thumb_func
 2696              		.fpu fpv4-sp-d16
 2698              	HAL_UART_DMAStop:
 2699              	.LFB145:
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2700              		.loc 1 1570 1
 2701              		.cfi_startproc
 2702              		@ args = 0, pretend = 0, frame = 64
 2703              		@ frame_needed = 1, uses_anonymous_args = 0
 2704 0000 80B5     		push	{r7, lr}
 2705              	.LCFI80:
 2706              		.cfi_def_cfa_offset 8
 2707              		.cfi_offset 7, -8
 2708              		.cfi_offset 14, -4
 2709 0002 90B0     		sub	sp, sp, #64
 2710              	.LCFI81:
 2711              		.cfi_def_cfa_offset 72
 2712 0004 00AF     		add	r7, sp, #0
 2713              	.LCFI82:
 2714              		.cfi_def_cfa_register 7
 2715 0006 7860     		str	r0, [r7, #4]
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2716              		.loc 1 1571 12
 2717 0008 0023     		movs	r3, #0
 2718 000a FB63     		str	r3, [r7, #60]
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
ARM GAS  /tmp/cceCIUcs.s 			page 96


1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      */
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2719              		.loc 1 1579 16
 2720 000c 7B68     		ldr	r3, [r7, #4]
 2721 000e 1B68     		ldr	r3, [r3]
 2722 0010 5B69     		ldr	r3, [r3, #20]
 2723 0012 03F08003 		and	r3, r3, #128
 2724 0016 802B     		cmp	r3, #128
 2725 0018 0CBF     		ite	eq
 2726 001a 0123     		moveq	r3, #1
 2727 001c 0023     		movne	r3, #0
 2728 001e DBB2     		uxtb	r3, r3
 2729              		.loc 1 1579 14
 2730 0020 FB63     		str	r3, [r7, #60]
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2731              		.loc 1 1580 13
 2732 0022 7B68     		ldr	r3, [r7, #4]
 2733 0024 93F83D30 		ldrb	r3, [r3, #61]
 2734 0028 DBB2     		uxtb	r3, r3
 2735              		.loc 1 1580 6
 2736 002a 212B     		cmp	r3, #33
 2737 002c 28D1     		bne	.L145
 2738              		.loc 1 1580 49 discriminator 1
 2739 002e FB6B     		ldr	r3, [r7, #60]
 2740 0030 002B     		cmp	r3, #0
 2741 0032 25D0     		beq	.L145
 2742              	.L148:
 2743              	.LBB366:
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2744              		.loc 1 1582 5 discriminator 1
 2745 0034 7B68     		ldr	r3, [r7, #4]
 2746 0036 1B68     		ldr	r3, [r3]
 2747 0038 1433     		adds	r3, r3, #20
 2748 003a 7B62     		str	r3, [r7, #36]
 2749              	.LBB367:
 2750              	.LBB368:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2751              		.loc 2 1072 4 discriminator 1
 2752 003c 7B6A     		ldr	r3, [r7, #36]
 2753              		.syntax unified
 2754              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2755 003e 53E8003F 		ldrex r3, [r3]
 2756              	@ 0 "" 2
 2757              		.thumb
 2758              		.syntax unified
 2759 0042 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2760              		.loc 2 1073 10 discriminator 1
 2761 0044 3B6A     		ldr	r3, [r7, #32]
 2762              	.LBE368:
 2763              	.LBE367:
ARM GAS  /tmp/cceCIUcs.s 			page 97


 2764              		.loc 1 1582 5 discriminator 1
 2765 0046 23F08003 		bic	r3, r3, #128
 2766 004a BB63     		str	r3, [r7, #56]
 2767 004c 7B68     		ldr	r3, [r7, #4]
 2768 004e 1B68     		ldr	r3, [r3]
 2769 0050 1433     		adds	r3, r3, #20
 2770 0052 BA6B     		ldr	r2, [r7, #56]
 2771 0054 3A63     		str	r2, [r7, #48]
 2772 0056 FB62     		str	r3, [r7, #44]
 2773              	.LBB369:
 2774              	.LBB370:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2775              		.loc 2 1123 4 discriminator 1
 2776 0058 F96A     		ldr	r1, [r7, #44]
 2777 005a 3A6B     		ldr	r2, [r7, #48]
 2778              		.syntax unified
 2779              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2780 005c 41E80023 		strex r3, r2, [r1]
 2781              	@ 0 "" 2
 2782              		.thumb
 2783              		.syntax unified
 2784 0060 BB62     		str	r3, [r7, #40]
 2785              		.loc 2 1124 10 discriminator 1
 2786 0062 BB6A     		ldr	r3, [r7, #40]
 2787              	.LBE370:
 2788              	.LBE369:
 2789              		.loc 1 1582 5 discriminator 1
 2790 0064 002B     		cmp	r3, #0
 2791 0066 E5D1     		bne	.L148
 2792              	.LBE366:
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx stream */
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2793              		.loc 1 1585 14
 2794 0068 7B68     		ldr	r3, [r7, #4]
 2795 006a 5B6B     		ldr	r3, [r3, #52]
 2796              		.loc 1 1585 8
 2797 006c 002B     		cmp	r3, #0
 2798 006e 04D0     		beq	.L149
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2799              		.loc 1 1587 7
 2800 0070 7B68     		ldr	r3, [r7, #4]
 2801 0072 5B6B     		ldr	r3, [r3, #52]
 2802 0074 1846     		mov	r0, r3
 2803 0076 FFF7FEFF 		bl	HAL_DMA_Abort
 2804              	.L149:
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2805              		.loc 1 1589 5
 2806 007a 7868     		ldr	r0, [r7, #4]
 2807 007c FFF7FEFF 		bl	UART_EndTxTransfer
 2808              	.L145:
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
ARM GAS  /tmp/cceCIUcs.s 			page 98


 2809              		.loc 1 1593 16
 2810 0080 7B68     		ldr	r3, [r7, #4]
 2811 0082 1B68     		ldr	r3, [r3]
 2812 0084 5B69     		ldr	r3, [r3, #20]
 2813 0086 03F04003 		and	r3, r3, #64
 2814 008a 402B     		cmp	r3, #64
 2815 008c 0CBF     		ite	eq
 2816 008e 0123     		moveq	r3, #1
 2817 0090 0023     		movne	r3, #0
 2818 0092 DBB2     		uxtb	r3, r3
 2819              		.loc 1 1593 14
 2820 0094 FB63     		str	r3, [r7, #60]
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2821              		.loc 1 1594 13
 2822 0096 7B68     		ldr	r3, [r7, #4]
 2823 0098 93F83E30 		ldrb	r3, [r3, #62]
 2824 009c DBB2     		uxtb	r3, r3
 2825              		.loc 1 1594 6
 2826 009e 222B     		cmp	r3, #34
 2827 00a0 28D1     		bne	.L150
 2828              		.loc 1 1594 50 discriminator 1
 2829 00a2 FB6B     		ldr	r3, [r7, #60]
 2830 00a4 002B     		cmp	r3, #0
 2831 00a6 25D0     		beq	.L150
 2832              	.L153:
 2833              	.LBB371:
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2834              		.loc 1 1596 5 discriminator 1
 2835 00a8 7B68     		ldr	r3, [r7, #4]
 2836 00aa 1B68     		ldr	r3, [r3]
 2837 00ac 1433     		adds	r3, r3, #20
 2838 00ae 3B61     		str	r3, [r7, #16]
 2839              	.LBB372:
 2840              	.LBB373:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2841              		.loc 2 1072 4 discriminator 1
 2842 00b0 3B69     		ldr	r3, [r7, #16]
 2843              		.syntax unified
 2844              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2845 00b2 53E8003F 		ldrex r3, [r3]
 2846              	@ 0 "" 2
 2847              		.thumb
 2848              		.syntax unified
 2849 00b6 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2850              		.loc 2 1073 10 discriminator 1
 2851 00b8 FB68     		ldr	r3, [r7, #12]
 2852              	.LBE373:
 2853              	.LBE372:
 2854              		.loc 1 1596 5 discriminator 1
 2855 00ba 23F04003 		bic	r3, r3, #64
 2856 00be 7B63     		str	r3, [r7, #52]
 2857 00c0 7B68     		ldr	r3, [r7, #4]
 2858 00c2 1B68     		ldr	r3, [r3]
 2859 00c4 1433     		adds	r3, r3, #20
 2860 00c6 7A6B     		ldr	r2, [r7, #52]
ARM GAS  /tmp/cceCIUcs.s 			page 99


 2861 00c8 FA61     		str	r2, [r7, #28]
 2862 00ca BB61     		str	r3, [r7, #24]
 2863              	.LBB374:
 2864              	.LBB375:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2865              		.loc 2 1123 4 discriminator 1
 2866 00cc B969     		ldr	r1, [r7, #24]
 2867 00ce FA69     		ldr	r2, [r7, #28]
 2868              		.syntax unified
 2869              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2870 00d0 41E80023 		strex r3, r2, [r1]
 2871              	@ 0 "" 2
 2872              		.thumb
 2873              		.syntax unified
 2874 00d4 7B61     		str	r3, [r7, #20]
 2875              		.loc 2 1124 10 discriminator 1
 2876 00d6 7B69     		ldr	r3, [r7, #20]
 2877              	.LBE375:
 2878              	.LBE374:
 2879              		.loc 1 1596 5 discriminator 1
 2880 00d8 002B     		cmp	r3, #0
 2881 00da E5D1     		bne	.L153
 2882              	.LBE371:
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx stream */
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2883              		.loc 1 1599 14
 2884 00dc 7B68     		ldr	r3, [r7, #4]
 2885 00de 9B6B     		ldr	r3, [r3, #56]
 2886              		.loc 1 1599 8
 2887 00e0 002B     		cmp	r3, #0
 2888 00e2 04D0     		beq	.L154
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2889              		.loc 1 1601 7
 2890 00e4 7B68     		ldr	r3, [r7, #4]
 2891 00e6 9B6B     		ldr	r3, [r3, #56]
 2892 00e8 1846     		mov	r0, r3
 2893 00ea FFF7FEFF 		bl	HAL_DMA_Abort
 2894              	.L154:
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2895              		.loc 1 1603 5
 2896 00ee 7868     		ldr	r0, [r7, #4]
 2897 00f0 FFF7FEFF 		bl	UART_EndRxTransfer
 2898              	.L150:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2899              		.loc 1 1606 10
 2900 00f4 0023     		movs	r3, #0
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2901              		.loc 1 1607 1
 2902 00f6 1846     		mov	r0, r3
 2903 00f8 4037     		adds	r7, r7, #64
 2904              	.LCFI83:
 2905              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cceCIUcs.s 			page 100


 2906 00fa BD46     		mov	sp, r7
 2907              	.LCFI84:
 2908              		.cfi_def_cfa_register 13
 2909              		@ sp needed
 2910 00fc 80BD     		pop	{r7, pc}
 2911              		.cfi_endproc
 2912              	.LFE145:
 2914              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 2915              		.align	1
 2916              		.global	HAL_UARTEx_ReceiveToIdle
 2917              		.syntax unified
 2918              		.thumb
 2919              		.thumb_func
 2920              		.fpu fpv4-sp-d16
 2922              	HAL_UARTEx_ReceiveToIdle:
 2923              	.LFB146:
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of uint16_t available through pData.
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param huart   UART handle.
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                            uint32_t Timeout)
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2924              		.loc 1 1626 1
 2925              		.cfi_startproc
 2926              		@ args = 4, pretend = 0, frame = 32
 2927              		@ frame_needed = 1, uses_anonymous_args = 0
 2928 0000 80B5     		push	{r7, lr}
 2929              	.LCFI85:
 2930              		.cfi_def_cfa_offset 8
 2931              		.cfi_offset 7, -8
 2932              		.cfi_offset 14, -4
 2933 0002 88B0     		sub	sp, sp, #32
 2934              	.LCFI86:
 2935              		.cfi_def_cfa_offset 40
 2936 0004 00AF     		add	r7, sp, #0
 2937              	.LCFI87:
 2938              		.cfi_def_cfa_register 7
 2939 0006 F860     		str	r0, [r7, #12]
 2940 0008 B960     		str	r1, [r7, #8]
 2941 000a 3B60     		str	r3, [r7]
 2942 000c 1346     		mov	r3, r2	@ movhi
 2943 000e FB80     		strh	r3, [r7, #6]	@ movhi
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint8_t  *pdata8bits;
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t *pdata16bits;
ARM GAS  /tmp/cceCIUcs.s 			page 101


1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart;
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2944              		.loc 1 1632 12
 2945 0010 FB68     		ldr	r3, [r7, #12]
 2946 0012 93F83E30 		ldrb	r3, [r3, #62]
 2947 0016 DBB2     		uxtb	r3, r3
 2948              		.loc 1 1632 6
 2949 0018 202B     		cmp	r3, #32
 2950 001a 40F0C980 		bne	.L157
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2951              		.loc 1 1634 8
 2952 001e BB68     		ldr	r3, [r7, #8]
 2953 0020 002B     		cmp	r3, #0
 2954 0022 02D0     		beq	.L158
 2955              		.loc 1 1634 25 discriminator 1
 2956 0024 FB88     		ldrh	r3, [r7, #6]
 2957 0026 002B     		cmp	r3, #0
 2958 0028 01D1     		bne	.L159
 2959              	.L158:
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 2960              		.loc 1 1636 15
 2961 002a 0123     		movs	r3, #1
 2962 002c C1E0     		b	.L160
 2963              	.L159:
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 2964              		.loc 1 1639 5
 2965 002e FB68     		ldr	r3, [r7, #12]
 2966 0030 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2967 0034 012B     		cmp	r3, #1
 2968 0036 01D1     		bne	.L161
 2969              		.loc 1 1639 5 is_stmt 0 discriminator 1
 2970 0038 0223     		movs	r3, #2
 2971 003a BAE0     		b	.L160
 2972              	.L161:
 2973              		.loc 1 1639 5 discriminator 2
 2974 003c FB68     		ldr	r3, [r7, #12]
 2975 003e 0122     		movs	r2, #1
 2976 0040 83F83C20 		strb	r2, [r3, #60]
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2977              		.loc 1 1641 22 is_stmt 1 discriminator 2
 2978 0044 FB68     		ldr	r3, [r7, #12]
 2979 0046 0022     		movs	r2, #0
 2980 0048 1A64     		str	r2, [r3, #64]
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2981              		.loc 1 1642 20 discriminator 2
 2982 004a FB68     		ldr	r3, [r7, #12]
 2983 004c 2222     		movs	r2, #34
 2984 004e 83F83E20 		strb	r2, [r3, #62]
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2985              		.loc 1 1643 26 discriminator 2
ARM GAS  /tmp/cceCIUcs.s 			page 102


 2986 0052 FB68     		ldr	r3, [r7, #12]
 2987 0054 0122     		movs	r2, #1
 2988 0056 1A63     		str	r2, [r3, #48]
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout management */
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 2989              		.loc 1 1646 17 discriminator 2
 2990 0058 FFF7FEFF 		bl	HAL_GetTick
 2991 005c 7861     		str	r0, [r7, #20]
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize  = Size;
 2992              		.loc 1 1648 24 discriminator 2
 2993 005e FB68     		ldr	r3, [r7, #12]
 2994 0060 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2995 0062 9A85     		strh	r2, [r3, #44]	@ movhi
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = Size;
 2996              		.loc 1 1649 24 discriminator 2
 2997 0064 FB68     		ldr	r3, [r7, #12]
 2998 0066 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2999 0068 DA85     		strh	r2, [r3, #46]	@ movhi
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 3000              		.loc 1 1652 21 discriminator 2
 3001 006a FB68     		ldr	r3, [r7, #12]
 3002 006c 9B68     		ldr	r3, [r3, #8]
 3003              		.loc 1 1652 8 discriminator 2
 3004 006e B3F5805F 		cmp	r3, #4096
 3005 0072 08D1     		bne	.L162
 3006              		.loc 1 1652 71 discriminator 1
 3007 0074 FB68     		ldr	r3, [r7, #12]
 3008 0076 1B69     		ldr	r3, [r3, #16]
 3009              		.loc 1 1652 56 discriminator 1
 3010 0078 002B     		cmp	r3, #0
 3011 007a 04D1     		bne	.L162
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = NULL;
 3012              		.loc 1 1654 19
 3013 007c 0023     		movs	r3, #0
 3014 007e FB61     		str	r3, [r7, #28]
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 3015              		.loc 1 1655 19
 3016 0080 BB68     		ldr	r3, [r7, #8]
 3017 0082 BB61     		str	r3, [r7, #24]
 3018 0084 03E0     		b	.L163
 3019              	.L162:
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = pData;
 3020              		.loc 1 1659 19
 3021 0086 BB68     		ldr	r3, [r7, #8]
 3022 0088 FB61     		str	r3, [r7, #28]
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = NULL;
 3023              		.loc 1 1660 19
 3024 008a 0023     		movs	r3, #0
 3025 008c BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/cceCIUcs.s 			page 103


 3026              	.L163:
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 3027              		.loc 1 1663 5
 3028 008e FB68     		ldr	r3, [r7, #12]
 3029 0090 0022     		movs	r2, #0
 3030 0092 83F83C20 		strb	r2, [r3, #60]
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Initialize output number of received elements */
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     *RxLen = 0U;
 3031              		.loc 1 1666 12
 3032 0096 3B68     		ldr	r3, [r7]
 3033 0098 0022     		movs	r2, #0
 3034 009a 1A80     		strh	r2, [r3]	@ movhi
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* as long as data have to be received */
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 3035              		.loc 1 1669 11
 3036 009c 74E0     		b	.L164
 3037              	.L173:
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Check if IDLE flag is set */
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 3038              		.loc 1 1672 11
 3039 009e FB68     		ldr	r3, [r7, #12]
 3040 00a0 1B68     		ldr	r3, [r3]
 3041 00a2 1B68     		ldr	r3, [r3]
 3042 00a4 03F01003 		and	r3, r3, #16
 3043              		.loc 1 1672 10
 3044 00a8 102B     		cmp	r3, #16
 3045 00aa 14D1     		bne	.L165
 3046              	.LBB376:
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Clear IDLE flag in ISR */
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 3047              		.loc 1 1675 9
 3048 00ac 0023     		movs	r3, #0
 3049 00ae 3B61     		str	r3, [r7, #16]
 3050 00b0 FB68     		ldr	r3, [r7, #12]
 3051 00b2 1B68     		ldr	r3, [r3]
 3052 00b4 1B68     		ldr	r3, [r3]
 3053 00b6 3B61     		str	r3, [r7, #16]
 3054 00b8 FB68     		ldr	r3, [r7, #12]
 3055 00ba 1B68     		ldr	r3, [r3]
 3056 00bc 5B68     		ldr	r3, [r3, #4]
 3057 00be 3B61     		str	r3, [r7, #16]
 3058 00c0 3B69     		ldr	r3, [r7, #16]
 3059              	.LBE376:
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (*RxLen > 0U)
 3060              		.loc 1 1679 13
 3061 00c2 3B68     		ldr	r3, [r7]
 3062 00c4 1B88     		ldrh	r3, [r3]
 3063              		.loc 1 1679 12
ARM GAS  /tmp/cceCIUcs.s 			page 104


 3064 00c6 002B     		cmp	r3, #0
 3065 00c8 05D0     		beq	.L165
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 3066              		.loc 1 1681 26
 3067 00ca FB68     		ldr	r3, [r7, #12]
 3068 00cc 2022     		movs	r2, #32
 3069 00ce 83F83E20 		strb	r2, [r3, #62]
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_OK;
 3070              		.loc 1 1683 18
 3071 00d2 0023     		movs	r3, #0
 3072 00d4 6DE0     		b	.L160
 3073              	.L165:
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Check if RXNE flag is set */
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 3074              		.loc 1 1688 11
 3075 00d6 FB68     		ldr	r3, [r7, #12]
 3076 00d8 1B68     		ldr	r3, [r3]
 3077 00da 1B68     		ldr	r3, [r3]
 3078 00dc 03F02003 		and	r3, r3, #32
 3079              		.loc 1 1688 10
 3080 00e0 202B     		cmp	r3, #32
 3081 00e2 3CD1     		bne	.L166
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (pdata8bits == NULL)
 3082              		.loc 1 1690 12
 3083 00e4 FB69     		ldr	r3, [r7, #28]
 3084 00e6 002B     		cmp	r3, #0
 3085 00e8 0CD1     		bne	.L167
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 3086              		.loc 1 1692 42
 3087 00ea FB68     		ldr	r3, [r7, #12]
 3088 00ec 1B68     		ldr	r3, [r3]
 3089              		.loc 1 1692 52
 3090 00ee 5B68     		ldr	r3, [r3, #4]
 3091              		.loc 1 1692 26
 3092 00f0 9BB2     		uxth	r3, r3
 3093 00f2 C3F30803 		ubfx	r3, r3, #0, #9
 3094 00f6 9AB2     		uxth	r2, r3
 3095              		.loc 1 1692 24
 3096 00f8 BB69     		ldr	r3, [r7, #24]
 3097 00fa 1A80     		strh	r2, [r3]	@ movhi
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pdata16bits++;
 3098              		.loc 1 1693 22
 3099 00fc BB69     		ldr	r3, [r7, #24]
 3100 00fe 0233     		adds	r3, r3, #2
 3101 0100 BB61     		str	r3, [r7, #24]
 3102 0102 1FE0     		b	.L168
 3103              	.L167:
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
ARM GAS  /tmp/cceCIUcs.s 			page 105


1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WO
 3104              		.loc 1 1697 27
 3105 0104 FB68     		ldr	r3, [r7, #12]
 3106 0106 9B68     		ldr	r3, [r3, #8]
 3107              		.loc 1 1697 14
 3108 0108 B3F5805F 		cmp	r3, #4096
 3109 010c 07D0     		beq	.L169
 3110              		.loc 1 1697 78 discriminator 1
 3111 010e FB68     		ldr	r3, [r7, #12]
 3112 0110 9B68     		ldr	r3, [r3, #8]
 3113              		.loc 1 1697 62 discriminator 1
 3114 0112 002B     		cmp	r3, #0
 3115 0114 0AD1     		bne	.L170
 3116              		.loc 1 1697 128 discriminator 2
 3117 0116 FB68     		ldr	r3, [r7, #12]
 3118 0118 1B69     		ldr	r3, [r3, #16]
 3119              		.loc 1 1697 113 discriminator 2
 3120 011a 002B     		cmp	r3, #0
 3121 011c 06D1     		bne	.L170
 3122              	.L169:
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 3123              		.loc 1 1699 42
 3124 011e FB68     		ldr	r3, [r7, #12]
 3125 0120 1B68     		ldr	r3, [r3]
 3126              		.loc 1 1699 52
 3127 0122 5B68     		ldr	r3, [r3, #4]
 3128              		.loc 1 1699 27
 3129 0124 DAB2     		uxtb	r2, r3
 3130              		.loc 1 1699 25
 3131 0126 FB69     		ldr	r3, [r7, #28]
 3132 0128 1A70     		strb	r2, [r3]
 3133 012a 08E0     		b	.L171
 3134              	.L170:
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           else
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 3135              		.loc 1 1703 42
 3136 012c FB68     		ldr	r3, [r7, #12]
 3137 012e 1B68     		ldr	r3, [r3]
 3138              		.loc 1 1703 52
 3139 0130 5B68     		ldr	r3, [r3, #4]
 3140              		.loc 1 1703 27
 3141 0132 DBB2     		uxtb	r3, r3
 3142 0134 03F07F03 		and	r3, r3, #127
 3143 0138 DAB2     		uxtb	r2, r3
 3144              		.loc 1 1703 25
 3145 013a FB69     		ldr	r3, [r7, #28]
 3146 013c 1A70     		strb	r2, [r3]
 3147              	.L171:
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pdata8bits++;
 3148              		.loc 1 1706 21
 3149 013e FB69     		ldr	r3, [r7, #28]
 3150 0140 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cceCIUcs.s 			page 106


 3151 0142 FB61     		str	r3, [r7, #28]
 3152              	.L168:
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Increment number of received elements */
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *RxLen += 1U;
 3153              		.loc 1 1709 16
 3154 0144 3B68     		ldr	r3, [r7]
 3155 0146 1B88     		ldrh	r3, [r3]
 3156 0148 0133     		adds	r3, r3, #1
 3157 014a 9AB2     		uxth	r2, r3
 3158 014c 3B68     		ldr	r3, [r7]
 3159 014e 1A80     		strh	r2, [r3]	@ movhi
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxXferCount--;
 3160              		.loc 1 1710 14
 3161 0150 FB68     		ldr	r3, [r7, #12]
 3162 0152 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3163 0154 9BB2     		uxth	r3, r3
 3164              		.loc 1 1710 27
 3165 0156 013B     		subs	r3, r3, #1
 3166 0158 9AB2     		uxth	r2, r3
 3167 015a FB68     		ldr	r3, [r7, #12]
 3168 015c DA85     		strh	r2, [r3, #46]	@ movhi
 3169              	.L166:
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Check for the Timeout */
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (Timeout != HAL_MAX_DELAY)
 3170              		.loc 1 1714 10
 3171 015e BB6A     		ldr	r3, [r7, #40]
 3172 0160 B3F1FF3F 		cmp	r3, #-1
 3173 0164 10D0     		beq	.L164
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 3174              		.loc 1 1716 15
 3175 0166 FFF7FEFF 		bl	HAL_GetTick
 3176 016a 0246     		mov	r2, r0
 3177              		.loc 1 1716 29
 3178 016c 7B69     		ldr	r3, [r7, #20]
 3179 016e D31A     		subs	r3, r2, r3
 3180              		.loc 1 1716 12
 3181 0170 BA6A     		ldr	r2, [r7, #40]
 3182 0172 9A42     		cmp	r2, r3
 3183 0174 02D3     		bcc	.L172
 3184              		.loc 1 1716 53 discriminator 1
 3185 0176 BB6A     		ldr	r3, [r7, #40]
 3186 0178 002B     		cmp	r3, #0
 3187 017a 05D1     		bne	.L164
 3188              	.L172:
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 3189              		.loc 1 1718 26
 3190 017c FB68     		ldr	r3, [r7, #12]
 3191 017e 2022     		movs	r2, #32
 3192 0180 83F83E20 		strb	r2, [r3, #62]
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 3193              		.loc 1 1720 18
ARM GAS  /tmp/cceCIUcs.s 			page 107


 3194 0184 0323     		movs	r3, #3
 3195 0186 14E0     		b	.L160
 3196              	.L164:
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 3197              		.loc 1 1669 17
 3198 0188 FB68     		ldr	r3, [r7, #12]
 3199 018a DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3200 018c 9BB2     		uxth	r3, r3
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 3201              		.loc 1 1669 11
 3202 018e 002B     		cmp	r3, #0
 3203 0190 85D1     		bne	.L173
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set number of received elements in output parameter : RxLen */
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 3204              		.loc 1 1726 19
 3205 0192 FB68     		ldr	r3, [r7, #12]
 3206 0194 9A8D     		ldrh	r2, [r3, #44]
 3207              		.loc 1 1726 39
 3208 0196 FB68     		ldr	r3, [r7, #12]
 3209 0198 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 3210 019a 9BB2     		uxth	r3, r3
 3211              		.loc 1 1726 32
 3212 019c D31A     		subs	r3, r2, r3
 3213 019e 9AB2     		uxth	r2, r3
 3214              		.loc 1 1726 12
 3215 01a0 3B68     		ldr	r3, [r7]
 3216 01a2 1A80     		strh	r2, [r3]	@ movhi
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3217              		.loc 1 1728 20
 3218 01a4 FB68     		ldr	r3, [r7, #12]
 3219 01a6 2022     		movs	r2, #32
 3220 01a8 83F83E20 		strb	r2, [r3, #62]
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 3221              		.loc 1 1730 12
 3222 01ac 0023     		movs	r3, #0
 3223 01ae 00E0     		b	.L160
 3224              	.L157:
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 3225              		.loc 1 1734 12
 3226 01b0 0223     		movs	r3, #2
 3227              	.L160:
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3228              		.loc 1 1736 1
 3229 01b2 1846     		mov	r0, r3
 3230 01b4 2037     		adds	r7, r7, #32
 3231              	.LCFI88:
 3232              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cceCIUcs.s 			page 108


 3233 01b6 BD46     		mov	sp, r7
 3234              	.LCFI89:
 3235              		.cfi_def_cfa_register 13
 3236              		@ sp needed
 3237 01b8 80BD     		pop	{r7, pc}
 3238              		.cfi_endproc
 3239              	.LFE146:
 3241              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 3242              		.align	1
 3243              		.global	HAL_UARTEx_ReceiveToIdle_IT
 3244              		.syntax unified
 3245              		.thumb
 3246              		.thumb_func
 3247              		.fpu fpv4-sp-d16
 3249              	HAL_UARTEx_ReceiveToIdle_IT:
 3250              	.LFB147:
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         number of received data elements.
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of uint16_t available through pData.
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param huart UART handle.
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3251              		.loc 1 1752 1
 3252              		.cfi_startproc
 3253              		@ args = 0, pretend = 0, frame = 48
 3254              		@ frame_needed = 1, uses_anonymous_args = 0
 3255 0000 80B5     		push	{r7, lr}
 3256              	.LCFI90:
 3257              		.cfi_def_cfa_offset 8
 3258              		.cfi_offset 7, -8
 3259              		.cfi_offset 14, -4
 3260 0002 8CB0     		sub	sp, sp, #48
 3261              	.LCFI91:
 3262              		.cfi_def_cfa_offset 56
 3263 0004 00AF     		add	r7, sp, #0
 3264              	.LCFI92:
 3265              		.cfi_def_cfa_register 7
 3266 0006 F860     		str	r0, [r7, #12]
 3267 0008 B960     		str	r1, [r7, #8]
 3268 000a 1346     		mov	r3, r2
 3269 000c FB80     		strh	r3, [r7, #6]	@ movhi
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_StatusTypeDef status;
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 3270              		.loc 1 1756 12
 3271 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cceCIUcs.s 			page 109


 3272 0010 93F83E30 		ldrb	r3, [r3, #62]
 3273 0014 DBB2     		uxtb	r3, r3
 3274              		.loc 1 1756 6
 3275 0016 202B     		cmp	r3, #32
 3276 0018 52D1     		bne	.L175
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 3277              		.loc 1 1758 8
 3278 001a BB68     		ldr	r3, [r7, #8]
 3279 001c 002B     		cmp	r3, #0
 3280 001e 02D0     		beq	.L176
 3281              		.loc 1 1758 25 discriminator 1
 3282 0020 FB88     		ldrh	r3, [r7, #6]
 3283 0022 002B     		cmp	r3, #0
 3284 0024 01D1     		bne	.L177
 3285              	.L176:
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 3286              		.loc 1 1760 14
 3287 0026 0123     		movs	r3, #1
 3288 0028 4BE0     		b	.L178
 3289              	.L177:
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 3290              		.loc 1 1763 5
 3291 002a FB68     		ldr	r3, [r7, #12]
 3292 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3293 0030 012B     		cmp	r3, #1
 3294 0032 01D1     		bne	.L179
 3295              		.loc 1 1763 5 is_stmt 0 discriminator 1
 3296 0034 0223     		movs	r3, #2
 3297 0036 44E0     		b	.L178
 3298              	.L179:
 3299              		.loc 1 1763 5 discriminator 2
 3300 0038 FB68     		ldr	r3, [r7, #12]
 3301 003a 0122     		movs	r2, #1
 3302 003c 83F83C20 		strb	r2, [r3, #60]
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 3303              		.loc 1 1766 26 is_stmt 1 discriminator 2
 3304 0040 FB68     		ldr	r3, [r7, #12]
 3305 0042 0122     		movs	r2, #1
 3306 0044 1A63     		str	r2, [r3, #48]
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 3307              		.loc 1 1768 15 discriminator 2
 3308 0046 FB88     		ldrh	r3, [r7, #6]
 3309 0048 1A46     		mov	r2, r3
 3310 004a B968     		ldr	r1, [r7, #8]
 3311 004c F868     		ldr	r0, [r7, #12]
 3312 004e FFF7FEFF 		bl	UART_Start_Receive_IT
 3313 0052 0346     		mov	r3, r0
 3314 0054 87F82F30 		strb	r3, [r7, #47]
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check Rx process has been successfully started */
ARM GAS  /tmp/cceCIUcs.s 			page 110


1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (status == HAL_OK)
 3315              		.loc 1 1771 8 discriminator 2
 3316 0058 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3317 005c 002B     		cmp	r3, #0
 3318 005e 2CD1     		bne	.L180
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3319              		.loc 1 1773 16
 3320 0060 FB68     		ldr	r3, [r7, #12]
 3321 0062 1B6B     		ldr	r3, [r3, #48]
 3322              		.loc 1 1773 10
 3323 0064 012B     		cmp	r3, #1
 3324 0066 25D1     		bne	.L181
 3325              	.LBB377:
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 3326              		.loc 1 1775 9
 3327 0068 0023     		movs	r3, #0
 3328 006a 3B61     		str	r3, [r7, #16]
 3329 006c FB68     		ldr	r3, [r7, #12]
 3330 006e 1B68     		ldr	r3, [r3]
 3331 0070 1B68     		ldr	r3, [r3]
 3332 0072 3B61     		str	r3, [r7, #16]
 3333 0074 FB68     		ldr	r3, [r7, #12]
 3334 0076 1B68     		ldr	r3, [r3]
 3335 0078 5B68     		ldr	r3, [r3, #4]
 3336 007a 3B61     		str	r3, [r7, #16]
 3337 007c 3B69     		ldr	r3, [r7, #16]
 3338              	.L184:
 3339              	.LBE377:
 3340              	.LBB378:
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3341              		.loc 1 1776 9 discriminator 1
 3342 007e FB68     		ldr	r3, [r7, #12]
 3343 0080 1B68     		ldr	r3, [r3]
 3344 0082 0C33     		adds	r3, r3, #12
 3345 0084 BB61     		str	r3, [r7, #24]
 3346              	.LBB379:
 3347              	.LBB380:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3348              		.loc 2 1072 4 discriminator 1
 3349 0086 BB69     		ldr	r3, [r7, #24]
 3350              		.syntax unified
 3351              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3352 0088 53E8003F 		ldrex r3, [r3]
 3353              	@ 0 "" 2
 3354              		.thumb
 3355              		.syntax unified
 3356 008c 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3357              		.loc 2 1073 10 discriminator 1
 3358 008e 7B69     		ldr	r3, [r7, #20]
 3359              	.LBE380:
 3360              	.LBE379:
 3361              		.loc 1 1776 9 discriminator 1
 3362 0090 43F01003 		orr	r3, r3, #16
 3363 0094 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/cceCIUcs.s 			page 111


 3364 0096 FB68     		ldr	r3, [r7, #12]
 3365 0098 1B68     		ldr	r3, [r3]
 3366 009a 0C33     		adds	r3, r3, #12
 3367 009c BA6A     		ldr	r2, [r7, #40]
 3368 009e 7A62     		str	r2, [r7, #36]
 3369 00a0 3B62     		str	r3, [r7, #32]
 3370              	.LBB381:
 3371              	.LBB382:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3372              		.loc 2 1123 4 discriminator 1
 3373 00a2 396A     		ldr	r1, [r7, #32]
 3374 00a4 7A6A     		ldr	r2, [r7, #36]
 3375              		.syntax unified
 3376              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3377 00a6 41E80023 		strex r3, r2, [r1]
 3378              	@ 0 "" 2
 3379              		.thumb
 3380              		.syntax unified
 3381 00aa FB61     		str	r3, [r7, #28]
 3382              		.loc 2 1124 10 discriminator 1
 3383 00ac FB69     		ldr	r3, [r7, #28]
 3384              	.LBE382:
 3385              	.LBE381:
 3386              		.loc 1 1776 9 discriminator 1
 3387 00ae 002B     		cmp	r3, #0
 3388 00b0 E5D1     		bne	.L184
 3389 00b2 02E0     		b	.L180
 3390              	.L181:
 3391              	.LBE378:
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            (Overrun error for instance).
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         status = HAL_ERROR;
 3392              		.loc 1 1784 16
 3393 00b4 0123     		movs	r3, #1
 3394 00b6 87F82F30 		strb	r3, [r7, #47]
 3395              	.L180:
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return status;
 3396              		.loc 1 1788 12
 3397 00ba 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3398 00be 00E0     		b	.L178
 3399              	.L175:
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 3400              		.loc 1 1792 12
 3401 00c0 0223     		movs	r3, #2
 3402              	.L178:
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
ARM GAS  /tmp/cceCIUcs.s 			page 112


1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3403              		.loc 1 1794 1
 3404 00c2 1846     		mov	r0, r3
 3405 00c4 3037     		adds	r7, r7, #48
 3406              	.LCFI93:
 3407              		.cfi_def_cfa_offset 8
 3408 00c6 BD46     		mov	sp, r7
 3409              	.LCFI94:
 3410              		.cfi_def_cfa_register 13
 3411              		@ sp needed
 3412 00c8 80BD     		pop	{r7, pc}
 3413              		.cfi_endproc
 3414              	.LFE147:
 3416              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 3417              		.align	1
 3418              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 3419              		.syntax unified
 3420              		.thumb
 3421              		.thumb_func
 3422              		.fpu fpv4-sp-d16
 3424              	HAL_UARTEx_ReceiveToIdle_DMA:
 3425              	.LFB148:
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the parity bit (MSB position).
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         of uint16_t available through pData.
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param huart UART handle.
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3426              		.loc 1 1813 1
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 48
 3429              		@ frame_needed = 1, uses_anonymous_args = 0
 3430 0000 80B5     		push	{r7, lr}
 3431              	.LCFI95:
 3432              		.cfi_def_cfa_offset 8
 3433              		.cfi_offset 7, -8
 3434              		.cfi_offset 14, -4
 3435 0002 8CB0     		sub	sp, sp, #48
 3436              	.LCFI96:
 3437              		.cfi_def_cfa_offset 56
 3438 0004 00AF     		add	r7, sp, #0
 3439              	.LCFI97:
 3440              		.cfi_def_cfa_register 7
 3441 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/cceCIUcs.s 			page 113


 3442 0008 B960     		str	r1, [r7, #8]
 3443 000a 1346     		mov	r3, r2
 3444 000c FB80     		strh	r3, [r7, #6]	@ movhi
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_StatusTypeDef status;
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 3445              		.loc 1 1817 12
 3446 000e FB68     		ldr	r3, [r7, #12]
 3447 0010 93F83E30 		ldrb	r3, [r3, #62]
 3448 0014 DBB2     		uxtb	r3, r3
 3449              		.loc 1 1817 6
 3450 0016 202B     		cmp	r3, #32
 3451 0018 52D1     		bne	.L186
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 3452              		.loc 1 1819 8
 3453 001a BB68     		ldr	r3, [r7, #8]
 3454 001c 002B     		cmp	r3, #0
 3455 001e 02D0     		beq	.L187
 3456              		.loc 1 1819 25 discriminator 1
 3457 0020 FB88     		ldrh	r3, [r7, #6]
 3458 0022 002B     		cmp	r3, #0
 3459 0024 01D1     		bne	.L188
 3460              	.L187:
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 3461              		.loc 1 1821 14
 3462 0026 0123     		movs	r3, #1
 3463 0028 4BE0     		b	.L189
 3464              	.L188:
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 3465              		.loc 1 1824 5
 3466 002a FB68     		ldr	r3, [r7, #12]
 3467 002c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3468 0030 012B     		cmp	r3, #1
 3469 0032 01D1     		bne	.L190
 3470              		.loc 1 1824 5 is_stmt 0 discriminator 1
 3471 0034 0223     		movs	r3, #2
 3472 0036 44E0     		b	.L189
 3473              	.L190:
 3474              		.loc 1 1824 5 discriminator 2
 3475 0038 FB68     		ldr	r3, [r7, #12]
 3476 003a 0122     		movs	r2, #1
 3477 003c 83F83C20 		strb	r2, [r3, #60]
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 3478              		.loc 1 1827 26 is_stmt 1 discriminator 2
 3479 0040 FB68     		ldr	r3, [r7, #12]
 3480 0042 0122     		movs	r2, #1
 3481 0044 1A63     		str	r2, [r3, #48]
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 3482              		.loc 1 1829 15 discriminator 2
ARM GAS  /tmp/cceCIUcs.s 			page 114


 3483 0046 FB88     		ldrh	r3, [r7, #6]
 3484 0048 1A46     		mov	r2, r3
 3485 004a B968     		ldr	r1, [r7, #8]
 3486 004c F868     		ldr	r0, [r7, #12]
 3487 004e FFF7FEFF 		bl	UART_Start_Receive_DMA
 3488 0052 0346     		mov	r3, r0
 3489 0054 87F82F30 		strb	r3, [r7, #47]
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (status == HAL_OK)
 3490              		.loc 1 1832 8 discriminator 2
 3491 0058 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3492 005c 002B     		cmp	r3, #0
 3493 005e 2CD1     		bne	.L191
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3494              		.loc 1 1834 16
 3495 0060 FB68     		ldr	r3, [r7, #12]
 3496 0062 1B6B     		ldr	r3, [r3, #48]
 3497              		.loc 1 1834 10
 3498 0064 012B     		cmp	r3, #1
 3499 0066 25D1     		bne	.L192
 3500              	.LBB383:
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 3501              		.loc 1 1836 9
 3502 0068 0023     		movs	r3, #0
 3503 006a 3B61     		str	r3, [r7, #16]
 3504 006c FB68     		ldr	r3, [r7, #12]
 3505 006e 1B68     		ldr	r3, [r3]
 3506 0070 1B68     		ldr	r3, [r3]
 3507 0072 3B61     		str	r3, [r7, #16]
 3508 0074 FB68     		ldr	r3, [r7, #12]
 3509 0076 1B68     		ldr	r3, [r3]
 3510 0078 5B68     		ldr	r3, [r3, #4]
 3511 007a 3B61     		str	r3, [r7, #16]
 3512 007c 3B69     		ldr	r3, [r7, #16]
 3513              	.L195:
 3514              	.LBE383:
 3515              	.LBB384:
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3516              		.loc 1 1837 9 discriminator 1
 3517 007e FB68     		ldr	r3, [r7, #12]
 3518 0080 1B68     		ldr	r3, [r3]
 3519 0082 0C33     		adds	r3, r3, #12
 3520 0084 BB61     		str	r3, [r7, #24]
 3521              	.LBB385:
 3522              	.LBB386:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3523              		.loc 2 1072 4 discriminator 1
 3524 0086 BB69     		ldr	r3, [r7, #24]
 3525              		.syntax unified
 3526              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3527 0088 53E8003F 		ldrex r3, [r3]
 3528              	@ 0 "" 2
 3529              		.thumb
 3530              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 115


 3531 008c 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3532              		.loc 2 1073 10 discriminator 1
 3533 008e 7B69     		ldr	r3, [r7, #20]
 3534              	.LBE386:
 3535              	.LBE385:
 3536              		.loc 1 1837 9 discriminator 1
 3537 0090 43F01003 		orr	r3, r3, #16
 3538 0094 BB62     		str	r3, [r7, #40]
 3539 0096 FB68     		ldr	r3, [r7, #12]
 3540 0098 1B68     		ldr	r3, [r3]
 3541 009a 0C33     		adds	r3, r3, #12
 3542 009c BA6A     		ldr	r2, [r7, #40]
 3543 009e 7A62     		str	r2, [r7, #36]
 3544 00a0 3B62     		str	r3, [r7, #32]
 3545              	.LBB387:
 3546              	.LBB388:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3547              		.loc 2 1123 4 discriminator 1
 3548 00a2 396A     		ldr	r1, [r7, #32]
 3549 00a4 7A6A     		ldr	r2, [r7, #36]
 3550              		.syntax unified
 3551              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3552 00a6 41E80023 		strex r3, r2, [r1]
 3553              	@ 0 "" 2
 3554              		.thumb
 3555              		.syntax unified
 3556 00aa FB61     		str	r3, [r7, #28]
 3557              		.loc 2 1124 10 discriminator 1
 3558 00ac FB69     		ldr	r3, [r7, #28]
 3559              	.LBE388:
 3560              	.LBE387:
 3561              		.loc 1 1837 9 discriminator 1
 3562 00ae 002B     		cmp	r3, #0
 3563 00b0 E5D1     		bne	.L195
 3564 00b2 02E0     		b	.L191
 3565              	.L192:
 3566              	.LBE384:
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            (Overrun error for instance).
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         status = HAL_ERROR;
 3567              		.loc 1 1845 16
 3568 00b4 0123     		movs	r3, #1
 3569 00b6 87F82F30 		strb	r3, [r7, #47]
 3570              	.L191:
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return status;
 3571              		.loc 1 1849 12
 3572 00ba 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3573 00be 00E0     		b	.L189
ARM GAS  /tmp/cceCIUcs.s 			page 116


 3574              	.L186:
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 3575              		.loc 1 1853 12
 3576 00c0 0223     		movs	r3, #2
 3577              	.L189:
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3578              		.loc 1 1855 1
 3579 00c2 1846     		mov	r0, r3
 3580 00c4 3037     		adds	r7, r7, #48
 3581              	.LCFI98:
 3582              		.cfi_def_cfa_offset 8
 3583 00c6 BD46     		mov	sp, r7
 3584              	.LCFI99:
 3585              		.cfi_def_cfa_register 13
 3586              		@ sp needed
 3587 00c8 80BD     		pop	{r7, pc}
 3588              		.cfi_endproc
 3589              	.LFE148:
 3591              		.section	.text.HAL_UART_Abort,"ax",%progbits
 3592              		.align	1
 3593              		.global	HAL_UART_Abort
 3594              		.syntax unified
 3595              		.thumb
 3596              		.thumb_func
 3597              		.fpu fpv4-sp-d16
 3599              	HAL_UART_Abort:
 3600              	.LFB149:
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3601              		.loc 1 1870 1
 3602              		.cfi_startproc
 3603              		@ args = 0, pretend = 0, frame = 128
 3604              		@ frame_needed = 1, uses_anonymous_args = 0
 3605 0000 80B5     		push	{r7, lr}
 3606              	.LCFI100:
 3607              		.cfi_def_cfa_offset 8
 3608              		.cfi_offset 7, -8
 3609              		.cfi_offset 14, -4
 3610 0002 A0B0     		sub	sp, sp, #128
 3611              	.LCFI101:
ARM GAS  /tmp/cceCIUcs.s 			page 117


 3612              		.cfi_def_cfa_offset 136
 3613 0004 00AF     		add	r7, sp, #0
 3614              	.LCFI102:
 3615              		.cfi_def_cfa_register 7
 3616 0006 7860     		str	r0, [r7, #4]
 3617              	.L199:
 3618              	.LBB389:
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USA
 3619              		.loc 1 1872 3 discriminator 1
 3620 0008 7B68     		ldr	r3, [r7, #4]
 3621 000a 1B68     		ldr	r3, [r3]
 3622 000c 0C33     		adds	r3, r3, #12
 3623 000e FB65     		str	r3, [r7, #92]
 3624              	.LBB390:
 3625              	.LBB391:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3626              		.loc 2 1072 4 discriminator 1
 3627 0010 FB6D     		ldr	r3, [r7, #92]
 3628              		.syntax unified
 3629              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3630 0012 53E8003F 		ldrex r3, [r3]
 3631              	@ 0 "" 2
 3632              		.thumb
 3633              		.syntax unified
 3634 0016 BB65     		str	r3, [r7, #88]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3635              		.loc 2 1073 10 discriminator 1
 3636 0018 BB6D     		ldr	r3, [r7, #88]
 3637              	.LBE391:
 3638              	.LBE390:
 3639              		.loc 1 1872 3 discriminator 1
 3640 001a 23F4F073 		bic	r3, r3, #480
 3641 001e FB67     		str	r3, [r7, #124]
 3642 0020 7B68     		ldr	r3, [r7, #4]
 3643 0022 1B68     		ldr	r3, [r3]
 3644 0024 0C33     		adds	r3, r3, #12
 3645 0026 FA6F     		ldr	r2, [r7, #124]
 3646 0028 BA66     		str	r2, [r7, #104]
 3647 002a 7B66     		str	r3, [r7, #100]
 3648              	.LBB392:
 3649              	.LBB393:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3650              		.loc 2 1123 4 discriminator 1
 3651 002c 796E     		ldr	r1, [r7, #100]
 3652 002e BA6E     		ldr	r2, [r7, #104]
 3653              		.syntax unified
 3654              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3655 0030 41E80023 		strex r3, r2, [r1]
 3656              	@ 0 "" 2
 3657              		.thumb
 3658              		.syntax unified
 3659 0034 3B66     		str	r3, [r7, #96]
 3660              		.loc 2 1124 10 discriminator 1
 3661 0036 3B6E     		ldr	r3, [r7, #96]
 3662              	.LBE393:
 3663              	.LBE392:
ARM GAS  /tmp/cceCIUcs.s 			page 118


 3664              		.loc 1 1872 3 discriminator 1
 3665 0038 002B     		cmp	r3, #0
 3666 003a E5D1     		bne	.L199
 3667              	.L202:
 3668              	.LBE389:
 3669              	.LBB394:
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3670              		.loc 1 1873 3 discriminator 1
 3671 003c 7B68     		ldr	r3, [r7, #4]
 3672 003e 1B68     		ldr	r3, [r3]
 3673 0040 1433     		adds	r3, r3, #20
 3674 0042 BB64     		str	r3, [r7, #72]
 3675              	.LBB395:
 3676              	.LBB396:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3677              		.loc 2 1072 4 discriminator 1
 3678 0044 BB6C     		ldr	r3, [r7, #72]
 3679              		.syntax unified
 3680              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3681 0046 53E8003F 		ldrex r3, [r3]
 3682              	@ 0 "" 2
 3683              		.thumb
 3684              		.syntax unified
 3685 004a 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3686              		.loc 2 1073 10 discriminator 1
 3687 004c 7B6C     		ldr	r3, [r7, #68]
 3688              	.LBE396:
 3689              	.LBE395:
 3690              		.loc 1 1873 3 discriminator 1
 3691 004e 23F00103 		bic	r3, r3, #1
 3692 0052 BB67     		str	r3, [r7, #120]
 3693 0054 7B68     		ldr	r3, [r7, #4]
 3694 0056 1B68     		ldr	r3, [r3]
 3695 0058 1433     		adds	r3, r3, #20
 3696 005a BA6F     		ldr	r2, [r7, #120]
 3697 005c 7A65     		str	r2, [r7, #84]
 3698 005e 3B65     		str	r3, [r7, #80]
 3699              	.LBB397:
 3700              	.LBB398:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3701              		.loc 2 1123 4 discriminator 1
 3702 0060 396D     		ldr	r1, [r7, #80]
 3703 0062 7A6D     		ldr	r2, [r7, #84]
 3704              		.syntax unified
 3705              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3706 0064 41E80023 		strex r3, r2, [r1]
 3707              	@ 0 "" 2
 3708              		.thumb
 3709              		.syntax unified
 3710 0068 FB64     		str	r3, [r7, #76]
 3711              		.loc 2 1124 10 discriminator 1
 3712 006a FB6C     		ldr	r3, [r7, #76]
 3713              	.LBE398:
 3714              	.LBE397:
 3715              		.loc 1 1873 3 discriminator 1
 3716 006c 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCIUcs.s 			page 119


 3717 006e E5D1     		bne	.L202
 3718              	.LBE394:
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3719              		.loc 1 1876 12
 3720 0070 7B68     		ldr	r3, [r7, #4]
 3721 0072 1B6B     		ldr	r3, [r3, #48]
 3722              		.loc 1 1876 6
 3723 0074 012B     		cmp	r3, #1
 3724 0076 19D1     		bne	.L203
 3725              	.L206:
 3726              	.LBB399:
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3727              		.loc 1 1878 5 discriminator 1
 3728 0078 7B68     		ldr	r3, [r7, #4]
 3729 007a 1B68     		ldr	r3, [r3]
 3730 007c 0C33     		adds	r3, r3, #12
 3731 007e 7B63     		str	r3, [r7, #52]
 3732              	.LBB400:
 3733              	.LBB401:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3734              		.loc 2 1072 4 discriminator 1
 3735 0080 7B6B     		ldr	r3, [r7, #52]
 3736              		.syntax unified
 3737              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3738 0082 53E8003F 		ldrex r3, [r3]
 3739              	@ 0 "" 2
 3740              		.thumb
 3741              		.syntax unified
 3742 0086 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3743              		.loc 2 1073 10 discriminator 1
 3744 0088 3B6B     		ldr	r3, [r7, #48]
 3745              	.LBE401:
 3746              	.LBE400:
 3747              		.loc 1 1878 5 discriminator 1
 3748 008a 23F01003 		bic	r3, r3, #16
 3749 008e 7B67     		str	r3, [r7, #116]
 3750 0090 7B68     		ldr	r3, [r7, #4]
 3751 0092 1B68     		ldr	r3, [r3]
 3752 0094 0C33     		adds	r3, r3, #12
 3753 0096 7A6F     		ldr	r2, [r7, #116]
 3754 0098 3A64     		str	r2, [r7, #64]
 3755 009a FB63     		str	r3, [r7, #60]
 3756              	.LBB402:
 3757              	.LBB403:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3758              		.loc 2 1123 4 discriminator 1
 3759 009c F96B     		ldr	r1, [r7, #60]
 3760 009e 3A6C     		ldr	r2, [r7, #64]
 3761              		.syntax unified
 3762              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3763 00a0 41E80023 		strex r3, r2, [r1]
 3764              	@ 0 "" 2
 3765              		.thumb
ARM GAS  /tmp/cceCIUcs.s 			page 120


 3766              		.syntax unified
 3767 00a4 BB63     		str	r3, [r7, #56]
 3768              		.loc 2 1124 10 discriminator 1
 3769 00a6 BB6B     		ldr	r3, [r7, #56]
 3770              	.LBE403:
 3771              	.LBE402:
 3772              		.loc 1 1878 5 discriminator 1
 3773 00a8 002B     		cmp	r3, #0
 3774 00aa E5D1     		bne	.L206
 3775              	.L203:
 3776              	.LBE399:
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3777              		.loc 1 1882 7
 3778 00ac 7B68     		ldr	r3, [r7, #4]
 3779 00ae 1B68     		ldr	r3, [r3]
 3780 00b0 5B69     		ldr	r3, [r3, #20]
 3781 00b2 03F08003 		and	r3, r3, #128
 3782              		.loc 1 1882 6
 3783 00b6 802B     		cmp	r3, #128
 3784 00b8 36D1     		bne	.L207
 3785              	.L210:
 3786              	.LBB404:
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3787              		.loc 1 1884 5 discriminator 1
 3788 00ba 7B68     		ldr	r3, [r7, #4]
 3789 00bc 1B68     		ldr	r3, [r3]
 3790 00be 1433     		adds	r3, r3, #20
 3791 00c0 3B62     		str	r3, [r7, #32]
 3792              	.LBB405:
 3793              	.LBB406:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3794              		.loc 2 1072 4 discriminator 1
 3795 00c2 3B6A     		ldr	r3, [r7, #32]
 3796              		.syntax unified
 3797              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3798 00c4 53E8003F 		ldrex r3, [r3]
 3799              	@ 0 "" 2
 3800              		.thumb
 3801              		.syntax unified
 3802 00c8 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3803              		.loc 2 1073 10 discriminator 1
 3804 00ca FB69     		ldr	r3, [r7, #28]
 3805              	.LBE406:
 3806              	.LBE405:
 3807              		.loc 1 1884 5 discriminator 1
 3808 00cc 23F08003 		bic	r3, r3, #128
 3809 00d0 3B67     		str	r3, [r7, #112]
 3810 00d2 7B68     		ldr	r3, [r7, #4]
 3811 00d4 1B68     		ldr	r3, [r3]
 3812 00d6 1433     		adds	r3, r3, #20
 3813 00d8 3A6F     		ldr	r2, [r7, #112]
 3814 00da FA62     		str	r2, [r7, #44]
ARM GAS  /tmp/cceCIUcs.s 			page 121


 3815 00dc BB62     		str	r3, [r7, #40]
 3816              	.LBB407:
 3817              	.LBB408:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3818              		.loc 2 1123 4 discriminator 1
 3819 00de B96A     		ldr	r1, [r7, #40]
 3820 00e0 FA6A     		ldr	r2, [r7, #44]
 3821              		.syntax unified
 3822              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3823 00e2 41E80023 		strex r3, r2, [r1]
 3824              	@ 0 "" 2
 3825              		.thumb
 3826              		.syntax unified
 3827 00e6 7B62     		str	r3, [r7, #36]
 3828              		.loc 2 1124 10 discriminator 1
 3829 00e8 7B6A     		ldr	r3, [r7, #36]
 3830              	.LBE408:
 3831              	.LBE407:
 3832              		.loc 1 1884 5 discriminator 1
 3833 00ea 002B     		cmp	r3, #0
 3834 00ec E5D1     		bne	.L210
 3835              	.LBE404:
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3836              		.loc 1 1887 14
 3837 00ee 7B68     		ldr	r3, [r7, #4]
 3838 00f0 5B6B     		ldr	r3, [r3, #52]
 3839              		.loc 1 1887 8
 3840 00f2 002B     		cmp	r3, #0
 3841 00f4 18D0     		beq	.L207
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3842              		.loc 1 1891 12
 3843 00f6 7B68     		ldr	r3, [r7, #4]
 3844 00f8 5B6B     		ldr	r3, [r3, #52]
 3845              		.loc 1 1891 40
 3846 00fa 0022     		movs	r2, #0
 3847 00fc 1A65     		str	r2, [r3, #80]
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 3848              		.loc 1 1893 11
 3849 00fe 7B68     		ldr	r3, [r7, #4]
 3850 0100 5B6B     		ldr	r3, [r3, #52]
 3851 0102 1846     		mov	r0, r3
 3852 0104 FFF7FEFF 		bl	HAL_DMA_Abort
 3853 0108 0346     		mov	r3, r0
 3854              		.loc 1 1893 10
 3855 010a 002B     		cmp	r3, #0
 3856 010c 0CD0     		beq	.L207
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 3857              		.loc 1 1895 13
 3858 010e 7B68     		ldr	r3, [r7, #4]
 3859 0110 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/cceCIUcs.s 			page 122


 3860 0112 1846     		mov	r0, r3
 3861 0114 FFF7FEFF 		bl	HAL_DMA_GetError
 3862 0118 0346     		mov	r3, r0
 3863              		.loc 1 1895 12
 3864 011a 202B     		cmp	r3, #32
 3865 011c 04D1     		bne	.L207
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Set error code to DMA */
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3866              		.loc 1 1898 28
 3867 011e 7B68     		ldr	r3, [r7, #4]
 3868 0120 1022     		movs	r2, #16
 3869 0122 1A64     		str	r2, [r3, #64]
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 3870              		.loc 1 1900 18
 3871 0124 0323     		movs	r3, #3
 3872 0126 52E0     		b	.L211
 3873              	.L207:
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3874              		.loc 1 1907 7
 3875 0128 7B68     		ldr	r3, [r7, #4]
 3876 012a 1B68     		ldr	r3, [r3]
 3877 012c 5B69     		ldr	r3, [r3, #20]
 3878 012e 03F04003 		and	r3, r3, #64
 3879              		.loc 1 1907 6
 3880 0132 402B     		cmp	r3, #64
 3881 0134 36D1     		bne	.L212
 3882              	.L215:
 3883              	.LBB409:
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3884              		.loc 1 1909 5 discriminator 1
 3885 0136 7B68     		ldr	r3, [r7, #4]
 3886 0138 1B68     		ldr	r3, [r3]
 3887 013a 1433     		adds	r3, r3, #20
 3888 013c FB60     		str	r3, [r7, #12]
 3889              	.LBB410:
 3890              	.LBB411:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3891              		.loc 2 1072 4 discriminator 1
 3892 013e FB68     		ldr	r3, [r7, #12]
 3893              		.syntax unified
 3894              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3895 0140 53E8003F 		ldrex r3, [r3]
 3896              	@ 0 "" 2
 3897              		.thumb
 3898              		.syntax unified
 3899 0144 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3900              		.loc 2 1073 10 discriminator 1
ARM GAS  /tmp/cceCIUcs.s 			page 123


 3901 0146 BB68     		ldr	r3, [r7, #8]
 3902              	.LBE411:
 3903              	.LBE410:
 3904              		.loc 1 1909 5 discriminator 1
 3905 0148 23F04003 		bic	r3, r3, #64
 3906 014c FB66     		str	r3, [r7, #108]
 3907 014e 7B68     		ldr	r3, [r7, #4]
 3908 0150 1B68     		ldr	r3, [r3]
 3909 0152 1433     		adds	r3, r3, #20
 3910 0154 FA6E     		ldr	r2, [r7, #108]
 3911 0156 BA61     		str	r2, [r7, #24]
 3912 0158 7B61     		str	r3, [r7, #20]
 3913              	.LBB412:
 3914              	.LBB413:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3915              		.loc 2 1123 4 discriminator 1
 3916 015a 7969     		ldr	r1, [r7, #20]
 3917 015c BA69     		ldr	r2, [r7, #24]
 3918              		.syntax unified
 3919              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3920 015e 41E80023 		strex r3, r2, [r1]
 3921              	@ 0 "" 2
 3922              		.thumb
 3923              		.syntax unified
 3924 0162 3B61     		str	r3, [r7, #16]
 3925              		.loc 2 1124 10 discriminator 1
 3926 0164 3B69     		ldr	r3, [r7, #16]
 3927              	.LBE413:
 3928              	.LBE412:
 3929              		.loc 1 1909 5 discriminator 1
 3930 0166 002B     		cmp	r3, #0
 3931 0168 E5D1     		bne	.L215
 3932              	.LBE409:
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3933              		.loc 1 1912 14
 3934 016a 7B68     		ldr	r3, [r7, #4]
 3935 016c 9B6B     		ldr	r3, [r3, #56]
 3936              		.loc 1 1912 8
 3937 016e 002B     		cmp	r3, #0
 3938 0170 18D0     		beq	.L212
1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3939              		.loc 1 1916 12
 3940 0172 7B68     		ldr	r3, [r7, #4]
 3941 0174 9B6B     		ldr	r3, [r3, #56]
 3942              		.loc 1 1916 40
 3943 0176 0022     		movs	r2, #0
 3944 0178 1A65     		str	r2, [r3, #80]
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 3945              		.loc 1 1918 11
 3946 017a 7B68     		ldr	r3, [r7, #4]
 3947 017c 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/cceCIUcs.s 			page 124


 3948 017e 1846     		mov	r0, r3
 3949 0180 FFF7FEFF 		bl	HAL_DMA_Abort
 3950 0184 0346     		mov	r3, r0
 3951              		.loc 1 1918 10
 3952 0186 002B     		cmp	r3, #0
 3953 0188 0CD0     		beq	.L212
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 3954              		.loc 1 1920 13
 3955 018a 7B68     		ldr	r3, [r7, #4]
 3956 018c 9B6B     		ldr	r3, [r3, #56]
 3957 018e 1846     		mov	r0, r3
 3958 0190 FFF7FEFF 		bl	HAL_DMA_GetError
 3959 0194 0346     		mov	r3, r0
 3960              		.loc 1 1920 12
 3961 0196 202B     		cmp	r3, #32
 3962 0198 04D1     		bne	.L212
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Set error code to DMA */
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3963              		.loc 1 1923 28
 3964 019a 7B68     		ldr	r3, [r7, #4]
 3965 019c 1022     		movs	r2, #16
 3966 019e 1A64     		str	r2, [r3, #64]
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 3967              		.loc 1 1925 18
 3968 01a0 0323     		movs	r3, #3
 3969 01a2 14E0     		b	.L211
 3970              	.L212:
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3971              		.loc 1 1932 22
 3972 01a4 7B68     		ldr	r3, [r7, #4]
 3973 01a6 0022     		movs	r2, #0
 3974 01a8 DA84     		strh	r2, [r3, #38]	@ movhi
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3975              		.loc 1 1933 22
 3976 01aa 7B68     		ldr	r3, [r7, #4]
 3977 01ac 0022     		movs	r2, #0
 3978 01ae DA85     		strh	r2, [r3, #46]	@ movhi
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 3979              		.loc 1 1936 20
 3980 01b0 7B68     		ldr	r3, [r7, #4]
 3981 01b2 0022     		movs	r2, #0
 3982 01b4 1A64     		str	r2, [r3, #64]
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3983              		.loc 1 1939 18
ARM GAS  /tmp/cceCIUcs.s 			page 125


 3984 01b6 7B68     		ldr	r3, [r7, #4]
 3985 01b8 2022     		movs	r2, #32
 3986 01ba 83F83E20 		strb	r2, [r3, #62]
1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3987              		.loc 1 1940 17
 3988 01be 7B68     		ldr	r3, [r7, #4]
 3989 01c0 2022     		movs	r2, #32
 3990 01c2 83F83D20 		strb	r2, [r3, #61]
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3991              		.loc 1 1941 24
 3992 01c6 7B68     		ldr	r3, [r7, #4]
 3993 01c8 0022     		movs	r2, #0
 3994 01ca 1A63     		str	r2, [r3, #48]
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 3995              		.loc 1 1943 10
 3996 01cc 0023     		movs	r3, #0
 3997              	.L211:
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3998              		.loc 1 1944 1
 3999 01ce 1846     		mov	r0, r3
 4000 01d0 8037     		adds	r7, r7, #128
 4001              	.LCFI103:
 4002              		.cfi_def_cfa_offset 8
 4003 01d2 BD46     		mov	sp, r7
 4004              	.LCFI104:
 4005              		.cfi_def_cfa_register 13
 4006              		@ sp needed
 4007 01d4 80BD     		pop	{r7, pc}
 4008              		.cfi_endproc
 4009              	.LFE149:
 4011              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 4012              		.align	1
 4013              		.global	HAL_UART_AbortTransmit
 4014              		.syntax unified
 4015              		.thumb
 4016              		.thumb_func
 4017              		.fpu fpv4-sp-d16
 4019              	HAL_UART_AbortTransmit:
 4020              	.LFB150:
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4021              		.loc 1 1959 1
 4022              		.cfi_startproc
ARM GAS  /tmp/cceCIUcs.s 			page 126


 4023              		@ args = 0, pretend = 0, frame = 56
 4024              		@ frame_needed = 1, uses_anonymous_args = 0
 4025 0000 80B5     		push	{r7, lr}
 4026              	.LCFI105:
 4027              		.cfi_def_cfa_offset 8
 4028              		.cfi_offset 7, -8
 4029              		.cfi_offset 14, -4
 4030 0002 8EB0     		sub	sp, sp, #56
 4031              	.LCFI106:
 4032              		.cfi_def_cfa_offset 64
 4033 0004 00AF     		add	r7, sp, #0
 4034              	.LCFI107:
 4035              		.cfi_def_cfa_register 7
 4036 0006 7860     		str	r0, [r7, #4]
 4037              	.L219:
 4038              	.LBB414:
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 4039              		.loc 1 1961 3 discriminator 1
 4040 0008 7B68     		ldr	r3, [r7, #4]
 4041 000a 1B68     		ldr	r3, [r3]
 4042 000c 0C33     		adds	r3, r3, #12
 4043 000e 3B62     		str	r3, [r7, #32]
 4044              	.LBB415:
 4045              	.LBB416:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4046              		.loc 2 1072 4 discriminator 1
 4047 0010 3B6A     		ldr	r3, [r7, #32]
 4048              		.syntax unified
 4049              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4050 0012 53E8003F 		ldrex r3, [r3]
 4051              	@ 0 "" 2
 4052              		.thumb
 4053              		.syntax unified
 4054 0016 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4055              		.loc 2 1073 10 discriminator 1
 4056 0018 FB69     		ldr	r3, [r7, #28]
 4057              	.LBE416:
 4058              	.LBE415:
 4059              		.loc 1 1961 3 discriminator 1
 4060 001a 23F0C003 		bic	r3, r3, #192
 4061 001e 7B63     		str	r3, [r7, #52]
 4062 0020 7B68     		ldr	r3, [r7, #4]
 4063 0022 1B68     		ldr	r3, [r3]
 4064 0024 0C33     		adds	r3, r3, #12
 4065 0026 7A6B     		ldr	r2, [r7, #52]
 4066 0028 FA62     		str	r2, [r7, #44]
 4067 002a BB62     		str	r3, [r7, #40]
 4068              	.LBB417:
 4069              	.LBB418:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4070              		.loc 2 1123 4 discriminator 1
 4071 002c B96A     		ldr	r1, [r7, #40]
 4072 002e FA6A     		ldr	r2, [r7, #44]
 4073              		.syntax unified
 4074              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cceCIUcs.s 			page 127


 4075 0030 41E80023 		strex r3, r2, [r1]
 4076              	@ 0 "" 2
 4077              		.thumb
 4078              		.syntax unified
 4079 0034 7B62     		str	r3, [r7, #36]
 4080              		.loc 2 1124 10 discriminator 1
 4081 0036 7B6A     		ldr	r3, [r7, #36]
 4082              	.LBE418:
 4083              	.LBE417:
 4084              		.loc 1 1961 3 discriminator 1
 4085 0038 002B     		cmp	r3, #0
 4086 003a E5D1     		bne	.L219
 4087              	.LBE414:
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4088              		.loc 1 1964 7
 4089 003c 7B68     		ldr	r3, [r7, #4]
 4090 003e 1B68     		ldr	r3, [r3]
 4091 0040 5B69     		ldr	r3, [r3, #20]
 4092 0042 03F08003 		and	r3, r3, #128
 4093              		.loc 1 1964 6
 4094 0046 802B     		cmp	r3, #128
 4095 0048 36D1     		bne	.L220
 4096              	.L223:
 4097              	.LBB419:
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4098              		.loc 1 1966 5 discriminator 1
 4099 004a 7B68     		ldr	r3, [r7, #4]
 4100 004c 1B68     		ldr	r3, [r3]
 4101 004e 1433     		adds	r3, r3, #20
 4102 0050 FB60     		str	r3, [r7, #12]
 4103              	.LBB420:
 4104              	.LBB421:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4105              		.loc 2 1072 4 discriminator 1
 4106 0052 FB68     		ldr	r3, [r7, #12]
 4107              		.syntax unified
 4108              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4109 0054 53E8003F 		ldrex r3, [r3]
 4110              	@ 0 "" 2
 4111              		.thumb
 4112              		.syntax unified
 4113 0058 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4114              		.loc 2 1073 10 discriminator 1
 4115 005a BB68     		ldr	r3, [r7, #8]
 4116              	.LBE421:
 4117              	.LBE420:
 4118              		.loc 1 1966 5 discriminator 1
 4119 005c 23F08003 		bic	r3, r3, #128
 4120 0060 3B63     		str	r3, [r7, #48]
 4121 0062 7B68     		ldr	r3, [r7, #4]
 4122 0064 1B68     		ldr	r3, [r3]
 4123 0066 1433     		adds	r3, r3, #20
 4124 0068 3A6B     		ldr	r2, [r7, #48]
ARM GAS  /tmp/cceCIUcs.s 			page 128


 4125 006a BA61     		str	r2, [r7, #24]
 4126 006c 7B61     		str	r3, [r7, #20]
 4127              	.LBB422:
 4128              	.LBB423:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4129              		.loc 2 1123 4 discriminator 1
 4130 006e 7969     		ldr	r1, [r7, #20]
 4131 0070 BA69     		ldr	r2, [r7, #24]
 4132              		.syntax unified
 4133              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4134 0072 41E80023 		strex r3, r2, [r1]
 4135              	@ 0 "" 2
 4136              		.thumb
 4137              		.syntax unified
 4138 0076 3B61     		str	r3, [r7, #16]
 4139              		.loc 2 1124 10 discriminator 1
 4140 0078 3B69     		ldr	r3, [r7, #16]
 4141              	.LBE423:
 4142              	.LBE422:
 4143              		.loc 1 1966 5 discriminator 1
 4144 007a 002B     		cmp	r3, #0
 4145 007c E5D1     		bne	.L223
 4146              	.LBE419:
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 4147              		.loc 1 1969 14
 4148 007e 7B68     		ldr	r3, [r7, #4]
 4149 0080 5B6B     		ldr	r3, [r3, #52]
 4150              		.loc 1 1969 8
 4151 0082 002B     		cmp	r3, #0
 4152 0084 18D0     		beq	.L220
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 4153              		.loc 1 1973 12
 4154 0086 7B68     		ldr	r3, [r7, #4]
 4155 0088 5B6B     		ldr	r3, [r3, #52]
 4156              		.loc 1 1973 40
 4157 008a 0022     		movs	r2, #0
 4158 008c 1A65     		str	r2, [r3, #80]
1974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 4159              		.loc 1 1975 11
 4160 008e 7B68     		ldr	r3, [r7, #4]
 4161 0090 5B6B     		ldr	r3, [r3, #52]
 4162 0092 1846     		mov	r0, r3
 4163 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 4164 0098 0346     		mov	r3, r0
 4165              		.loc 1 1975 10
 4166 009a 002B     		cmp	r3, #0
 4167 009c 0CD0     		beq	.L220
1976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 4168              		.loc 1 1977 13
 4169 009e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 129


 4170 00a0 5B6B     		ldr	r3, [r3, #52]
 4171 00a2 1846     		mov	r0, r3
 4172 00a4 FFF7FEFF 		bl	HAL_DMA_GetError
 4173 00a8 0346     		mov	r3, r0
 4174              		.loc 1 1977 12
 4175 00aa 202B     		cmp	r3, #32
 4176 00ac 04D1     		bne	.L220
1978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Set error code to DMA */
1980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 4177              		.loc 1 1980 28
 4178 00ae 7B68     		ldr	r3, [r7, #4]
 4179 00b0 1022     		movs	r2, #16
 4180 00b2 1A64     		str	r2, [r3, #64]
1981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 4181              		.loc 1 1982 18
 4182 00b4 0323     		movs	r3, #3
 4183 00b6 07E0     		b	.L224
 4184              	.L220:
1983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Tx transfer counter */
1989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4185              		.loc 1 1989 22
 4186 00b8 7B68     		ldr	r3, [r7, #4]
 4187 00ba 0022     		movs	r2, #0
 4188 00bc DA84     		strh	r2, [r3, #38]	@ movhi
1990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4189              		.loc 1 1992 17
 4190 00be 7B68     		ldr	r3, [r7, #4]
 4191 00c0 2022     		movs	r2, #32
 4192 00c2 83F83D20 		strb	r2, [r3, #61]
1993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 4193              		.loc 1 1994 10
 4194 00c6 0023     		movs	r3, #0
 4195              	.L224:
1995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4196              		.loc 1 1995 1
 4197 00c8 1846     		mov	r0, r3
 4198 00ca 3837     		adds	r7, r7, #56
 4199              	.LCFI108:
 4200              		.cfi_def_cfa_offset 8
 4201 00cc BD46     		mov	sp, r7
 4202              	.LCFI109:
 4203              		.cfi_def_cfa_register 13
 4204              		@ sp needed
 4205 00ce 80BD     		pop	{r7, pc}
 4206              		.cfi_endproc
 4207              	.LFE150:
 4209              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
ARM GAS  /tmp/cceCIUcs.s 			page 130


 4210              		.align	1
 4211              		.global	HAL_UART_AbortReceive
 4212              		.syntax unified
 4213              		.thumb
 4214              		.thumb_func
 4215              		.fpu fpv4-sp-d16
 4217              	HAL_UART_AbortReceive:
 4218              	.LFB151:
1996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
2002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
2005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
2006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
2007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
2010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4219              		.loc 1 2010 1
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 104
 4222              		@ frame_needed = 1, uses_anonymous_args = 0
 4223 0000 80B5     		push	{r7, lr}
 4224              	.LCFI110:
 4225              		.cfi_def_cfa_offset 8
 4226              		.cfi_offset 7, -8
 4227              		.cfi_offset 14, -4
 4228 0002 9AB0     		sub	sp, sp, #104
 4229              	.LCFI111:
 4230              		.cfi_def_cfa_offset 112
 4231 0004 00AF     		add	r7, sp, #0
 4232              	.LCFI112:
 4233              		.cfi_def_cfa_register 7
 4234 0006 7860     		str	r0, [r7, #4]
 4235              	.L228:
 4236              	.LBB424:
2011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4237              		.loc 1 2012 3 discriminator 1
 4238 0008 7B68     		ldr	r3, [r7, #4]
 4239 000a 1B68     		ldr	r3, [r3]
 4240 000c 0C33     		adds	r3, r3, #12
 4241 000e BB64     		str	r3, [r7, #72]
 4242              	.LBB425:
 4243              	.LBB426:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4244              		.loc 2 1072 4 discriminator 1
 4245 0010 BB6C     		ldr	r3, [r7, #72]
 4246              		.syntax unified
 4247              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4248 0012 53E8003F 		ldrex r3, [r3]
 4249              	@ 0 "" 2
ARM GAS  /tmp/cceCIUcs.s 			page 131


 4250              		.thumb
 4251              		.syntax unified
 4252 0016 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4253              		.loc 2 1073 10 discriminator 1
 4254 0018 7B6C     		ldr	r3, [r7, #68]
 4255              	.LBE426:
 4256              	.LBE425:
 4257              		.loc 1 2012 3 discriminator 1
 4258 001a 23F49073 		bic	r3, r3, #288
 4259 001e 7B66     		str	r3, [r7, #100]
 4260 0020 7B68     		ldr	r3, [r7, #4]
 4261 0022 1B68     		ldr	r3, [r3]
 4262 0024 0C33     		adds	r3, r3, #12
 4263 0026 7A6E     		ldr	r2, [r7, #100]
 4264 0028 7A65     		str	r2, [r7, #84]
 4265 002a 3B65     		str	r3, [r7, #80]
 4266              	.LBB427:
 4267              	.LBB428:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4268              		.loc 2 1123 4 discriminator 1
 4269 002c 396D     		ldr	r1, [r7, #80]
 4270 002e 7A6D     		ldr	r2, [r7, #84]
 4271              		.syntax unified
 4272              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4273 0030 41E80023 		strex r3, r2, [r1]
 4274              	@ 0 "" 2
 4275              		.thumb
 4276              		.syntax unified
 4277 0034 FB64     		str	r3, [r7, #76]
 4278              		.loc 2 1124 10 discriminator 1
 4279 0036 FB6C     		ldr	r3, [r7, #76]
 4280              	.LBE428:
 4281              	.LBE427:
 4282              		.loc 1 2012 3 discriminator 1
 4283 0038 002B     		cmp	r3, #0
 4284 003a E5D1     		bne	.L228
 4285              	.L231:
 4286              	.LBE424:
 4287              	.LBB429:
2013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4288              		.loc 1 2013 3 discriminator 1
 4289 003c 7B68     		ldr	r3, [r7, #4]
 4290 003e 1B68     		ldr	r3, [r3]
 4291 0040 1433     		adds	r3, r3, #20
 4292 0042 7B63     		str	r3, [r7, #52]
 4293              	.LBB430:
 4294              	.LBB431:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4295              		.loc 2 1072 4 discriminator 1
 4296 0044 7B6B     		ldr	r3, [r7, #52]
 4297              		.syntax unified
 4298              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4299 0046 53E8003F 		ldrex r3, [r3]
 4300              	@ 0 "" 2
 4301              		.thumb
 4302              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 132


 4303 004a 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4304              		.loc 2 1073 10 discriminator 1
 4305 004c 3B6B     		ldr	r3, [r7, #48]
 4306              	.LBE431:
 4307              	.LBE430:
 4308              		.loc 1 2013 3 discriminator 1
 4309 004e 23F00103 		bic	r3, r3, #1
 4310 0052 3B66     		str	r3, [r7, #96]
 4311 0054 7B68     		ldr	r3, [r7, #4]
 4312 0056 1B68     		ldr	r3, [r3]
 4313 0058 1433     		adds	r3, r3, #20
 4314 005a 3A6E     		ldr	r2, [r7, #96]
 4315 005c 3A64     		str	r2, [r7, #64]
 4316 005e FB63     		str	r3, [r7, #60]
 4317              	.LBB432:
 4318              	.LBB433:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4319              		.loc 2 1123 4 discriminator 1
 4320 0060 F96B     		ldr	r1, [r7, #60]
 4321 0062 3A6C     		ldr	r2, [r7, #64]
 4322              		.syntax unified
 4323              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4324 0064 41E80023 		strex r3, r2, [r1]
 4325              	@ 0 "" 2
 4326              		.thumb
 4327              		.syntax unified
 4328 0068 BB63     		str	r3, [r7, #56]
 4329              		.loc 2 1124 10 discriminator 1
 4330 006a BB6B     		ldr	r3, [r7, #56]
 4331              	.LBE433:
 4332              	.LBE432:
 4333              		.loc 1 2013 3 discriminator 1
 4334 006c 002B     		cmp	r3, #0
 4335 006e E5D1     		bne	.L231
 4336              	.LBE429:
2014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 4337              		.loc 1 2016 12
 4338 0070 7B68     		ldr	r3, [r7, #4]
 4339 0072 1B6B     		ldr	r3, [r3, #48]
 4340              		.loc 1 2016 6
 4341 0074 012B     		cmp	r3, #1
 4342 0076 19D1     		bne	.L232
 4343              	.L235:
 4344              	.LBB434:
2017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 4345              		.loc 1 2018 5 discriminator 1
 4346 0078 7B68     		ldr	r3, [r7, #4]
 4347 007a 1B68     		ldr	r3, [r3]
 4348 007c 0C33     		adds	r3, r3, #12
 4349 007e 3B62     		str	r3, [r7, #32]
 4350              	.LBB435:
 4351              	.LBB436:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cceCIUcs.s 			page 133


 4352              		.loc 2 1072 4 discriminator 1
 4353 0080 3B6A     		ldr	r3, [r7, #32]
 4354              		.syntax unified
 4355              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4356 0082 53E8003F 		ldrex r3, [r3]
 4357              	@ 0 "" 2
 4358              		.thumb
 4359              		.syntax unified
 4360 0086 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4361              		.loc 2 1073 10 discriminator 1
 4362 0088 FB69     		ldr	r3, [r7, #28]
 4363              	.LBE436:
 4364              	.LBE435:
 4365              		.loc 1 2018 5 discriminator 1
 4366 008a 23F01003 		bic	r3, r3, #16
 4367 008e FB65     		str	r3, [r7, #92]
 4368 0090 7B68     		ldr	r3, [r7, #4]
 4369 0092 1B68     		ldr	r3, [r3]
 4370 0094 0C33     		adds	r3, r3, #12
 4371 0096 FA6D     		ldr	r2, [r7, #92]
 4372 0098 FA62     		str	r2, [r7, #44]
 4373 009a BB62     		str	r3, [r7, #40]
 4374              	.LBB437:
 4375              	.LBB438:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4376              		.loc 2 1123 4 discriminator 1
 4377 009c B96A     		ldr	r1, [r7, #40]
 4378 009e FA6A     		ldr	r2, [r7, #44]
 4379              		.syntax unified
 4380              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4381 00a0 41E80023 		strex r3, r2, [r1]
 4382              	@ 0 "" 2
 4383              		.thumb
 4384              		.syntax unified
 4385 00a4 7B62     		str	r3, [r7, #36]
 4386              		.loc 2 1124 10 discriminator 1
 4387 00a6 7B6A     		ldr	r3, [r7, #36]
 4388              	.LBE438:
 4389              	.LBE437:
 4390              		.loc 1 2018 5 discriminator 1
 4391 00a8 002B     		cmp	r3, #0
 4392 00aa E5D1     		bne	.L235
 4393              	.L232:
 4394              	.LBE434:
2019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4395              		.loc 1 2022 7
 4396 00ac 7B68     		ldr	r3, [r7, #4]
 4397 00ae 1B68     		ldr	r3, [r3]
 4398 00b0 5B69     		ldr	r3, [r3, #20]
 4399 00b2 03F04003 		and	r3, r3, #64
 4400              		.loc 1 2022 6
 4401 00b6 402B     		cmp	r3, #64
 4402 00b8 36D1     		bne	.L236
ARM GAS  /tmp/cceCIUcs.s 			page 134


 4403              	.L239:
 4404              	.LBB439:
2023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4405              		.loc 1 2024 5 discriminator 1
 4406 00ba 7B68     		ldr	r3, [r7, #4]
 4407 00bc 1B68     		ldr	r3, [r3]
 4408 00be 1433     		adds	r3, r3, #20
 4409 00c0 FB60     		str	r3, [r7, #12]
 4410              	.LBB440:
 4411              	.LBB441:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4412              		.loc 2 1072 4 discriminator 1
 4413 00c2 FB68     		ldr	r3, [r7, #12]
 4414              		.syntax unified
 4415              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4416 00c4 53E8003F 		ldrex r3, [r3]
 4417              	@ 0 "" 2
 4418              		.thumb
 4419              		.syntax unified
 4420 00c8 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4421              		.loc 2 1073 10 discriminator 1
 4422 00ca BB68     		ldr	r3, [r7, #8]
 4423              	.LBE441:
 4424              	.LBE440:
 4425              		.loc 1 2024 5 discriminator 1
 4426 00cc 23F04003 		bic	r3, r3, #64
 4427 00d0 BB65     		str	r3, [r7, #88]
 4428 00d2 7B68     		ldr	r3, [r7, #4]
 4429 00d4 1B68     		ldr	r3, [r3]
 4430 00d6 1433     		adds	r3, r3, #20
 4431 00d8 BA6D     		ldr	r2, [r7, #88]
 4432 00da BA61     		str	r2, [r7, #24]
 4433 00dc 7B61     		str	r3, [r7, #20]
 4434              	.LBB442:
 4435              	.LBB443:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4436              		.loc 2 1123 4 discriminator 1
 4437 00de 7969     		ldr	r1, [r7, #20]
 4438 00e0 BA69     		ldr	r2, [r7, #24]
 4439              		.syntax unified
 4440              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4441 00e2 41E80023 		strex r3, r2, [r1]
 4442              	@ 0 "" 2
 4443              		.thumb
 4444              		.syntax unified
 4445 00e6 3B61     		str	r3, [r7, #16]
 4446              		.loc 2 1124 10 discriminator 1
 4447 00e8 3B69     		ldr	r3, [r7, #16]
 4448              	.LBE443:
 4449              	.LBE442:
 4450              		.loc 1 2024 5 discriminator 1
 4451 00ea 002B     		cmp	r3, #0
 4452 00ec E5D1     		bne	.L239
 4453              	.LBE439:
2025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/cceCIUcs.s 			page 135


2026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
2027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 4454              		.loc 1 2027 14
 4455 00ee 7B68     		ldr	r3, [r7, #4]
 4456 00f0 9B6B     		ldr	r3, [r3, #56]
 4457              		.loc 1 2027 8
 4458 00f2 002B     		cmp	r3, #0
 4459 00f4 18D0     		beq	.L236
2028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
2030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
2031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 4460              		.loc 1 2031 12
 4461 00f6 7B68     		ldr	r3, [r7, #4]
 4462 00f8 9B6B     		ldr	r3, [r3, #56]
 4463              		.loc 1 2031 40
 4464 00fa 0022     		movs	r2, #0
 4465 00fc 1A65     		str	r2, [r3, #80]
2032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 4466              		.loc 1 2033 11
 4467 00fe 7B68     		ldr	r3, [r7, #4]
 4468 0100 9B6B     		ldr	r3, [r3, #56]
 4469 0102 1846     		mov	r0, r3
 4470 0104 FFF7FEFF 		bl	HAL_DMA_Abort
 4471 0108 0346     		mov	r3, r0
 4472              		.loc 1 2033 10
 4473 010a 002B     		cmp	r3, #0
 4474 010c 0CD0     		beq	.L236
2034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 4475              		.loc 1 2035 13
 4476 010e 7B68     		ldr	r3, [r7, #4]
 4477 0110 9B6B     		ldr	r3, [r3, #56]
 4478 0112 1846     		mov	r0, r3
 4479 0114 FFF7FEFF 		bl	HAL_DMA_GetError
 4480 0118 0346     		mov	r3, r0
 4481              		.loc 1 2035 12
 4482 011a 202B     		cmp	r3, #32
 4483 011c 04D1     		bne	.L236
2036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
2037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Set error code to DMA */
2038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 4484              		.loc 1 2038 28
 4485 011e 7B68     		ldr	r3, [r7, #4]
 4486 0120 1022     		movs	r2, #16
 4487 0122 1A64     		str	r2, [r3, #64]
2039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 4488              		.loc 1 2040 18
 4489 0124 0323     		movs	r3, #3
 4490 0126 0AE0     		b	.L240
 4491              	.L236:
2041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
2042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
ARM GAS  /tmp/cceCIUcs.s 			page 136


2045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Rx transfer counter */
2047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4492              		.loc 1 2047 22
 4493 0128 7B68     		ldr	r3, [r7, #4]
 4494 012a 0022     		movs	r2, #0
 4495 012c DA85     		strh	r2, [r3, #46]	@ movhi
2048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4496              		.loc 1 2050 18
 4497 012e 7B68     		ldr	r3, [r7, #4]
 4498 0130 2022     		movs	r2, #32
 4499 0132 83F83E20 		strb	r2, [r3, #62]
2051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4500              		.loc 1 2051 24
 4501 0136 7B68     		ldr	r3, [r7, #4]
 4502 0138 0022     		movs	r2, #0
 4503 013a 1A63     		str	r2, [r3, #48]
2052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 4504              		.loc 1 2053 10
 4505 013c 0023     		movs	r3, #0
 4506              	.L240:
2054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4507              		.loc 1 2054 1
 4508 013e 1846     		mov	r0, r3
 4509 0140 6837     		adds	r7, r7, #104
 4510              	.LCFI113:
 4511              		.cfi_def_cfa_offset 8
 4512 0142 BD46     		mov	sp, r7
 4513              	.LCFI114:
 4514              		.cfi_def_cfa_register 13
 4515              		@ sp needed
 4516 0144 80BD     		pop	{r7, pc}
 4517              		.cfi_endproc
 4518              	.LFE151:
 4520              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 4521              		.align	1
 4522              		.global	HAL_UART_Abort_IT
 4523              		.syntax unified
 4524              		.thumb
 4525              		.thumb_func
 4526              		.fpu fpv4-sp-d16
 4528              	HAL_UART_Abort_IT:
 4529              	.LFB152:
2055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
2058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
2060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
2061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
2062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
2065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
ARM GAS  /tmp/cceCIUcs.s 			page 137


2066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
2071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4530              		.loc 1 2071 1
 4531              		.cfi_startproc
 4532              		@ args = 0, pretend = 0, frame = 136
 4533              		@ frame_needed = 1, uses_anonymous_args = 0
 4534 0000 80B5     		push	{r7, lr}
 4535              	.LCFI115:
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 7, -8
 4538              		.cfi_offset 14, -4
 4539 0002 A2B0     		sub	sp, sp, #136
 4540              	.LCFI116:
 4541              		.cfi_def_cfa_offset 144
 4542 0004 00AF     		add	r7, sp, #0
 4543              	.LCFI117:
 4544              		.cfi_def_cfa_register 7
 4545 0006 7860     		str	r0, [r7, #4]
2072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 4546              		.loc 1 2072 12
 4547 0008 0123     		movs	r3, #1
 4548 000a C7F88430 		str	r3, [r7, #132]
 4549              	.L244:
 4550              	.LBB444:
2073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USA
 4551              		.loc 1 2075 3 discriminator 1
 4552 000e 7B68     		ldr	r3, [r7, #4]
 4553 0010 1B68     		ldr	r3, [r3]
 4554 0012 0C33     		adds	r3, r3, #12
 4555 0014 3B66     		str	r3, [r7, #96]
 4556              	.LBB445:
 4557              	.LBB446:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4558              		.loc 2 1072 4 discriminator 1
 4559 0016 3B6E     		ldr	r3, [r7, #96]
 4560              		.syntax unified
 4561              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4562 0018 53E8003F 		ldrex r3, [r3]
 4563              	@ 0 "" 2
 4564              		.thumb
 4565              		.syntax unified
 4566 001c FB65     		str	r3, [r7, #92]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4567              		.loc 2 1073 10 discriminator 1
 4568 001e FB6D     		ldr	r3, [r7, #92]
 4569              	.LBE446:
 4570              	.LBE445:
 4571              		.loc 1 2075 3 discriminator 1
 4572 0020 23F4F073 		bic	r3, r3, #480
 4573 0024 C7F88030 		str	r3, [r7, #128]
 4574 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 138


 4575 002a 1B68     		ldr	r3, [r3]
 4576 002c 0C33     		adds	r3, r3, #12
 4577 002e D7F88020 		ldr	r2, [r7, #128]
 4578 0032 FA66     		str	r2, [r7, #108]
 4579 0034 BB66     		str	r3, [r7, #104]
 4580              	.LBB447:
 4581              	.LBB448:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4582              		.loc 2 1123 4 discriminator 1
 4583 0036 B96E     		ldr	r1, [r7, #104]
 4584 0038 FA6E     		ldr	r2, [r7, #108]
 4585              		.syntax unified
 4586              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4587 003a 41E80023 		strex r3, r2, [r1]
 4588              	@ 0 "" 2
 4589              		.thumb
 4590              		.syntax unified
 4591 003e 7B66     		str	r3, [r7, #100]
 4592              		.loc 2 1124 10 discriminator 1
 4593 0040 7B6E     		ldr	r3, [r7, #100]
 4594              	.LBE448:
 4595              	.LBE447:
 4596              		.loc 1 2075 3 discriminator 1
 4597 0042 002B     		cmp	r3, #0
 4598 0044 E3D1     		bne	.L244
 4599              	.L247:
 4600              	.LBE444:
 4601              	.LBB449:
2076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4602              		.loc 1 2076 3 discriminator 1
 4603 0046 7B68     		ldr	r3, [r7, #4]
 4604 0048 1B68     		ldr	r3, [r3]
 4605 004a 1433     		adds	r3, r3, #20
 4606 004c FB64     		str	r3, [r7, #76]
 4607              	.LBB450:
 4608              	.LBB451:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4609              		.loc 2 1072 4 discriminator 1
 4610 004e FB6C     		ldr	r3, [r7, #76]
 4611              		.syntax unified
 4612              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4613 0050 53E8003F 		ldrex r3, [r3]
 4614              	@ 0 "" 2
 4615              		.thumb
 4616              		.syntax unified
 4617 0054 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4618              		.loc 2 1073 10 discriminator 1
 4619 0056 BB6C     		ldr	r3, [r7, #72]
 4620              	.LBE451:
 4621              	.LBE450:
 4622              		.loc 1 2076 3 discriminator 1
 4623 0058 23F00103 		bic	r3, r3, #1
 4624 005c FB67     		str	r3, [r7, #124]
 4625 005e 7B68     		ldr	r3, [r7, #4]
 4626 0060 1B68     		ldr	r3, [r3]
 4627 0062 1433     		adds	r3, r3, #20
ARM GAS  /tmp/cceCIUcs.s 			page 139


 4628 0064 FA6F     		ldr	r2, [r7, #124]
 4629 0066 BA65     		str	r2, [r7, #88]
 4630 0068 7B65     		str	r3, [r7, #84]
 4631              	.LBB452:
 4632              	.LBB453:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4633              		.loc 2 1123 4 discriminator 1
 4634 006a 796D     		ldr	r1, [r7, #84]
 4635 006c BA6D     		ldr	r2, [r7, #88]
 4636              		.syntax unified
 4637              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4638 006e 41E80023 		strex r3, r2, [r1]
 4639              	@ 0 "" 2
 4640              		.thumb
 4641              		.syntax unified
 4642 0072 3B65     		str	r3, [r7, #80]
 4643              		.loc 2 1124 10 discriminator 1
 4644 0074 3B6D     		ldr	r3, [r7, #80]
 4645              	.LBE453:
 4646              	.LBE452:
 4647              		.loc 1 2076 3 discriminator 1
 4648 0076 002B     		cmp	r3, #0
 4649 0078 E5D1     		bne	.L247
 4650              	.LBE449:
2077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 4651              		.loc 1 2079 12
 4652 007a 7B68     		ldr	r3, [r7, #4]
 4653 007c 1B6B     		ldr	r3, [r3, #48]
 4654              		.loc 1 2079 6
 4655 007e 012B     		cmp	r3, #1
 4656 0080 19D1     		bne	.L248
 4657              	.L251:
 4658              	.LBB454:
2080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 4659              		.loc 1 2081 5 discriminator 1
 4660 0082 7B68     		ldr	r3, [r7, #4]
 4661 0084 1B68     		ldr	r3, [r3]
 4662 0086 0C33     		adds	r3, r3, #12
 4663 0088 BB63     		str	r3, [r7, #56]
 4664              	.LBB455:
 4665              	.LBB456:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4666              		.loc 2 1072 4 discriminator 1
 4667 008a BB6B     		ldr	r3, [r7, #56]
 4668              		.syntax unified
 4669              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4670 008c 53E8003F 		ldrex r3, [r3]
 4671              	@ 0 "" 2
 4672              		.thumb
 4673              		.syntax unified
 4674 0090 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4675              		.loc 2 1073 10 discriminator 1
 4676 0092 7B6B     		ldr	r3, [r7, #52]
ARM GAS  /tmp/cceCIUcs.s 			page 140


 4677              	.LBE456:
 4678              	.LBE455:
 4679              		.loc 1 2081 5 discriminator 1
 4680 0094 23F01003 		bic	r3, r3, #16
 4681 0098 BB67     		str	r3, [r7, #120]
 4682 009a 7B68     		ldr	r3, [r7, #4]
 4683 009c 1B68     		ldr	r3, [r3]
 4684 009e 0C33     		adds	r3, r3, #12
 4685 00a0 BA6F     		ldr	r2, [r7, #120]
 4686 00a2 7A64     		str	r2, [r7, #68]
 4687 00a4 3B64     		str	r3, [r7, #64]
 4688              	.LBB457:
 4689              	.LBB458:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4690              		.loc 2 1123 4 discriminator 1
 4691 00a6 396C     		ldr	r1, [r7, #64]
 4692 00a8 7A6C     		ldr	r2, [r7, #68]
 4693              		.syntax unified
 4694              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4695 00aa 41E80023 		strex r3, r2, [r1]
 4696              	@ 0 "" 2
 4697              		.thumb
 4698              		.syntax unified
 4699 00ae FB63     		str	r3, [r7, #60]
 4700              		.loc 2 1124 10 discriminator 1
 4701 00b0 FB6B     		ldr	r3, [r7, #60]
 4702              	.LBE458:
 4703              	.LBE457:
 4704              		.loc 1 2081 5 discriminator 1
 4705 00b2 002B     		cmp	r3, #0
 4706 00b4 E5D1     		bne	.L251
 4707              	.L248:
 4708              	.LBE454:
2082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
2085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      before any call to DMA Abort functions */
2086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Tx Handle is valid */
2087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 4709              		.loc 1 2087 12
 4710 00b6 7B68     		ldr	r3, [r7, #4]
 4711 00b8 5B6B     		ldr	r3, [r3, #52]
 4712              		.loc 1 2087 6
 4713 00ba 002B     		cmp	r3, #0
 4714 00bc 0FD0     		beq	.L252
2088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Otherwise, set it to NULL */
2091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4715              		.loc 1 2091 9
 4716 00be 7B68     		ldr	r3, [r7, #4]
 4717 00c0 1B68     		ldr	r3, [r3]
 4718 00c2 5B69     		ldr	r3, [r3, #20]
 4719 00c4 03F08003 		and	r3, r3, #128
 4720              		.loc 1 2091 8
 4721 00c8 802B     		cmp	r3, #128
 4722 00ca 04D1     		bne	.L253
ARM GAS  /tmp/cceCIUcs.s 			page 141


2092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 4723              		.loc 1 2093 12
 4724 00cc 7B68     		ldr	r3, [r7, #4]
 4725 00ce 5B6B     		ldr	r3, [r3, #52]
 4726              		.loc 1 2093 40
 4727 00d0 534A     		ldr	r2, .L268
 4728 00d2 1A65     		str	r2, [r3, #80]
 4729 00d4 03E0     		b	.L252
 4730              	.L253:
2094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 4731              		.loc 1 2097 12
 4732 00d6 7B68     		ldr	r3, [r7, #4]
 4733 00d8 5B6B     		ldr	r3, [r3, #52]
 4734              		.loc 1 2097 40
 4735 00da 0022     		movs	r2, #0
 4736 00dc 1A65     		str	r2, [r3, #80]
 4737              	.L252:
2098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Rx Handle is valid */
2101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 4738              		.loc 1 2101 12
 4739 00de 7B68     		ldr	r3, [r7, #4]
 4740 00e0 9B6B     		ldr	r3, [r3, #56]
 4741              		.loc 1 2101 6
 4742 00e2 002B     		cmp	r3, #0
 4743 00e4 0FD0     		beq	.L254
2102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Otherwise, set it to NULL */
2105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4744              		.loc 1 2105 9
 4745 00e6 7B68     		ldr	r3, [r7, #4]
 4746 00e8 1B68     		ldr	r3, [r3]
 4747 00ea 5B69     		ldr	r3, [r3, #20]
 4748 00ec 03F04003 		and	r3, r3, #64
 4749              		.loc 1 2105 8
 4750 00f0 402B     		cmp	r3, #64
 4751 00f2 04D1     		bne	.L255
2106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 4752              		.loc 1 2107 12
 4753 00f4 7B68     		ldr	r3, [r7, #4]
 4754 00f6 9B6B     		ldr	r3, [r3, #56]
 4755              		.loc 1 2107 40
 4756 00f8 4A4A     		ldr	r2, .L268+4
 4757 00fa 1A65     		str	r2, [r3, #80]
 4758 00fc 03E0     		b	.L254
 4759              	.L255:
2108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
ARM GAS  /tmp/cceCIUcs.s 			page 142


 4760              		.loc 1 2111 12
 4761 00fe 7B68     		ldr	r3, [r7, #4]
 4762 0100 9B6B     		ldr	r3, [r3, #56]
 4763              		.loc 1 2111 40
 4764 0102 0022     		movs	r2, #0
 4765 0104 1A65     		str	r2, [r3, #80]
 4766              	.L254:
2112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4767              		.loc 1 2116 7
 4768 0106 7B68     		ldr	r3, [r7, #4]
 4769 0108 1B68     		ldr	r3, [r3]
 4770 010a 5B69     		ldr	r3, [r3, #20]
 4771 010c 03F08003 		and	r3, r3, #128
 4772              		.loc 1 2116 6
 4773 0110 802B     		cmp	r3, #128
 4774 0112 2DD1     		bne	.L256
 4775              	.L259:
 4776              	.LBB459:
2117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
2119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4777              		.loc 1 2119 5 discriminator 1
 4778 0114 7B68     		ldr	r3, [r7, #4]
 4779 0116 1B68     		ldr	r3, [r3]
 4780 0118 1433     		adds	r3, r3, #20
 4781 011a 7B62     		str	r3, [r7, #36]
 4782              	.LBB460:
 4783              	.LBB461:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4784              		.loc 2 1072 4 discriminator 1
 4785 011c 7B6A     		ldr	r3, [r7, #36]
 4786              		.syntax unified
 4787              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4788 011e 53E8003F 		ldrex r3, [r3]
 4789              	@ 0 "" 2
 4790              		.thumb
 4791              		.syntax unified
 4792 0122 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4793              		.loc 2 1073 10 discriminator 1
 4794 0124 3B6A     		ldr	r3, [r7, #32]
 4795              	.LBE461:
 4796              	.LBE460:
 4797              		.loc 1 2119 5 discriminator 1
 4798 0126 23F08003 		bic	r3, r3, #128
 4799 012a 7B67     		str	r3, [r7, #116]
 4800 012c 7B68     		ldr	r3, [r7, #4]
 4801 012e 1B68     		ldr	r3, [r3]
 4802 0130 1433     		adds	r3, r3, #20
 4803 0132 7A6F     		ldr	r2, [r7, #116]
 4804 0134 3A63     		str	r2, [r7, #48]
 4805 0136 FB62     		str	r3, [r7, #44]
 4806              	.LBB462:
ARM GAS  /tmp/cceCIUcs.s 			page 143


 4807              	.LBB463:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4808              		.loc 2 1123 4 discriminator 1
 4809 0138 F96A     		ldr	r1, [r7, #44]
 4810 013a 3A6B     		ldr	r2, [r7, #48]
 4811              		.syntax unified
 4812              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4813 013c 41E80023 		strex r3, r2, [r1]
 4814              	@ 0 "" 2
 4815              		.thumb
 4816              		.syntax unified
 4817 0140 BB62     		str	r3, [r7, #40]
 4818              		.loc 2 1124 10 discriminator 1
 4819 0142 BB6A     		ldr	r3, [r7, #40]
 4820              	.LBE463:
 4821              	.LBE462:
 4822              		.loc 1 2119 5 discriminator 1
 4823 0144 002B     		cmp	r3, #0
 4824 0146 E5D1     		bne	.L259
 4825              	.LBE459:
2120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
2122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 4826              		.loc 1 2122 14
 4827 0148 7B68     		ldr	r3, [r7, #4]
 4828 014a 5B6B     		ldr	r3, [r3, #52]
 4829              		.loc 1 2122 8
 4830 014c 002B     		cmp	r3, #0
 4831 014e 0FD0     		beq	.L256
2123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
2125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA TX */
2128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 4832              		.loc 1 2128 11
 4833 0150 7B68     		ldr	r3, [r7, #4]
 4834 0152 5B6B     		ldr	r3, [r3, #52]
 4835 0154 1846     		mov	r0, r3
 4836 0156 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4837 015a 0346     		mov	r3, r0
 4838              		.loc 1 2128 10
 4839 015c 002B     		cmp	r3, #0
 4840 015e 04D0     		beq	.L260
2129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 4841              		.loc 1 2130 14
 4842 0160 7B68     		ldr	r3, [r7, #4]
 4843 0162 5B6B     		ldr	r3, [r3, #52]
 4844              		.loc 1 2130 42
 4845 0164 0022     		movs	r2, #0
 4846 0166 1A65     		str	r2, [r3, #80]
 4847 0168 02E0     		b	.L256
 4848              	.L260:
2131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
ARM GAS  /tmp/cceCIUcs.s 			page 144


2134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x00U;
 4849              		.loc 1 2134 19
 4850 016a 0023     		movs	r3, #0
 4851 016c C7F88430 		str	r3, [r7, #132]
 4852              	.L256:
2135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4853              		.loc 1 2140 7
 4854 0170 7B68     		ldr	r3, [r7, #4]
 4855 0172 1B68     		ldr	r3, [r3]
 4856 0174 5B69     		ldr	r3, [r3, #20]
 4857 0176 03F04003 		and	r3, r3, #64
 4858              		.loc 1 2140 6
 4859 017a 402B     		cmp	r3, #64
 4860 017c 30D1     		bne	.L261
 4861              	.L264:
 4862              	.LBB464:
2141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4863              		.loc 1 2142 5 discriminator 1
 4864 017e 7B68     		ldr	r3, [r7, #4]
 4865 0180 1B68     		ldr	r3, [r3]
 4866 0182 1433     		adds	r3, r3, #20
 4867 0184 3B61     		str	r3, [r7, #16]
 4868              	.LBB465:
 4869              	.LBB466:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4870              		.loc 2 1072 4 discriminator 1
 4871 0186 3B69     		ldr	r3, [r7, #16]
 4872              		.syntax unified
 4873              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4874 0188 53E8003F 		ldrex r3, [r3]
 4875              	@ 0 "" 2
 4876              		.thumb
 4877              		.syntax unified
 4878 018c FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4879              		.loc 2 1073 10 discriminator 1
 4880 018e FB68     		ldr	r3, [r7, #12]
 4881              	.LBE466:
 4882              	.LBE465:
 4883              		.loc 1 2142 5 discriminator 1
 4884 0190 23F04003 		bic	r3, r3, #64
 4885 0194 3B67     		str	r3, [r7, #112]
 4886 0196 7B68     		ldr	r3, [r7, #4]
 4887 0198 1B68     		ldr	r3, [r3]
 4888 019a 1433     		adds	r3, r3, #20
 4889 019c 3A6F     		ldr	r2, [r7, #112]
 4890 019e FA61     		str	r2, [r7, #28]
 4891 01a0 BB61     		str	r3, [r7, #24]
 4892              	.LBB467:
 4893              	.LBB468:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cceCIUcs.s 			page 145


 4894              		.loc 2 1123 4 discriminator 1
 4895 01a2 B969     		ldr	r1, [r7, #24]
 4896 01a4 FA69     		ldr	r2, [r7, #28]
 4897              		.syntax unified
 4898              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4899 01a6 41E80023 		strex r3, r2, [r1]
 4900              	@ 0 "" 2
 4901              		.thumb
 4902              		.syntax unified
 4903 01aa 7B61     		str	r3, [r7, #20]
 4904              		.loc 2 1124 10 discriminator 1
 4905 01ac 7B69     		ldr	r3, [r7, #20]
 4906              	.LBE468:
 4907              	.LBE467:
 4908              		.loc 1 2142 5 discriminator 1
 4909 01ae 002B     		cmp	r3, #0
 4910 01b0 E5D1     		bne	.L264
 4911              	.LBE464:
2143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
2145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 4912              		.loc 1 2145 14
 4913 01b2 7B68     		ldr	r3, [r7, #4]
 4914 01b4 9B6B     		ldr	r3, [r3, #56]
 4915              		.loc 1 2145 8
 4916 01b6 002B     		cmp	r3, #0
 4917 01b8 12D0     		beq	.L261
2146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
2148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA RX */
2151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 4918              		.loc 1 2151 11
 4919 01ba 7B68     		ldr	r3, [r7, #4]
 4920 01bc 9B6B     		ldr	r3, [r3, #56]
 4921 01be 1846     		mov	r0, r3
 4922 01c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4923 01c4 0346     		mov	r3, r0
 4924              		.loc 1 2151 10
 4925 01c6 002B     		cmp	r3, #0
 4926 01c8 07D0     		beq	.L265
2152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 4927              		.loc 1 2153 14
 4928 01ca 7B68     		ldr	r3, [r7, #4]
 4929 01cc 9B6B     		ldr	r3, [r3, #56]
 4930              		.loc 1 2153 42
 4931 01ce 0022     		movs	r2, #0
 4932 01d0 1A65     		str	r2, [r3, #80]
2154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x01U;
 4933              		.loc 1 2154 19
 4934 01d2 0123     		movs	r3, #1
 4935 01d4 C7F88430 		str	r3, [r7, #132]
 4936 01d8 02E0     		b	.L261
 4937              	.L265:
2155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
ARM GAS  /tmp/cceCIUcs.s 			page 146


2156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x00U;
 4938              		.loc 1 2158 19
 4939 01da 0023     		movs	r3, #0
 4940 01dc C7F88430 		str	r3, [r7, #132]
 4941              	.L261:
2159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (AbortCplt == 0x01U)
 4942              		.loc 1 2164 6
 4943 01e0 D7F88430 		ldr	r3, [r7, #132]
 4944 01e4 012B     		cmp	r3, #1
 4945 01e6 16D1     		bne	.L266
2165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 4946              		.loc 1 2167 24
 4947 01e8 7B68     		ldr	r3, [r7, #4]
 4948 01ea 0022     		movs	r2, #0
 4949 01ec DA84     		strh	r2, [r3, #38]	@ movhi
2168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 4950              		.loc 1 2168 24
 4951 01ee 7B68     		ldr	r3, [r7, #4]
 4952 01f0 0022     		movs	r2, #0
 4953 01f2 DA85     		strh	r2, [r3, #46]	@ movhi
2169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset ErrorCode */
2171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 4954              		.loc 1 2171 22
 4955 01f4 7B68     		ldr	r3, [r7, #4]
 4956 01f6 0022     		movs	r2, #0
 4957 01f8 1A64     		str	r2, [r3, #64]
2172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
2174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 4958              		.loc 1 2174 20
 4959 01fa 7B68     		ldr	r3, [r7, #4]
 4960 01fc 2022     		movs	r2, #32
 4961 01fe 83F83D20 		strb	r2, [r3, #61]
2175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4962              		.loc 1 2175 20
 4963 0202 7B68     		ldr	r3, [r7, #4]
 4964 0204 2022     		movs	r2, #32
 4965 0206 83F83E20 		strb	r2, [r3, #62]
2176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4966              		.loc 1 2176 26
 4967 020a 7B68     		ldr	r3, [r7, #4]
 4968 020c 0022     		movs	r2, #0
 4969 020e 1A63     		str	r2, [r3, #48]
2177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call registered Abort complete callback */
ARM GAS  /tmp/cceCIUcs.s 			page 147


2181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 4970              		.loc 1 2184 5
 4971 0210 7868     		ldr	r0, [r7, #4]
 4972 0212 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4973              	.L266:
2185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 4974              		.loc 1 2188 10
 4975 0216 0023     		movs	r3, #0
2189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4976              		.loc 1 2189 1
 4977 0218 1846     		mov	r0, r3
 4978 021a 8837     		adds	r7, r7, #136
 4979              	.LCFI118:
 4980              		.cfi_def_cfa_offset 8
 4981 021c BD46     		mov	sp, r7
 4982              	.LCFI119:
 4983              		.cfi_def_cfa_register 13
 4984              		@ sp needed
 4985 021e 80BD     		pop	{r7, pc}
 4986              	.L269:
 4987              		.align	2
 4988              	.L268:
 4989 0220 00000000 		.word	UART_DMATxAbortCallback
 4990 0224 00000000 		.word	UART_DMARxAbortCallback
 4991              		.cfi_endproc
 4992              	.LFE152:
 4994              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 4995              		.align	1
 4996              		.global	HAL_UART_AbortTransmit_IT
 4997              		.syntax unified
 4998              		.thumb
 4999              		.thumb_func
 5000              		.fpu fpv4-sp-d16
 5002              	HAL_UART_AbortTransmit_IT:
 5003              	.LFB153:
2190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
2196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
2200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cceCIUcs.s 			page 148


2206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5004              		.loc 1 2206 1
 5005              		.cfi_startproc
 5006              		@ args = 0, pretend = 0, frame = 56
 5007              		@ frame_needed = 1, uses_anonymous_args = 0
 5008 0000 80B5     		push	{r7, lr}
 5009              	.LCFI120:
 5010              		.cfi_def_cfa_offset 8
 5011              		.cfi_offset 7, -8
 5012              		.cfi_offset 14, -4
 5013 0002 8EB0     		sub	sp, sp, #56
 5014              	.LCFI121:
 5015              		.cfi_def_cfa_offset 64
 5016 0004 00AF     		add	r7, sp, #0
 5017              	.LCFI122:
 5018              		.cfi_def_cfa_register 7
 5019 0006 7860     		str	r0, [r7, #4]
 5020              	.L273:
 5021              	.LBB469:
2207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 5022              		.loc 1 2208 3 discriminator 1
 5023 0008 7B68     		ldr	r3, [r7, #4]
 5024 000a 1B68     		ldr	r3, [r3]
 5025 000c 0C33     		adds	r3, r3, #12
 5026 000e 3B62     		str	r3, [r7, #32]
 5027              	.LBB470:
 5028              	.LBB471:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5029              		.loc 2 1072 4 discriminator 1
 5030 0010 3B6A     		ldr	r3, [r7, #32]
 5031              		.syntax unified
 5032              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5033 0012 53E8003F 		ldrex r3, [r3]
 5034              	@ 0 "" 2
 5035              		.thumb
 5036              		.syntax unified
 5037 0016 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5038              		.loc 2 1073 10 discriminator 1
 5039 0018 FB69     		ldr	r3, [r7, #28]
 5040              	.LBE471:
 5041              	.LBE470:
 5042              		.loc 1 2208 3 discriminator 1
 5043 001a 23F0C003 		bic	r3, r3, #192
 5044 001e 7B63     		str	r3, [r7, #52]
 5045 0020 7B68     		ldr	r3, [r7, #4]
 5046 0022 1B68     		ldr	r3, [r3]
 5047 0024 0C33     		adds	r3, r3, #12
 5048 0026 7A6B     		ldr	r2, [r7, #52]
 5049 0028 FA62     		str	r2, [r7, #44]
 5050 002a BB62     		str	r3, [r7, #40]
 5051              	.LBB472:
 5052              	.LBB473:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5053              		.loc 2 1123 4 discriminator 1
 5054 002c B96A     		ldr	r1, [r7, #40]
ARM GAS  /tmp/cceCIUcs.s 			page 149


 5055 002e FA6A     		ldr	r2, [r7, #44]
 5056              		.syntax unified
 5057              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5058 0030 41E80023 		strex r3, r2, [r1]
 5059              	@ 0 "" 2
 5060              		.thumb
 5061              		.syntax unified
 5062 0034 7B62     		str	r3, [r7, #36]
 5063              		.loc 2 1124 10 discriminator 1
 5064 0036 7B6A     		ldr	r3, [r7, #36]
 5065              	.LBE473:
 5066              	.LBE472:
 5067              		.loc 1 2208 3 discriminator 1
 5068 0038 002B     		cmp	r3, #0
 5069 003a E5D1     		bne	.L273
 5070              	.LBE469:
2209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 5071              		.loc 1 2211 7
 5072 003c 7B68     		ldr	r3, [r7, #4]
 5073 003e 1B68     		ldr	r3, [r3]
 5074 0040 5B69     		ldr	r3, [r3, #20]
 5075 0042 03F08003 		and	r3, r3, #128
 5076              		.loc 1 2211 6
 5077 0046 802B     		cmp	r3, #128
 5078 0048 3CD1     		bne	.L274
 5079              	.L277:
 5080              	.LBB474:
2212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 5081              		.loc 1 2213 5 discriminator 1
 5082 004a 7B68     		ldr	r3, [r7, #4]
 5083 004c 1B68     		ldr	r3, [r3]
 5084 004e 1433     		adds	r3, r3, #20
 5085 0050 FB60     		str	r3, [r7, #12]
 5086              	.LBB475:
 5087              	.LBB476:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5088              		.loc 2 1072 4 discriminator 1
 5089 0052 FB68     		ldr	r3, [r7, #12]
 5090              		.syntax unified
 5091              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5092 0054 53E8003F 		ldrex r3, [r3]
 5093              	@ 0 "" 2
 5094              		.thumb
 5095              		.syntax unified
 5096 0058 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5097              		.loc 2 1073 10 discriminator 1
 5098 005a BB68     		ldr	r3, [r7, #8]
 5099              	.LBE476:
 5100              	.LBE475:
 5101              		.loc 1 2213 5 discriminator 1
 5102 005c 23F08003 		bic	r3, r3, #128
 5103 0060 3B63     		str	r3, [r7, #48]
 5104 0062 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 150


 5105 0064 1B68     		ldr	r3, [r3]
 5106 0066 1433     		adds	r3, r3, #20
 5107 0068 3A6B     		ldr	r2, [r7, #48]
 5108 006a BA61     		str	r2, [r7, #24]
 5109 006c 7B61     		str	r3, [r7, #20]
 5110              	.LBB477:
 5111              	.LBB478:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5112              		.loc 2 1123 4 discriminator 1
 5113 006e 7969     		ldr	r1, [r7, #20]
 5114 0070 BA69     		ldr	r2, [r7, #24]
 5115              		.syntax unified
 5116              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5117 0072 41E80023 		strex r3, r2, [r1]
 5118              	@ 0 "" 2
 5119              		.thumb
 5120              		.syntax unified
 5121 0076 3B61     		str	r3, [r7, #16]
 5122              		.loc 2 1124 10 discriminator 1
 5123 0078 3B69     		ldr	r3, [r7, #16]
 5124              	.LBE478:
 5125              	.LBE477:
 5126              		.loc 1 2213 5 discriminator 1
 5127 007a 002B     		cmp	r3, #0
 5128 007c E5D1     		bne	.L277
 5129              	.LBE474:
2214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
2216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 5130              		.loc 1 2216 14
 5131 007e 7B68     		ldr	r3, [r7, #4]
 5132 0080 5B6B     		ldr	r3, [r3, #52]
 5133              		.loc 1 2216 8
 5134 0082 002B     		cmp	r3, #0
 5135 0084 13D0     		beq	.L278
2217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 5136              		.loc 1 2220 12
 5137 0086 7B68     		ldr	r3, [r7, #4]
 5138 0088 5B6B     		ldr	r3, [r3, #52]
 5139              		.loc 1 2220 40
 5140 008a 164A     		ldr	r2, .L281
 5141 008c 1A65     		str	r2, [r3, #80]
2221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA TX */
2223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 5142              		.loc 1 2223 11
 5143 008e 7B68     		ldr	r3, [r7, #4]
 5144 0090 5B6B     		ldr	r3, [r3, #52]
 5145 0092 1846     		mov	r0, r3
 5146 0094 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5147 0098 0346     		mov	r3, r0
 5148              		.loc 1 2223 10
 5149 009a 002B     		cmp	r3, #0
 5150 009c 1CD0     		beq	.L279
ARM GAS  /tmp/cceCIUcs.s 			page 151


2224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 5151              		.loc 1 2226 14
 5152 009e 7B68     		ldr	r3, [r7, #4]
 5153 00a0 5B6B     		ldr	r3, [r3, #52]
 5154              		.loc 1 2226 22
 5155 00a2 1B6D     		ldr	r3, [r3, #80]
 5156              		.loc 1 2226 47
 5157 00a4 7A68     		ldr	r2, [r7, #4]
 5158 00a6 526B     		ldr	r2, [r2, #52]
 5159              		.loc 1 2226 9
 5160 00a8 1046     		mov	r0, r2
 5161 00aa 9847     		blx	r3
 5162              	.LVL0:
 5163 00ac 14E0     		b	.L279
 5164              	.L278:
2227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Reset Tx transfer counter */
2232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 5165              		.loc 1 2232 26
 5166 00ae 7B68     		ldr	r3, [r7, #4]
 5167 00b0 0022     		movs	r2, #0
 5168 00b2 DA84     		strh	r2, [r3, #38]	@ movhi
2233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 5169              		.loc 1 2235 21
 5170 00b4 7B68     		ldr	r3, [r7, #4]
 5171 00b6 2022     		movs	r2, #32
 5172 00b8 83F83D20 		strb	r2, [r3, #61]
2236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 5173              		.loc 1 2243 7
 5174 00bc 7868     		ldr	r0, [r7, #4]
 5175 00be FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 5176 00c2 09E0     		b	.L279
 5177              	.L274:
2244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Tx transfer counter */
2250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 5178              		.loc 1 2250 24
 5179 00c4 7B68     		ldr	r3, [r7, #4]
 5180 00c6 0022     		movs	r2, #0
ARM GAS  /tmp/cceCIUcs.s 			page 152


 5181 00c8 DA84     		strh	r2, [r3, #38]	@ movhi
2251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 5182              		.loc 1 2253 19
 5183 00ca 7B68     		ldr	r3, [r7, #4]
 5184 00cc 2022     		movs	r2, #32
 5185 00ce 83F83D20 		strb	r2, [r3, #61]
2254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 5186              		.loc 1 2261 5
 5187 00d2 7868     		ldr	r0, [r7, #4]
 5188 00d4 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 5189              	.L279:
2262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 5190              		.loc 1 2265 10
 5191 00d8 0023     		movs	r3, #0
2266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5192              		.loc 1 2266 1
 5193 00da 1846     		mov	r0, r3
 5194 00dc 3837     		adds	r7, r7, #56
 5195              	.LCFI123:
 5196              		.cfi_def_cfa_offset 8
 5197 00de BD46     		mov	sp, r7
 5198              	.LCFI124:
 5199              		.cfi_def_cfa_register 13
 5200              		@ sp needed
 5201 00e0 80BD     		pop	{r7, pc}
 5202              	.L282:
 5203 00e2 00BF     		.align	2
 5204              	.L281:
 5205 00e4 00000000 		.word	UART_DMATxOnlyAbortCallback
 5206              		.cfi_endproc
 5207              	.LFE153:
 5209              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 5210              		.align	1
 5211              		.global	HAL_UART_AbortReceive_IT
 5212              		.syntax unified
 5213              		.thumb
 5214              		.thumb_func
 5215              		.fpu fpv4-sp-d16
 5217              	HAL_UART_AbortReceive_IT:
 5218              	.LFB154:
2267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
ARM GAS  /tmp/cceCIUcs.s 			page 153


2272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
2273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
2277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5219              		.loc 1 2283 1
 5220              		.cfi_startproc
 5221              		@ args = 0, pretend = 0, frame = 104
 5222              		@ frame_needed = 1, uses_anonymous_args = 0
 5223 0000 80B5     		push	{r7, lr}
 5224              	.LCFI125:
 5225              		.cfi_def_cfa_offset 8
 5226              		.cfi_offset 7, -8
 5227              		.cfi_offset 14, -4
 5228 0002 9AB0     		sub	sp, sp, #104
 5229              	.LCFI126:
 5230              		.cfi_def_cfa_offset 112
 5231 0004 00AF     		add	r7, sp, #0
 5232              	.LCFI127:
 5233              		.cfi_def_cfa_register 7
 5234 0006 7860     		str	r0, [r7, #4]
 5235              	.L286:
 5236              	.LBB479:
2284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5237              		.loc 1 2285 3 discriminator 1
 5238 0008 7B68     		ldr	r3, [r7, #4]
 5239 000a 1B68     		ldr	r3, [r3]
 5240 000c 0C33     		adds	r3, r3, #12
 5241 000e BB64     		str	r3, [r7, #72]
 5242              	.LBB480:
 5243              	.LBB481:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5244              		.loc 2 1072 4 discriminator 1
 5245 0010 BB6C     		ldr	r3, [r7, #72]
 5246              		.syntax unified
 5247              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5248 0012 53E8003F 		ldrex r3, [r3]
 5249              	@ 0 "" 2
 5250              		.thumb
 5251              		.syntax unified
 5252 0016 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5253              		.loc 2 1073 10 discriminator 1
 5254 0018 7B6C     		ldr	r3, [r7, #68]
 5255              	.LBE481:
 5256              	.LBE480:
 5257              		.loc 1 2285 3 discriminator 1
 5258 001a 23F49073 		bic	r3, r3, #288
 5259 001e 7B66     		str	r3, [r7, #100]
ARM GAS  /tmp/cceCIUcs.s 			page 154


 5260 0020 7B68     		ldr	r3, [r7, #4]
 5261 0022 1B68     		ldr	r3, [r3]
 5262 0024 0C33     		adds	r3, r3, #12
 5263 0026 7A6E     		ldr	r2, [r7, #100]
 5264 0028 7A65     		str	r2, [r7, #84]
 5265 002a 3B65     		str	r3, [r7, #80]
 5266              	.LBB482:
 5267              	.LBB483:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5268              		.loc 2 1123 4 discriminator 1
 5269 002c 396D     		ldr	r1, [r7, #80]
 5270 002e 7A6D     		ldr	r2, [r7, #84]
 5271              		.syntax unified
 5272              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5273 0030 41E80023 		strex r3, r2, [r1]
 5274              	@ 0 "" 2
 5275              		.thumb
 5276              		.syntax unified
 5277 0034 FB64     		str	r3, [r7, #76]
 5278              		.loc 2 1124 10 discriminator 1
 5279 0036 FB6C     		ldr	r3, [r7, #76]
 5280              	.LBE483:
 5281              	.LBE482:
 5282              		.loc 1 2285 3 discriminator 1
 5283 0038 002B     		cmp	r3, #0
 5284 003a E5D1     		bne	.L286
 5285              	.L289:
 5286              	.LBE479:
 5287              	.LBB484:
2286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5288              		.loc 1 2286 3 discriminator 1
 5289 003c 7B68     		ldr	r3, [r7, #4]
 5290 003e 1B68     		ldr	r3, [r3]
 5291 0040 1433     		adds	r3, r3, #20
 5292 0042 7B63     		str	r3, [r7, #52]
 5293              	.LBB485:
 5294              	.LBB486:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5295              		.loc 2 1072 4 discriminator 1
 5296 0044 7B6B     		ldr	r3, [r7, #52]
 5297              		.syntax unified
 5298              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5299 0046 53E8003F 		ldrex r3, [r3]
 5300              	@ 0 "" 2
 5301              		.thumb
 5302              		.syntax unified
 5303 004a 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5304              		.loc 2 1073 10 discriminator 1
 5305 004c 3B6B     		ldr	r3, [r7, #48]
 5306              	.LBE486:
 5307              	.LBE485:
 5308              		.loc 1 2286 3 discriminator 1
 5309 004e 23F00103 		bic	r3, r3, #1
 5310 0052 3B66     		str	r3, [r7, #96]
 5311 0054 7B68     		ldr	r3, [r7, #4]
 5312 0056 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 155


 5313 0058 1433     		adds	r3, r3, #20
 5314 005a 3A6E     		ldr	r2, [r7, #96]
 5315 005c 3A64     		str	r2, [r7, #64]
 5316 005e FB63     		str	r3, [r7, #60]
 5317              	.LBB487:
 5318              	.LBB488:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5319              		.loc 2 1123 4 discriminator 1
 5320 0060 F96B     		ldr	r1, [r7, #60]
 5321 0062 3A6C     		ldr	r2, [r7, #64]
 5322              		.syntax unified
 5323              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5324 0064 41E80023 		strex r3, r2, [r1]
 5325              	@ 0 "" 2
 5326              		.thumb
 5327              		.syntax unified
 5328 0068 BB63     		str	r3, [r7, #56]
 5329              		.loc 2 1124 10 discriminator 1
 5330 006a BB6B     		ldr	r3, [r7, #56]
 5331              	.LBE488:
 5332              	.LBE487:
 5333              		.loc 1 2286 3 discriminator 1
 5334 006c 002B     		cmp	r3, #0
 5335 006e E5D1     		bne	.L289
 5336              	.LBE484:
2287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5337              		.loc 1 2289 12
 5338 0070 7B68     		ldr	r3, [r7, #4]
 5339 0072 1B6B     		ldr	r3, [r3, #48]
 5340              		.loc 1 2289 6
 5341 0074 012B     		cmp	r3, #1
 5342 0076 19D1     		bne	.L290
 5343              	.L293:
 5344              	.LBB489:
2290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 5345              		.loc 1 2291 5 discriminator 1
 5346 0078 7B68     		ldr	r3, [r7, #4]
 5347 007a 1B68     		ldr	r3, [r3]
 5348 007c 0C33     		adds	r3, r3, #12
 5349 007e 3B62     		str	r3, [r7, #32]
 5350              	.LBB490:
 5351              	.LBB491:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5352              		.loc 2 1072 4 discriminator 1
 5353 0080 3B6A     		ldr	r3, [r7, #32]
 5354              		.syntax unified
 5355              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5356 0082 53E8003F 		ldrex r3, [r3]
 5357              	@ 0 "" 2
 5358              		.thumb
 5359              		.syntax unified
 5360 0086 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5361              		.loc 2 1073 10 discriminator 1
ARM GAS  /tmp/cceCIUcs.s 			page 156


 5362 0088 FB69     		ldr	r3, [r7, #28]
 5363              	.LBE491:
 5364              	.LBE490:
 5365              		.loc 1 2291 5 discriminator 1
 5366 008a 23F01003 		bic	r3, r3, #16
 5367 008e FB65     		str	r3, [r7, #92]
 5368 0090 7B68     		ldr	r3, [r7, #4]
 5369 0092 1B68     		ldr	r3, [r3]
 5370 0094 0C33     		adds	r3, r3, #12
 5371 0096 FA6D     		ldr	r2, [r7, #92]
 5372 0098 FA62     		str	r2, [r7, #44]
 5373 009a BB62     		str	r3, [r7, #40]
 5374              	.LBB492:
 5375              	.LBB493:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5376              		.loc 2 1123 4 discriminator 1
 5377 009c B96A     		ldr	r1, [r7, #40]
 5378 009e FA6A     		ldr	r2, [r7, #44]
 5379              		.syntax unified
 5380              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5381 00a0 41E80023 		strex r3, r2, [r1]
 5382              	@ 0 "" 2
 5383              		.thumb
 5384              		.syntax unified
 5385 00a4 7B62     		str	r3, [r7, #36]
 5386              		.loc 2 1124 10 discriminator 1
 5387 00a6 7B6A     		ldr	r3, [r7, #36]
 5388              	.LBE493:
 5389              	.LBE492:
 5390              		.loc 1 2291 5 discriminator 1
 5391 00a8 002B     		cmp	r3, #0
 5392 00aa E5D1     		bne	.L293
 5393              	.L290:
 5394              	.LBE489:
2292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5395              		.loc 1 2295 7
 5396 00ac 7B68     		ldr	r3, [r7, #4]
 5397 00ae 1B68     		ldr	r3, [r3]
 5398 00b0 5B69     		ldr	r3, [r3, #20]
 5399 00b2 03F04003 		and	r3, r3, #64
 5400              		.loc 1 2295 6
 5401 00b6 402B     		cmp	r3, #64
 5402 00b8 3FD1     		bne	.L294
 5403              	.L297:
 5404              	.LBB494:
2296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5405              		.loc 1 2297 5 discriminator 1
 5406 00ba 7B68     		ldr	r3, [r7, #4]
 5407 00bc 1B68     		ldr	r3, [r3]
 5408 00be 1433     		adds	r3, r3, #20
 5409 00c0 FB60     		str	r3, [r7, #12]
 5410              	.LBB495:
 5411              	.LBB496:
ARM GAS  /tmp/cceCIUcs.s 			page 157


1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5412              		.loc 2 1072 4 discriminator 1
 5413 00c2 FB68     		ldr	r3, [r7, #12]
 5414              		.syntax unified
 5415              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5416 00c4 53E8003F 		ldrex r3, [r3]
 5417              	@ 0 "" 2
 5418              		.thumb
 5419              		.syntax unified
 5420 00c8 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5421              		.loc 2 1073 10 discriminator 1
 5422 00ca BB68     		ldr	r3, [r7, #8]
 5423              	.LBE496:
 5424              	.LBE495:
 5425              		.loc 1 2297 5 discriminator 1
 5426 00cc 23F04003 		bic	r3, r3, #64
 5427 00d0 BB65     		str	r3, [r7, #88]
 5428 00d2 7B68     		ldr	r3, [r7, #4]
 5429 00d4 1B68     		ldr	r3, [r3]
 5430 00d6 1433     		adds	r3, r3, #20
 5431 00d8 BA6D     		ldr	r2, [r7, #88]
 5432 00da BA61     		str	r2, [r7, #24]
 5433 00dc 7B61     		str	r3, [r7, #20]
 5434              	.LBB497:
 5435              	.LBB498:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5436              		.loc 2 1123 4 discriminator 1
 5437 00de 7969     		ldr	r1, [r7, #20]
 5438 00e0 BA69     		ldr	r2, [r7, #24]
 5439              		.syntax unified
 5440              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5441 00e2 41E80023 		strex r3, r2, [r1]
 5442              	@ 0 "" 2
 5443              		.thumb
 5444              		.syntax unified
 5445 00e6 3B61     		str	r3, [r7, #16]
 5446              		.loc 2 1124 10 discriminator 1
 5447 00e8 3B69     		ldr	r3, [r7, #16]
 5448              	.LBE498:
 5449              	.LBE497:
 5450              		.loc 1 2297 5 discriminator 1
 5451 00ea 002B     		cmp	r3, #0
 5452 00ec E5D1     		bne	.L297
 5453              	.LBE494:
2298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
2300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 5454              		.loc 1 2300 14
 5455 00ee 7B68     		ldr	r3, [r7, #4]
 5456 00f0 9B6B     		ldr	r3, [r3, #56]
 5457              		.loc 1 2300 8
 5458 00f2 002B     		cmp	r3, #0
 5459 00f4 13D0     		beq	.L298
2301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
ARM GAS  /tmp/cceCIUcs.s 			page 158


2304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 5460              		.loc 1 2304 12
 5461 00f6 7B68     		ldr	r3, [r7, #4]
 5462 00f8 9B6B     		ldr	r3, [r3, #56]
 5463              		.loc 1 2304 40
 5464 00fa 194A     		ldr	r2, .L301
 5465 00fc 1A65     		str	r2, [r3, #80]
2305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA RX */
2307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 5466              		.loc 1 2307 11
 5467 00fe 7B68     		ldr	r3, [r7, #4]
 5468 0100 9B6B     		ldr	r3, [r3, #56]
 5469 0102 1846     		mov	r0, r3
 5470 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5471 0108 0346     		mov	r3, r0
 5472              		.loc 1 2307 10
 5473 010a 002B     		cmp	r3, #0
 5474 010c 22D0     		beq	.L299
2308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 5475              		.loc 1 2310 14
 5476 010e 7B68     		ldr	r3, [r7, #4]
 5477 0110 9B6B     		ldr	r3, [r3, #56]
 5478              		.loc 1 2310 22
 5479 0112 1B6D     		ldr	r3, [r3, #80]
 5480              		.loc 1 2310 47
 5481 0114 7A68     		ldr	r2, [r7, #4]
 5482 0116 926B     		ldr	r2, [r2, #56]
 5483              		.loc 1 2310 9
 5484 0118 1046     		mov	r0, r2
 5485 011a 9847     		blx	r3
 5486              	.LVL1:
 5487 011c 1AE0     		b	.L299
 5488              	.L298:
2311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Reset Rx transfer counter */
2316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 5489              		.loc 1 2316 26
 5490 011e 7B68     		ldr	r3, [r7, #4]
 5491 0120 0022     		movs	r2, #0
 5492 0122 DA85     		strh	r2, [r3, #46]	@ movhi
2317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 5493              		.loc 1 2319 22
 5494 0124 7B68     		ldr	r3, [r7, #4]
 5495 0126 2022     		movs	r2, #32
 5496 0128 83F83E20 		strb	r2, [r3, #62]
2320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5497              		.loc 1 2320 28
 5498 012c 7B68     		ldr	r3, [r7, #4]
 5499 012e 0022     		movs	r2, #0
ARM GAS  /tmp/cceCIUcs.s 			page 159


 5500 0130 1A63     		str	r2, [r3, #48]
2321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 5501              		.loc 1 2328 7
 5502 0132 7868     		ldr	r0, [r7, #4]
 5503 0134 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 5504 0138 0CE0     		b	.L299
 5505              	.L294:
2329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Rx transfer counter */
2335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 5506              		.loc 1 2335 24
 5507 013a 7B68     		ldr	r3, [r7, #4]
 5508 013c 0022     		movs	r2, #0
 5509 013e DA85     		strh	r2, [r3, #46]	@ movhi
2336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5510              		.loc 1 2338 20
 5511 0140 7B68     		ldr	r3, [r7, #4]
 5512 0142 2022     		movs	r2, #32
 5513 0144 83F83E20 		strb	r2, [r3, #62]
2339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5514              		.loc 1 2339 26
 5515 0148 7B68     		ldr	r3, [r7, #4]
 5516 014a 0022     		movs	r2, #0
 5517 014c 1A63     		str	r2, [r3, #48]
2340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 5518              		.loc 1 2347 5
 5519 014e 7868     		ldr	r0, [r7, #4]
 5520 0150 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 5521              	.L299:
2348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 5522              		.loc 1 2351 10
 5523 0154 0023     		movs	r3, #0
2352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5524              		.loc 1 2352 1
ARM GAS  /tmp/cceCIUcs.s 			page 160


 5525 0156 1846     		mov	r0, r3
 5526 0158 6837     		adds	r7, r7, #104
 5527              	.LCFI128:
 5528              		.cfi_def_cfa_offset 8
 5529 015a BD46     		mov	sp, r7
 5530              	.LCFI129:
 5531              		.cfi_def_cfa_register 13
 5532              		@ sp needed
 5533 015c 80BD     		pop	{r7, pc}
 5534              	.L302:
 5535 015e 00BF     		.align	2
 5536              	.L301:
 5537 0160 00000000 		.word	UART_DMARxOnlyAbortCallback
 5538              		.cfi_endproc
 5539              	.LFE154:
 5541              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 5542              		.align	1
 5543              		.global	HAL_UART_IRQHandler
 5544              		.syntax unified
 5545              		.thumb
 5546              		.thumb_func
 5547              		.fpu fpv4-sp-d16
 5549              	HAL_UART_IRQHandler:
 5550              	.LFB155:
2353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5551              		.loc 1 2361 1
 5552              		.cfi_startproc
 5553              		@ args = 0, pretend = 0, frame = 232
 5554              		@ frame_needed = 1, uses_anonymous_args = 0
 5555 0000 80B5     		push	{r7, lr}
 5556              	.LCFI130:
 5557              		.cfi_def_cfa_offset 8
 5558              		.cfi_offset 7, -8
 5559              		.cfi_offset 14, -4
 5560 0002 BAB0     		sub	sp, sp, #232
 5561              	.LCFI131:
 5562              		.cfi_def_cfa_offset 240
 5563 0004 00AF     		add	r7, sp, #0
 5564              	.LCFI132:
 5565              		.cfi_def_cfa_register 7
 5566 0006 7860     		str	r0, [r7, #4]
2362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 5567              		.loc 1 2362 25
 5568 0008 7B68     		ldr	r3, [r7, #4]
 5569 000a 1B68     		ldr	r3, [r3]
 5570              		.loc 1 2362 12
 5571 000c 1B68     		ldr	r3, [r3]
 5572 000e C7F8E430 		str	r3, [r7, #228]
2363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
ARM GAS  /tmp/cceCIUcs.s 			page 161


 5573              		.loc 1 2363 25
 5574 0012 7B68     		ldr	r3, [r7, #4]
 5575 0014 1B68     		ldr	r3, [r3]
 5576              		.loc 1 2363 12
 5577 0016 DB68     		ldr	r3, [r3, #12]
 5578 0018 C7F8E030 		str	r3, [r7, #224]
2364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 5579              		.loc 1 2364 25
 5580 001c 7B68     		ldr	r3, [r7, #4]
 5581 001e 1B68     		ldr	r3, [r3]
 5582              		.loc 1 2364 12
 5583 0020 5B69     		ldr	r3, [r3, #20]
 5584 0022 C7F8DC30 		str	r3, [r7, #220]
2365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 5585              		.loc 1 2365 12
 5586 0026 0023     		movs	r3, #0
 5587 0028 C7F8D830 		str	r3, [r7, #216]
2366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 5588              		.loc 1 2366 12
 5589 002c 0023     		movs	r3, #0
 5590 002e C7F8D430 		str	r3, [r7, #212]
2367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If no error occurs */
2369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 5591              		.loc 1 2369 14
 5592 0032 D7F8E430 		ldr	r3, [r7, #228]
 5593 0036 03F00F03 		and	r3, r3, #15
 5594 003a C7F8D830 		str	r3, [r7, #216]
2370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (errorflags == RESET)
 5595              		.loc 1 2370 6
 5596 003e D7F8D830 		ldr	r3, [r7, #216]
 5597 0042 002B     		cmp	r3, #0
 5598 0044 0FD1     		bne	.L304
2371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 5599              		.loc 1 2373 20
 5600 0046 D7F8E430 		ldr	r3, [r7, #228]
 5601 004a 03F02003 		and	r3, r3, #32
 5602              		.loc 1 2373 8
 5603 004e 002B     		cmp	r3, #0
 5604 0050 09D0     		beq	.L304
 5605              		.loc 1 2373 59 discriminator 1
 5606 0052 D7F8E030 		ldr	r3, [r7, #224]
 5607 0056 03F02003 		and	r3, r3, #32
 5608              		.loc 1 2373 47 discriminator 1
 5609 005a 002B     		cmp	r3, #0
 5610 005c 03D0     		beq	.L304
2374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       UART_Receive_IT(huart);
 5611              		.loc 1 2375 7
 5612 005e 7868     		ldr	r0, [r7, #4]
 5613 0060 FFF7FEFF 		bl	UART_Receive_IT
2376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 5614              		.loc 1 2376 7
 5615 0064 56E2     		b	.L303
 5616              	.L304:
ARM GAS  /tmp/cceCIUcs.s 			page 162


2377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If some errors occur */
2381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 5617              		.loc 1 2381 6
 5618 0066 D7F8D830 		ldr	r3, [r7, #216]
 5619 006a 002B     		cmp	r3, #0
 5620 006c 00F0DE80 		beq	.L306
 5621              		.loc 1 2381 42 discriminator 1
 5622 0070 D7F8DC30 		ldr	r3, [r7, #220]
 5623 0074 03F00103 		and	r3, r3, #1
 5624              		.loc 1 2381 29 discriminator 1
 5625 0078 002B     		cmp	r3, #0
 5626 007a 06D1     		bne	.L307
2382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                 || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 5627              		.loc 1 2382 45
 5628 007c D7F8E030 		ldr	r3, [r7, #224]
 5629 0080 03F49073 		and	r3, r3, #288
 5630              		.loc 1 2382 33
 5631 0084 002B     		cmp	r3, #0
 5632 0086 00F0D180 		beq	.L306
 5633              	.L307:
2383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 5634              		.loc 1 2385 20
 5635 008a D7F8E430 		ldr	r3, [r7, #228]
 5636 008e 03F00103 		and	r3, r3, #1
 5637              		.loc 1 2385 8
 5638 0092 002B     		cmp	r3, #0
 5639 0094 0BD0     		beq	.L308
 5640              		.loc 1 2385 57 discriminator 1
 5641 0096 D7F8E030 		ldr	r3, [r7, #224]
 5642 009a 03F48073 		and	r3, r3, #256
 5643              		.loc 1 2385 45 discriminator 1
 5644 009e 002B     		cmp	r3, #0
 5645 00a0 05D0     		beq	.L308
2386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 5646              		.loc 1 2387 24
 5647 00a2 7B68     		ldr	r3, [r7, #4]
 5648 00a4 1B6C     		ldr	r3, [r3, #64]
 5649 00a6 43F00102 		orr	r2, r3, #1
 5650 00aa 7B68     		ldr	r3, [r7, #4]
 5651 00ac 1A64     		str	r2, [r3, #64]
 5652              	.L308:
2388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 5653              		.loc 1 2391 20
 5654 00ae D7F8E430 		ldr	r3, [r7, #228]
 5655 00b2 03F00403 		and	r3, r3, #4
 5656              		.loc 1 2391 8
 5657 00b6 002B     		cmp	r3, #0
 5658 00b8 0BD0     		beq	.L309
ARM GAS  /tmp/cceCIUcs.s 			page 163


 5659              		.loc 1 2391 57 discriminator 1
 5660 00ba D7F8DC30 		ldr	r3, [r7, #220]
 5661 00be 03F00103 		and	r3, r3, #1
 5662              		.loc 1 2391 45 discriminator 1
 5663 00c2 002B     		cmp	r3, #0
 5664 00c4 05D0     		beq	.L309
2392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 5665              		.loc 1 2393 24
 5666 00c6 7B68     		ldr	r3, [r7, #4]
 5667 00c8 1B6C     		ldr	r3, [r3, #64]
 5668 00ca 43F00202 		orr	r2, r3, #2
 5669 00ce 7B68     		ldr	r3, [r7, #4]
 5670 00d0 1A64     		str	r2, [r3, #64]
 5671              	.L309:
2394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 5672              		.loc 1 2397 20
 5673 00d2 D7F8E430 		ldr	r3, [r7, #228]
 5674 00d6 03F00203 		and	r3, r3, #2
 5675              		.loc 1 2397 8
 5676 00da 002B     		cmp	r3, #0
 5677 00dc 0BD0     		beq	.L310
 5678              		.loc 1 2397 57 discriminator 1
 5679 00de D7F8DC30 		ldr	r3, [r7, #220]
 5680 00e2 03F00103 		and	r3, r3, #1
 5681              		.loc 1 2397 45 discriminator 1
 5682 00e6 002B     		cmp	r3, #0
 5683 00e8 05D0     		beq	.L310
2398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 5684              		.loc 1 2399 24
 5685 00ea 7B68     		ldr	r3, [r7, #4]
 5686 00ec 1B6C     		ldr	r3, [r3, #64]
 5687 00ee 43F00402 		orr	r2, r3, #4
 5688 00f2 7B68     		ldr	r3, [r7, #4]
 5689 00f4 1A64     		str	r2, [r3, #64]
 5690              	.L310:
2400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 5691              		.loc 1 2403 20
 5692 00f6 D7F8E430 		ldr	r3, [r7, #228]
 5693 00fa 03F00803 		and	r3, r3, #8
 5694              		.loc 1 2403 8
 5695 00fe 002B     		cmp	r3, #0
 5696 0100 11D0     		beq	.L311
 5697              		.loc 1 2403 59 discriminator 1
 5698 0102 D7F8E030 		ldr	r3, [r7, #224]
 5699 0106 03F02003 		and	r3, r3, #32
 5700              		.loc 1 2403 46 discriminator 1
 5701 010a 002B     		cmp	r3, #0
 5702 010c 05D1     		bne	.L312
2404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                                  || ((cr3its & USART_CR3_EIE) != RESET)))
ARM GAS  /tmp/cceCIUcs.s 			page 164


 5703              		.loc 1 2404 62
 5704 010e D7F8DC30 		ldr	r3, [r7, #220]
 5705 0112 03F00103 		and	r3, r3, #1
 5706              		.loc 1 2404 50
 5707 0116 002B     		cmp	r3, #0
 5708 0118 05D0     		beq	.L311
 5709              	.L312:
2405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 5710              		.loc 1 2406 24
 5711 011a 7B68     		ldr	r3, [r7, #4]
 5712 011c 1B6C     		ldr	r3, [r3, #64]
 5713 011e 43F00802 		orr	r2, r3, #8
 5714 0122 7B68     		ldr	r3, [r7, #4]
 5715 0124 1A64     		str	r2, [r3, #64]
 5716              	.L311:
2407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 5717              		.loc 1 2410 14
 5718 0126 7B68     		ldr	r3, [r7, #4]
 5719 0128 1B6C     		ldr	r3, [r3, #64]
 5720              		.loc 1 2410 8
 5721 012a 002B     		cmp	r3, #0
 5722 012c 00F0ED81 		beq	.L350
2411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 5723              		.loc 1 2413 22
 5724 0130 D7F8E430 		ldr	r3, [r7, #228]
 5725 0134 03F02003 		and	r3, r3, #32
 5726              		.loc 1 2413 10
 5727 0138 002B     		cmp	r3, #0
 5728 013a 08D0     		beq	.L314
 5729              		.loc 1 2413 61 discriminator 1
 5730 013c D7F8E030 		ldr	r3, [r7, #224]
 5731 0140 03F02003 		and	r3, r3, #32
 5732              		.loc 1 2413 49 discriminator 1
 5733 0144 002B     		cmp	r3, #0
 5734 0146 02D0     		beq	.L314
2414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         UART_Receive_IT(huart);
 5735              		.loc 1 2415 9
 5736 0148 7868     		ldr	r0, [r7, #4]
 5737 014a FFF7FEFF 		bl	UART_Receive_IT
 5738              	.L314:
2416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          consider error as blocking */
2420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 5739              		.loc 1 2420 20
 5740 014e 7B68     		ldr	r3, [r7, #4]
 5741 0150 1B68     		ldr	r3, [r3]
 5742 0152 5B69     		ldr	r3, [r3, #20]
 5743 0154 03F04003 		and	r3, r3, #64
ARM GAS  /tmp/cceCIUcs.s 			page 165


 5744 0158 402B     		cmp	r3, #64
 5745 015a 0CBF     		ite	eq
 5746 015c 0123     		moveq	r3, #1
 5747 015e 0023     		movne	r3, #0
 5748 0160 DBB2     		uxtb	r3, r3
 5749              		.loc 1 2420 18
 5750 0162 C7F8D430 		str	r3, [r7, #212]
2421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 5751              		.loc 1 2421 18
 5752 0166 7B68     		ldr	r3, [r7, #4]
 5753 0168 1B6C     		ldr	r3, [r3, #64]
 5754              		.loc 1 2421 30
 5755 016a 03F00803 		and	r3, r3, #8
 5756              		.loc 1 2421 10
 5757 016e 002B     		cmp	r3, #0
 5758 0170 03D1     		bne	.L315
 5759              		.loc 1 2421 62 discriminator 1
 5760 0172 D7F8D430 		ldr	r3, [r7, #212]
 5761 0176 002B     		cmp	r3, #0
 5762 0178 4FD0     		beq	.L316
 5763              	.L315:
2422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 5764              		.loc 1 2426 9
 5765 017a 7868     		ldr	r0, [r7, #4]
 5766 017c FFF7FEFF 		bl	UART_EndRxTransfer
2427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5767              		.loc 1 2429 13
 5768 0180 7B68     		ldr	r3, [r7, #4]
 5769 0182 1B68     		ldr	r3, [r3]
 5770 0184 5B69     		ldr	r3, [r3, #20]
 5771 0186 03F04003 		and	r3, r3, #64
 5772              		.loc 1 2429 12
 5773 018a 402B     		cmp	r3, #64
 5774 018c 41D1     		bne	.L317
 5775              	.L320:
 5776              	.LBB499:
2430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
2431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5777              		.loc 1 2431 11 discriminator 1
 5778 018e 7B68     		ldr	r3, [r7, #4]
 5779 0190 1B68     		ldr	r3, [r3]
 5780 0192 1433     		adds	r3, r3, #20
 5781 0194 C7F89C30 		str	r3, [r7, #156]
 5782              	.LBB500:
 5783              	.LBB501:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5784              		.loc 2 1072 4 discriminator 1
 5785 0198 D7F89C30 		ldr	r3, [r7, #156]
 5786              		.syntax unified
 5787              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5788 019c 53E8003F 		ldrex r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 166


 5789              	@ 0 "" 2
 5790              		.thumb
 5791              		.syntax unified
 5792 01a0 C7F89830 		str	r3, [r7, #152]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5793              		.loc 2 1073 10 discriminator 1
 5794 01a4 D7F89830 		ldr	r3, [r7, #152]
 5795              	.LBE501:
 5796              	.LBE500:
 5797              		.loc 1 2431 11 discriminator 1
 5798 01a8 23F04003 		bic	r3, r3, #64
 5799 01ac C7F8D030 		str	r3, [r7, #208]
 5800 01b0 7B68     		ldr	r3, [r7, #4]
 5801 01b2 1B68     		ldr	r3, [r3]
 5802 01b4 1433     		adds	r3, r3, #20
 5803 01b6 D7F8D020 		ldr	r2, [r7, #208]
 5804 01ba C7F8A820 		str	r2, [r7, #168]
 5805 01be C7F8A430 		str	r3, [r7, #164]
 5806              	.LBB502:
 5807              	.LBB503:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5808              		.loc 2 1123 4 discriminator 1
 5809 01c2 D7F8A410 		ldr	r1, [r7, #164]
 5810 01c6 D7F8A820 		ldr	r2, [r7, #168]
 5811              		.syntax unified
 5812              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5813 01ca 41E80023 		strex r3, r2, [r1]
 5814              	@ 0 "" 2
 5815              		.thumb
 5816              		.syntax unified
 5817 01ce C7F8A030 		str	r3, [r7, #160]
 5818              		.loc 2 1124 10 discriminator 1
 5819 01d2 D7F8A030 		ldr	r3, [r7, #160]
 5820              	.LBE503:
 5821              	.LBE502:
 5822              		.loc 1 2431 11 discriminator 1
 5823 01d6 002B     		cmp	r3, #0
 5824 01d8 D9D1     		bne	.L320
 5825              	.LBE499:
2432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Abort the UART DMA Rx stream */
2434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 5826              		.loc 1 2434 20
 5827 01da 7B68     		ldr	r3, [r7, #4]
 5828 01dc 9B6B     		ldr	r3, [r3, #56]
 5829              		.loc 1 2434 14
 5830 01de 002B     		cmp	r3, #0
 5831 01e0 13D0     		beq	.L321
2435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
2436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 5832              		.loc 1 2438 18
 5833 01e2 7B68     		ldr	r3, [r7, #4]
 5834 01e4 9B6B     		ldr	r3, [r3, #56]
 5835              		.loc 1 2438 46
 5836 01e6 7D4A     		ldr	r2, .L354
ARM GAS  /tmp/cceCIUcs.s 			page 167


 5837 01e8 1A65     		str	r2, [r3, #80]
2439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 5838              		.loc 1 2439 17
 5839 01ea 7B68     		ldr	r3, [r7, #4]
 5840 01ec 9B6B     		ldr	r3, [r3, #56]
 5841 01ee 1846     		mov	r0, r3
 5842 01f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5843 01f4 0346     		mov	r3, r0
 5844              		.loc 1 2439 16
 5845 01f6 002B     		cmp	r3, #0
 5846 01f8 16D0     		beq	.L351
2440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             {
2441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 5847              		.loc 1 2442 20
 5848 01fa 7B68     		ldr	r3, [r7, #4]
 5849 01fc 9B6B     		ldr	r3, [r3, #56]
 5850              		.loc 1 2442 28
 5851 01fe 1B6D     		ldr	r3, [r3, #80]
 5852              		.loc 1 2442 53
 5853 0200 7A68     		ldr	r2, [r7, #4]
 5854 0202 926B     		ldr	r2, [r2, #56]
 5855              		.loc 1 2442 15
 5856 0204 1046     		mov	r0, r2
 5857 0206 9847     		blx	r3
 5858              	.LVL2:
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 5859              		.loc 1 2429 12
 5860 0208 0EE0     		b	.L351
 5861              	.L321:
2443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             }
2444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
2445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           else
2446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
2447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /* Call user error callback */
2448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /*Call registered error callback*/
2450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             huart->ErrorCallback(huart);
2451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /*Call legacy weak error callback*/
2453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 5862              		.loc 1 2453 13
 5863 020a 7868     		ldr	r0, [r7, #4]
 5864 020c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 5865              		.loc 1 2429 12
 5866 0210 0AE0     		b	.L351
 5867              	.L317:
2454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
2456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
2457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
2458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
2459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Call user error callback */
2460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /*Call registered error callback*/
2462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->ErrorCallback(huart);
ARM GAS  /tmp/cceCIUcs.s 			page 168


2463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /*Call legacy weak error callback*/
2465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 5868              		.loc 1 2465 11
 5869 0212 7868     		ldr	r0, [r7, #4]
 5870 0214 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 5871              		.loc 1 2429 12
 5872 0218 06E0     		b	.L351
 5873              	.L316:
2466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
2468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Error is notified to user through user error callback */
2473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call registered error callback*/
2475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCallback(huart);
2476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call legacy weak error callback*/
2478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 5874              		.loc 1 2478 9
 5875 021a 7868     		ldr	r0, [r7, #4]
 5876 021c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 5877              		.loc 1 2481 26
 5878 0220 7B68     		ldr	r3, [r7, #4]
 5879 0222 0022     		movs	r2, #0
 5880 0224 1A64     		str	r2, [r3, #64]
2482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 5881              		.loc 1 2484 5
 5882 0226 70E1     		b	.L350
 5883              	.L351:
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 5884              		.loc 1 2429 12
 5885 0228 00BF     		nop
 5886              		.loc 1 2484 5
 5887 022a 6EE1     		b	.L350
 5888              	.L306:
2485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   } /* End if some error occurs */
2486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check current reception Mode :
2488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5889              		.loc 1 2489 13
 5890 022c 7B68     		ldr	r3, [r7, #4]
 5891 022e 1B6B     		ldr	r3, [r3, #48]
 5892              		.loc 1 2489 6
 5893 0230 012B     		cmp	r3, #1
 5894 0232 40F04A81 		bne	.L323
2490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       && ((isrflags & USART_SR_IDLE) != 0U)
ARM GAS  /tmp/cceCIUcs.s 			page 169


 5895              		.loc 1 2490 21
 5896 0236 D7F8E430 		ldr	r3, [r7, #228]
 5897 023a 03F01003 		and	r3, r3, #16
 5898              		.loc 1 2490 7
 5899 023e 002B     		cmp	r3, #0
 5900 0240 00F04381 		beq	.L323
2491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       && ((cr1its & USART_SR_IDLE) != 0U))
 5901              		.loc 1 2491 19
 5902 0244 D7F8E030 		ldr	r3, [r7, #224]
 5903 0248 03F01003 		and	r3, r3, #16
 5904              		.loc 1 2491 7
 5905 024c 002B     		cmp	r3, #0
 5906 024e 00F03C81 		beq	.L323
 5907              	.LBB504:
2492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_IDLEFLAG(huart);
 5908              		.loc 1 2493 5
 5909 0252 0023     		movs	r3, #0
 5910 0254 BB60     		str	r3, [r7, #8]
 5911 0256 7B68     		ldr	r3, [r7, #4]
 5912 0258 1B68     		ldr	r3, [r3]
 5913 025a 1B68     		ldr	r3, [r3]
 5914 025c BB60     		str	r3, [r7, #8]
 5915 025e 7B68     		ldr	r3, [r7, #4]
 5916 0260 1B68     		ldr	r3, [r3]
 5917 0262 5B68     		ldr	r3, [r3, #4]
 5918 0264 BB60     		str	r3, [r7, #8]
 5919 0266 BB68     		ldr	r3, [r7, #8]
 5920              	.LBE504:
2494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5921              		.loc 1 2496 9
 5922 0268 7B68     		ldr	r3, [r7, #4]
 5923 026a 1B68     		ldr	r3, [r3]
 5924 026c 5B69     		ldr	r3, [r3, #20]
 5925 026e 03F04003 		and	r3, r3, #64
 5926              		.loc 1 2496 8
 5927 0272 402B     		cmp	r3, #64
 5928 0274 40F0B480 		bne	.L324
 5929              	.LBB505:
2497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* DMA mode enabled */
2499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          (DMA cplt callback will be called).
2501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 5930              		.loc 1 2502 50
 5931 0278 7B68     		ldr	r3, [r7, #4]
 5932 027a 9B6B     		ldr	r3, [r3, #56]
 5933 027c 1B68     		ldr	r3, [r3]
 5934 027e 5B68     		ldr	r3, [r3, #4]
 5935              		.loc 1 2502 16
 5936 0280 A7F8BE30 		strh	r3, [r7, #190]	@ movhi
2503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if ((nb_remaining_rx_data > 0U)
 5937              		.loc 1 2503 10
 5938 0284 B7F8BE30 		ldrh	r3, [r7, #190]
ARM GAS  /tmp/cceCIUcs.s 			page 170


 5939 0288 002B     		cmp	r3, #0
 5940 028a 00F04081 		beq	.L352
2504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           && (nb_remaining_rx_data < huart->RxXferSize))
 5941              		.loc 1 2504 43
 5942 028e 7B68     		ldr	r3, [r7, #4]
 5943 0290 9B8D     		ldrh	r3, [r3, #44]
 5944              		.loc 1 2504 11
 5945 0292 B7F8BE20 		ldrh	r2, [r7, #190]
 5946 0296 9A42     		cmp	r2, r3
 5947 0298 80F03981 		bcs	.L352
2505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Reception is not complete */
2507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 5948              		.loc 1 2507 28
 5949 029c 7B68     		ldr	r3, [r7, #4]
 5950 029e B7F8BE20 		ldrh	r2, [r7, #190]	@ movhi
 5951 02a2 DA85     		strh	r2, [r3, #46]	@ movhi
2508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 5952              		.loc 1 2510 18
 5953 02a4 7B68     		ldr	r3, [r7, #4]
 5954 02a6 9B6B     		ldr	r3, [r3, #56]
 5955              		.loc 1 2510 32
 5956 02a8 DB69     		ldr	r3, [r3, #28]
 5957              		.loc 1 2510 12
 5958 02aa B3F5807F 		cmp	r3, #256
 5959 02ae 00F08880 		beq	.L326
 5960              	.L329:
 5961              	.LBB506:
2511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
2512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5962              		.loc 1 2513 11 discriminator 1
 5963 02b2 7B68     		ldr	r3, [r7, #4]
 5964 02b4 1B68     		ldr	r3, [r3]
 5965 02b6 0C33     		adds	r3, r3, #12
 5966 02b8 C7F88830 		str	r3, [r7, #136]
 5967              	.LBB507:
 5968              	.LBB508:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5969              		.loc 2 1072 4 discriminator 1
 5970 02bc D7F88830 		ldr	r3, [r7, #136]
 5971              		.syntax unified
 5972              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5973 02c0 53E8003F 		ldrex r3, [r3]
 5974              	@ 0 "" 2
 5975              		.thumb
 5976              		.syntax unified
 5977 02c4 C7F88430 		str	r3, [r7, #132]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5978              		.loc 2 1073 10 discriminator 1
 5979 02c8 D7F88430 		ldr	r3, [r7, #132]
 5980              	.LBE508:
 5981              	.LBE507:
 5982              		.loc 1 2513 11 discriminator 1
 5983 02cc 23F48073 		bic	r3, r3, #256
ARM GAS  /tmp/cceCIUcs.s 			page 171


 5984 02d0 C7F8B830 		str	r3, [r7, #184]
 5985 02d4 7B68     		ldr	r3, [r7, #4]
 5986 02d6 1B68     		ldr	r3, [r3]
 5987 02d8 0C33     		adds	r3, r3, #12
 5988 02da D7F8B820 		ldr	r2, [r7, #184]
 5989 02de C7F89420 		str	r2, [r7, #148]
 5990 02e2 C7F89030 		str	r3, [r7, #144]
 5991              	.LBB509:
 5992              	.LBB510:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5993              		.loc 2 1123 4 discriminator 1
 5994 02e6 D7F89010 		ldr	r1, [r7, #144]
 5995 02ea D7F89420 		ldr	r2, [r7, #148]
 5996              		.syntax unified
 5997              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5998 02ee 41E80023 		strex r3, r2, [r1]
 5999              	@ 0 "" 2
 6000              		.thumb
 6001              		.syntax unified
 6002 02f2 C7F88C30 		str	r3, [r7, #140]
 6003              		.loc 2 1124 10 discriminator 1
 6004 02f6 D7F88C30 		ldr	r3, [r7, #140]
 6005              	.LBE510:
 6006              	.LBE509:
 6007              		.loc 1 2513 11 discriminator 1
 6008 02fa 002B     		cmp	r3, #0
 6009 02fc D9D1     		bne	.L329
 6010              	.L332:
 6011              	.LBE506:
 6012              	.LBB511:
2514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6013              		.loc 1 2514 11 discriminator 1
 6014 02fe 7B68     		ldr	r3, [r7, #4]
 6015 0300 1B68     		ldr	r3, [r3]
 6016 0302 1433     		adds	r3, r3, #20
 6017 0304 7B67     		str	r3, [r7, #116]
 6018              	.LBB512:
 6019              	.LBB513:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6020              		.loc 2 1072 4 discriminator 1
 6021 0306 7B6F     		ldr	r3, [r7, #116]
 6022              		.syntax unified
 6023              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6024 0308 53E8003F 		ldrex r3, [r3]
 6025              	@ 0 "" 2
 6026              		.thumb
 6027              		.syntax unified
 6028 030c 3B67     		str	r3, [r7, #112]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6029              		.loc 2 1073 10 discriminator 1
 6030 030e 3B6F     		ldr	r3, [r7, #112]
 6031              	.LBE513:
 6032              	.LBE512:
 6033              		.loc 1 2514 11 discriminator 1
 6034 0310 23F00103 		bic	r3, r3, #1
 6035 0314 C7F8B430 		str	r3, [r7, #180]
 6036 0318 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 172


 6037 031a 1B68     		ldr	r3, [r3]
 6038 031c 1433     		adds	r3, r3, #20
 6039 031e D7F8B420 		ldr	r2, [r7, #180]
 6040 0322 C7F88020 		str	r2, [r7, #128]
 6041 0326 FB67     		str	r3, [r7, #124]
 6042              	.LBB514:
 6043              	.LBB515:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6044              		.loc 2 1123 4 discriminator 1
 6045 0328 F96F     		ldr	r1, [r7, #124]
 6046 032a D7F88020 		ldr	r2, [r7, #128]
 6047              		.syntax unified
 6048              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6049 032e 41E80023 		strex r3, r2, [r1]
 6050              	@ 0 "" 2
 6051              		.thumb
 6052              		.syntax unified
 6053 0332 BB67     		str	r3, [r7, #120]
 6054              		.loc 2 1124 10 discriminator 1
 6055 0334 BB6F     		ldr	r3, [r7, #120]
 6056              	.LBE515:
 6057              	.LBE514:
 6058              		.loc 1 2514 11 discriminator 1
 6059 0336 002B     		cmp	r3, #0
 6060 0338 E1D1     		bne	.L332
 6061              	.L335:
 6062              	.LBE511:
 6063              	.LBB516:
2515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              in the UART CR3 register */
2518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 6064              		.loc 1 2518 11 discriminator 1
 6065 033a 7B68     		ldr	r3, [r7, #4]
 6066 033c 1B68     		ldr	r3, [r3]
 6067 033e 1433     		adds	r3, r3, #20
 6068 0340 3B66     		str	r3, [r7, #96]
 6069              	.LBB517:
 6070              	.LBB518:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6071              		.loc 2 1072 4 discriminator 1
 6072 0342 3B6E     		ldr	r3, [r7, #96]
 6073              		.syntax unified
 6074              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6075 0344 53E8003F 		ldrex r3, [r3]
 6076              	@ 0 "" 2
 6077              		.thumb
 6078              		.syntax unified
 6079 0348 FB65     		str	r3, [r7, #92]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6080              		.loc 2 1073 10 discriminator 1
 6081 034a FB6D     		ldr	r3, [r7, #92]
 6082              	.LBE518:
 6083              	.LBE517:
 6084              		.loc 1 2518 11 discriminator 1
 6085 034c 23F04003 		bic	r3, r3, #64
 6086 0350 C7F8B030 		str	r3, [r7, #176]
ARM GAS  /tmp/cceCIUcs.s 			page 173


 6087 0354 7B68     		ldr	r3, [r7, #4]
 6088 0356 1B68     		ldr	r3, [r3]
 6089 0358 1433     		adds	r3, r3, #20
 6090 035a D7F8B020 		ldr	r2, [r7, #176]
 6091 035e FA66     		str	r2, [r7, #108]
 6092 0360 BB66     		str	r3, [r7, #104]
 6093              	.LBB519:
 6094              	.LBB520:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6095              		.loc 2 1123 4 discriminator 1
 6096 0362 B96E     		ldr	r1, [r7, #104]
 6097 0364 FA6E     		ldr	r2, [r7, #108]
 6098              		.syntax unified
 6099              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6100 0366 41E80023 		strex r3, r2, [r1]
 6101              	@ 0 "" 2
 6102              		.thumb
 6103              		.syntax unified
 6104 036a 7B66     		str	r3, [r7, #100]
 6105              		.loc 2 1124 10 discriminator 1
 6106 036c 7B6E     		ldr	r3, [r7, #100]
 6107              	.LBE520:
 6108              	.LBE519:
 6109              		.loc 1 2518 11 discriminator 1
 6110 036e 002B     		cmp	r3, #0
 6111 0370 E3D1     		bne	.L335
 6112              	.LBE516:
2519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 6113              		.loc 1 2521 26
 6114 0372 7B68     		ldr	r3, [r7, #4]
 6115 0374 2022     		movs	r2, #32
 6116 0376 83F83E20 		strb	r2, [r3, #62]
2522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6117              		.loc 1 2522 32
 6118 037a 7B68     		ldr	r3, [r7, #4]
 6119 037c 0022     		movs	r2, #0
 6120 037e 1A63     		str	r2, [r3, #48]
 6121              	.L338:
 6122              	.LBB521:
2523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6123              		.loc 1 2524 11 discriminator 1
 6124 0380 7B68     		ldr	r3, [r7, #4]
 6125 0382 1B68     		ldr	r3, [r3]
 6126 0384 0C33     		adds	r3, r3, #12
 6127 0386 FB64     		str	r3, [r7, #76]
 6128              	.LBB522:
 6129              	.LBB523:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6130              		.loc 2 1072 4 discriminator 1
 6131 0388 FB6C     		ldr	r3, [r7, #76]
 6132              		.syntax unified
 6133              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6134 038a 53E8003F 		ldrex r3, [r3]
 6135              	@ 0 "" 2
ARM GAS  /tmp/cceCIUcs.s 			page 174


 6136              		.thumb
 6137              		.syntax unified
 6138 038e BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6139              		.loc 2 1073 10 discriminator 1
 6140 0390 BB6C     		ldr	r3, [r7, #72]
 6141              	.LBE523:
 6142              	.LBE522:
 6143              		.loc 1 2524 11 discriminator 1
 6144 0392 23F01003 		bic	r3, r3, #16
 6145 0396 C7F8AC30 		str	r3, [r7, #172]
 6146 039a 7B68     		ldr	r3, [r7, #4]
 6147 039c 1B68     		ldr	r3, [r3]
 6148 039e 0C33     		adds	r3, r3, #12
 6149 03a0 D7F8AC20 		ldr	r2, [r7, #172]
 6150 03a4 BA65     		str	r2, [r7, #88]
 6151 03a6 7B65     		str	r3, [r7, #84]
 6152              	.LBB524:
 6153              	.LBB525:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6154              		.loc 2 1123 4 discriminator 1
 6155 03a8 796D     		ldr	r1, [r7, #84]
 6156 03aa BA6D     		ldr	r2, [r7, #88]
 6157              		.syntax unified
 6158              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6159 03ac 41E80023 		strex r3, r2, [r1]
 6160              	@ 0 "" 2
 6161              		.thumb
 6162              		.syntax unified
 6163 03b0 3B65     		str	r3, [r7, #80]
 6164              		.loc 2 1124 10 discriminator 1
 6165 03b2 3B6D     		ldr	r3, [r7, #80]
 6166              	.LBE525:
 6167              	.LBE524:
 6168              		.loc 1 2524 11 discriminator 1
 6169 03b4 002B     		cmp	r3, #0
 6170 03b6 E3D1     		bne	.L338
 6171              	.LBE521:
2525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 6172              		.loc 1 2527 17
 6173 03b8 7B68     		ldr	r3, [r7, #4]
 6174 03ba 9B6B     		ldr	r3, [r3, #56]
 6175 03bc 1846     		mov	r0, r3
 6176 03be FFF7FEFF 		bl	HAL_DMA_Abort
 6177              	.L326:
2528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
2529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 6178              		.loc 1 2534 49
 6179 03c2 7B68     		ldr	r3, [r7, #4]
 6180 03c4 9A8D     		ldrh	r2, [r3, #44]
ARM GAS  /tmp/cceCIUcs.s 			page 175


 6181              		.loc 1 2534 69
 6182 03c6 7B68     		ldr	r3, [r7, #4]
 6183 03c8 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 6184 03ca 9BB2     		uxth	r3, r3
 6185              		.loc 1 2534 9
 6186 03cc D31A     		subs	r3, r2, r3
 6187 03ce 9BB2     		uxth	r3, r3
 6188 03d0 1946     		mov	r1, r3
 6189 03d2 7868     		ldr	r0, [r7, #4]
 6190 03d4 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 6191              		.loc 1 2537 7
 6192 03d8 99E0     		b	.L352
 6193              	.L355:
 6194 03da 00BF     		.align	2
 6195              	.L354:
 6196 03dc 00000000 		.word	UART_DMAAbortOnError
 6197              	.L324:
 6198              	.LBE505:
 6199              	.LBB526:
2538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* DMA mode not enabled */
2542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 6200              		.loc 1 2544 34
 6201 03e0 7B68     		ldr	r3, [r7, #4]
 6202 03e2 9A8D     		ldrh	r2, [r3, #44]
 6203              		.loc 1 2544 54
 6204 03e4 7B68     		ldr	r3, [r7, #4]
 6205 03e6 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 6206 03e8 9BB2     		uxth	r3, r3
 6207              		.loc 1 2544 16
 6208 03ea D31A     		subs	r3, r2, r3
 6209 03ec A7F8CE30 		strh	r3, [r7, #206]	@ movhi
2545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if ((huart->RxXferCount > 0U)
 6210              		.loc 1 2545 17
 6211 03f0 7B68     		ldr	r3, [r7, #4]
 6212 03f2 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 6213 03f4 9BB2     		uxth	r3, r3
 6214              		.loc 1 2545 10
 6215 03f6 002B     		cmp	r3, #0
 6216 03f8 00F08B80 		beq	.L353
2546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           && (nb_rx_data > 0U))
 6217              		.loc 1 2546 11
 6218 03fc B7F8CE30 		ldrh	r3, [r7, #206]
 6219 0400 002B     		cmp	r3, #0
 6220 0402 00F08680 		beq	.L353
 6221              	.L342:
 6222              	.LBB527:
2547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
ARM GAS  /tmp/cceCIUcs.s 			page 176


 6223              		.loc 1 2549 9 discriminator 1
 6224 0406 7B68     		ldr	r3, [r7, #4]
 6225 0408 1B68     		ldr	r3, [r3]
 6226 040a 0C33     		adds	r3, r3, #12
 6227 040c BB63     		str	r3, [r7, #56]
 6228              	.LBB528:
 6229              	.LBB529:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6230              		.loc 2 1072 4 discriminator 1
 6231 040e BB6B     		ldr	r3, [r7, #56]
 6232              		.syntax unified
 6233              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6234 0410 53E8003F 		ldrex r3, [r3]
 6235              	@ 0 "" 2
 6236              		.thumb
 6237              		.syntax unified
 6238 0414 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6239              		.loc 2 1073 10 discriminator 1
 6240 0416 7B6B     		ldr	r3, [r7, #52]
 6241              	.LBE529:
 6242              	.LBE528:
 6243              		.loc 1 2549 9 discriminator 1
 6244 0418 23F49073 		bic	r3, r3, #288
 6245 041c C7F8C830 		str	r3, [r7, #200]
 6246 0420 7B68     		ldr	r3, [r7, #4]
 6247 0422 1B68     		ldr	r3, [r3]
 6248 0424 0C33     		adds	r3, r3, #12
 6249 0426 D7F8C820 		ldr	r2, [r7, #200]
 6250 042a 7A64     		str	r2, [r7, #68]
 6251 042c 3B64     		str	r3, [r7, #64]
 6252              	.LBB530:
 6253              	.LBB531:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6254              		.loc 2 1123 4 discriminator 1
 6255 042e 396C     		ldr	r1, [r7, #64]
 6256 0430 7A6C     		ldr	r2, [r7, #68]
 6257              		.syntax unified
 6258              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6259 0432 41E80023 		strex r3, r2, [r1]
 6260              	@ 0 "" 2
 6261              		.thumb
 6262              		.syntax unified
 6263 0436 FB63     		str	r3, [r7, #60]
 6264              		.loc 2 1124 10 discriminator 1
 6265 0438 FB6B     		ldr	r3, [r7, #60]
 6266              	.LBE531:
 6267              	.LBE530:
 6268              		.loc 1 2549 9 discriminator 1
 6269 043a 002B     		cmp	r3, #0
 6270 043c E3D1     		bne	.L342
 6271              	.L345:
 6272              	.LBE527:
 6273              	.LBB532:
2550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/cceCIUcs.s 			page 177


 6274              		.loc 1 2552 9 discriminator 1
 6275 043e 7B68     		ldr	r3, [r7, #4]
 6276 0440 1B68     		ldr	r3, [r3]
 6277 0442 1433     		adds	r3, r3, #20
 6278 0444 7B62     		str	r3, [r7, #36]
 6279              	.LBB533:
 6280              	.LBB534:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6281              		.loc 2 1072 4 discriminator 1
 6282 0446 7B6A     		ldr	r3, [r7, #36]
 6283              		.syntax unified
 6284              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6285 0448 53E8003F 		ldrex r3, [r3]
 6286              	@ 0 "" 2
 6287              		.thumb
 6288              		.syntax unified
 6289 044c 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6290              		.loc 2 1073 10 discriminator 1
 6291 044e 3B6A     		ldr	r3, [r7, #32]
 6292              	.LBE534:
 6293              	.LBE533:
 6294              		.loc 1 2552 9 discriminator 1
 6295 0450 23F00103 		bic	r3, r3, #1
 6296 0454 C7F8C430 		str	r3, [r7, #196]
 6297 0458 7B68     		ldr	r3, [r7, #4]
 6298 045a 1B68     		ldr	r3, [r3]
 6299 045c 1433     		adds	r3, r3, #20
 6300 045e D7F8C420 		ldr	r2, [r7, #196]
 6301 0462 3A63     		str	r2, [r7, #48]
 6302 0464 FB62     		str	r3, [r7, #44]
 6303              	.LBB535:
 6304              	.LBB536:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6305              		.loc 2 1123 4 discriminator 1
 6306 0466 F96A     		ldr	r1, [r7, #44]
 6307 0468 3A6B     		ldr	r2, [r7, #48]
 6308              		.syntax unified
 6309              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6310 046a 41E80023 		strex r3, r2, [r1]
 6311              	@ 0 "" 2
 6312              		.thumb
 6313              		.syntax unified
 6314 046e BB62     		str	r3, [r7, #40]
 6315              		.loc 2 1124 10 discriminator 1
 6316 0470 BB6A     		ldr	r3, [r7, #40]
 6317              	.LBE536:
 6318              	.LBE535:
 6319              		.loc 1 2552 9 discriminator 1
 6320 0472 002B     		cmp	r3, #0
 6321 0474 E3D1     		bne	.L345
 6322              	.LBE532:
2553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 6323              		.loc 1 2555 24
 6324 0476 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 178


 6325 0478 2022     		movs	r2, #32
 6326 047a 83F83E20 		strb	r2, [r3, #62]
2556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6327              		.loc 1 2556 30
 6328 047e 7B68     		ldr	r3, [r7, #4]
 6329 0480 0022     		movs	r2, #0
 6330 0482 1A63     		str	r2, [r3, #48]
 6331              	.L348:
 6332              	.LBB537:
2557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6333              		.loc 1 2558 9 discriminator 1
 6334 0484 7B68     		ldr	r3, [r7, #4]
 6335 0486 1B68     		ldr	r3, [r3]
 6336 0488 0C33     		adds	r3, r3, #12
 6337 048a 3B61     		str	r3, [r7, #16]
 6338              	.LBB538:
 6339              	.LBB539:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6340              		.loc 2 1072 4 discriminator 1
 6341 048c 3B69     		ldr	r3, [r7, #16]
 6342              		.syntax unified
 6343              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6344 048e 53E8003F 		ldrex r3, [r3]
 6345              	@ 0 "" 2
 6346              		.thumb
 6347              		.syntax unified
 6348 0492 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6349              		.loc 2 1073 10 discriminator 1
 6350 0494 FB68     		ldr	r3, [r7, #12]
 6351              	.LBE539:
 6352              	.LBE538:
 6353              		.loc 1 2558 9 discriminator 1
 6354 0496 23F01003 		bic	r3, r3, #16
 6355 049a C7F8C030 		str	r3, [r7, #192]
 6356 049e 7B68     		ldr	r3, [r7, #4]
 6357 04a0 1B68     		ldr	r3, [r3]
 6358 04a2 0C33     		adds	r3, r3, #12
 6359 04a4 D7F8C020 		ldr	r2, [r7, #192]
 6360 04a8 FA61     		str	r2, [r7, #28]
 6361 04aa BB61     		str	r3, [r7, #24]
 6362              	.LBB540:
 6363              	.LBB541:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6364              		.loc 2 1123 4 discriminator 1
 6365 04ac B969     		ldr	r1, [r7, #24]
 6366 04ae FA69     		ldr	r2, [r7, #28]
 6367              		.syntax unified
 6368              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6369 04b0 41E80023 		strex r3, r2, [r1]
 6370              	@ 0 "" 2
 6371              		.thumb
 6372              		.syntax unified
 6373 04b4 7B61     		str	r3, [r7, #20]
 6374              		.loc 2 1124 10 discriminator 1
 6375 04b6 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cceCIUcs.s 			page 179


 6376              	.LBE541:
 6377              	.LBE540:
 6378              		.loc 1 2558 9 discriminator 1
 6379 04b8 002B     		cmp	r3, #0
 6380 04ba E3D1     		bne	.L348
 6381              	.LBE537:
2559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 6382              		.loc 1 2564 9
 6383 04bc B7F8CE30 		ldrh	r3, [r7, #206]
 6384 04c0 1946     		mov	r1, r3
 6385 04c2 7868     		ldr	r0, [r7, #4]
 6386 04c4 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 6387              		.loc 1 2567 7
 6388 04c8 23E0     		b	.L353
 6389              	.L323:
 6390              	.LBE526:
2568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 6391              		.loc 1 2572 18
 6392 04ca D7F8E430 		ldr	r3, [r7, #228]
 6393 04ce 03F08003 		and	r3, r3, #128
 6394              		.loc 1 2572 6
 6395 04d2 002B     		cmp	r3, #0
 6396 04d4 09D0     		beq	.L349
 6397              		.loc 1 2572 56 discriminator 1
 6398 04d6 D7F8E030 		ldr	r3, [r7, #224]
 6399 04da 03F08003 		and	r3, r3, #128
 6400              		.loc 1 2572 44 discriminator 1
 6401 04de 002B     		cmp	r3, #0
 6402 04e0 03D0     		beq	.L349
2573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_Transmit_IT(huart);
 6403              		.loc 1 2574 5
 6404 04e2 7868     		ldr	r0, [r7, #4]
 6405 04e4 FFF7FEFF 		bl	UART_Transmit_IT
2575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 6406              		.loc 1 2575 5
 6407 04e8 14E0     		b	.L303
 6408              	.L349:
2576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 6409              		.loc 1 2579 18
 6410 04ea D7F8E430 		ldr	r3, [r7, #228]
 6411 04ee 03F04003 		and	r3, r3, #64
ARM GAS  /tmp/cceCIUcs.s 			page 180


 6412              		.loc 1 2579 6
 6413 04f2 002B     		cmp	r3, #0
 6414 04f4 0ED0     		beq	.L303
 6415              		.loc 1 2579 55 discriminator 1
 6416 04f6 D7F8E030 		ldr	r3, [r7, #224]
 6417 04fa 03F04003 		and	r3, r3, #64
 6418              		.loc 1 2579 43 discriminator 1
 6419 04fe 002B     		cmp	r3, #0
 6420 0500 08D0     		beq	.L303
2580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 6421              		.loc 1 2581 5
 6422 0502 7868     		ldr	r0, [r7, #4]
 6423 0504 FFF7FEFF 		bl	UART_EndTransmit_IT
2582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 6424              		.loc 1 2582 5
 6425 0508 04E0     		b	.L303
 6426              	.L350:
2484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   } /* End if some error occurs */
 6427              		.loc 1 2484 5
 6428 050a 00BF     		nop
 6429 050c 02E0     		b	.L303
 6430              	.L352:
 6431              	.LBB542:
2537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 6432              		.loc 1 2537 7
 6433 050e 00BF     		nop
 6434 0510 00E0     		b	.L303
 6435              	.L353:
 6436              	.LBE542:
 6437              	.LBB543:
2567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 6438              		.loc 1 2567 7
 6439 0512 00BF     		nop
 6440              	.L303:
 6441              	.LBE543:
2583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6442              		.loc 1 2584 1
 6443 0514 E837     		adds	r7, r7, #232
 6444              	.LCFI133:
 6445              		.cfi_def_cfa_offset 8
 6446 0516 BD46     		mov	sp, r7
 6447              	.LCFI134:
 6448              		.cfi_def_cfa_register 13
 6449              		@ sp needed
 6450 0518 80BD     		pop	{r7, pc}
 6451              		.cfi_endproc
 6452              	.LFE155:
 6454 051a 00BF     		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 6455              		.align	1
 6456              		.weak	HAL_UART_TxCpltCallback
 6457              		.syntax unified
 6458              		.thumb
 6459              		.thumb_func
 6460              		.fpu fpv4-sp-d16
 6462              	HAL_UART_TxCpltCallback:
ARM GAS  /tmp/cceCIUcs.s 			page 181


 6463              	.LFB156:
2585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6464              		.loc 1 2593 1
 6465              		.cfi_startproc
 6466              		@ args = 0, pretend = 0, frame = 8
 6467              		@ frame_needed = 1, uses_anonymous_args = 0
 6468              		@ link register save eliminated.
 6469 0000 80B4     		push	{r7}
 6470              	.LCFI135:
 6471              		.cfi_def_cfa_offset 4
 6472              		.cfi_offset 7, -4
 6473 0002 83B0     		sub	sp, sp, #12
 6474              	.LCFI136:
 6475              		.cfi_def_cfa_offset 16
 6476 0004 00AF     		add	r7, sp, #0
 6477              	.LCFI137:
 6478              		.cfi_def_cfa_register 7
 6479 0006 7860     		str	r0, [r7, #4]
2594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6480              		.loc 1 2599 1
 6481 0008 00BF     		nop
 6482 000a 0C37     		adds	r7, r7, #12
 6483              	.LCFI138:
 6484              		.cfi_def_cfa_offset 4
 6485 000c BD46     		mov	sp, r7
 6486              	.LCFI139:
 6487              		.cfi_def_cfa_register 13
 6488              		@ sp needed
 6489 000e 5DF8047B 		ldr	r7, [sp], #4
 6490              	.LCFI140:
 6491              		.cfi_restore 7
 6492              		.cfi_def_cfa_offset 0
 6493 0012 7047     		bx	lr
 6494              		.cfi_endproc
 6495              	.LFE156:
 6497              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 6498              		.align	1
 6499              		.weak	HAL_UART_TxHalfCpltCallback
 6500              		.syntax unified
 6501              		.thumb
 6502              		.thumb_func
 6503              		.fpu fpv4-sp-d16
 6505              	HAL_UART_TxHalfCpltCallback:
 6506              	.LFB157:
ARM GAS  /tmp/cceCIUcs.s 			page 182


2600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6507              		.loc 1 2608 1
 6508              		.cfi_startproc
 6509              		@ args = 0, pretend = 0, frame = 8
 6510              		@ frame_needed = 1, uses_anonymous_args = 0
 6511              		@ link register save eliminated.
 6512 0000 80B4     		push	{r7}
 6513              	.LCFI141:
 6514              		.cfi_def_cfa_offset 4
 6515              		.cfi_offset 7, -4
 6516 0002 83B0     		sub	sp, sp, #12
 6517              	.LCFI142:
 6518              		.cfi_def_cfa_offset 16
 6519 0004 00AF     		add	r7, sp, #0
 6520              	.LCFI143:
 6521              		.cfi_def_cfa_register 7
 6522 0006 7860     		str	r0, [r7, #4]
2609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6523              		.loc 1 2614 1
 6524 0008 00BF     		nop
 6525 000a 0C37     		adds	r7, r7, #12
 6526              	.LCFI144:
 6527              		.cfi_def_cfa_offset 4
 6528 000c BD46     		mov	sp, r7
 6529              	.LCFI145:
 6530              		.cfi_def_cfa_register 13
 6531              		@ sp needed
 6532 000e 5DF8047B 		ldr	r7, [sp], #4
 6533              	.LCFI146:
 6534              		.cfi_restore 7
 6535              		.cfi_def_cfa_offset 0
 6536 0012 7047     		bx	lr
 6537              		.cfi_endproc
 6538              	.LFE157:
 6540              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 6541              		.align	1
 6542              		.weak	HAL_UART_RxCpltCallback
 6543              		.syntax unified
 6544              		.thumb
 6545              		.thumb_func
 6546              		.fpu fpv4-sp-d16
 6548              	HAL_UART_RxCpltCallback:
 6549              	.LFB158:
2615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/cceCIUcs.s 			page 183


2616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6550              		.loc 1 2623 1
 6551              		.cfi_startproc
 6552              		@ args = 0, pretend = 0, frame = 8
 6553              		@ frame_needed = 1, uses_anonymous_args = 0
 6554              		@ link register save eliminated.
 6555 0000 80B4     		push	{r7}
 6556              	.LCFI147:
 6557              		.cfi_def_cfa_offset 4
 6558              		.cfi_offset 7, -4
 6559 0002 83B0     		sub	sp, sp, #12
 6560              	.LCFI148:
 6561              		.cfi_def_cfa_offset 16
 6562 0004 00AF     		add	r7, sp, #0
 6563              	.LCFI149:
 6564              		.cfi_def_cfa_register 7
 6565 0006 7860     		str	r0, [r7, #4]
2624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6566              		.loc 1 2629 1
 6567 0008 00BF     		nop
 6568 000a 0C37     		adds	r7, r7, #12
 6569              	.LCFI150:
 6570              		.cfi_def_cfa_offset 4
 6571 000c BD46     		mov	sp, r7
 6572              	.LCFI151:
 6573              		.cfi_def_cfa_register 13
 6574              		@ sp needed
 6575 000e 5DF8047B 		ldr	r7, [sp], #4
 6576              	.LCFI152:
 6577              		.cfi_restore 7
 6578              		.cfi_def_cfa_offset 0
 6579 0012 7047     		bx	lr
 6580              		.cfi_endproc
 6581              	.LFE158:
 6583              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 6584              		.align	1
 6585              		.weak	HAL_UART_RxHalfCpltCallback
 6586              		.syntax unified
 6587              		.thumb
 6588              		.thumb_func
 6589              		.fpu fpv4-sp-d16
 6591              	HAL_UART_RxHalfCpltCallback:
 6592              	.LFB159:
2630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
ARM GAS  /tmp/cceCIUcs.s 			page 184


2632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6593              		.loc 1 2638 1
 6594              		.cfi_startproc
 6595              		@ args = 0, pretend = 0, frame = 8
 6596              		@ frame_needed = 1, uses_anonymous_args = 0
 6597              		@ link register save eliminated.
 6598 0000 80B4     		push	{r7}
 6599              	.LCFI153:
 6600              		.cfi_def_cfa_offset 4
 6601              		.cfi_offset 7, -4
 6602 0002 83B0     		sub	sp, sp, #12
 6603              	.LCFI154:
 6604              		.cfi_def_cfa_offset 16
 6605 0004 00AF     		add	r7, sp, #0
 6606              	.LCFI155:
 6607              		.cfi_def_cfa_register 7
 6608 0006 7860     		str	r0, [r7, #4]
2639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6609              		.loc 1 2644 1
 6610 0008 00BF     		nop
 6611 000a 0C37     		adds	r7, r7, #12
 6612              	.LCFI156:
 6613              		.cfi_def_cfa_offset 4
 6614 000c BD46     		mov	sp, r7
 6615              	.LCFI157:
 6616              		.cfi_def_cfa_register 13
 6617              		@ sp needed
 6618 000e 5DF8047B 		ldr	r7, [sp], #4
 6619              	.LCFI158:
 6620              		.cfi_restore 7
 6621              		.cfi_def_cfa_offset 0
 6622 0012 7047     		bx	lr
 6623              		.cfi_endproc
 6624              	.LFE159:
 6626              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 6627              		.align	1
 6628              		.weak	HAL_UART_ErrorCallback
 6629              		.syntax unified
 6630              		.thumb
 6631              		.thumb_func
 6632              		.fpu fpv4-sp-d16
 6634              	HAL_UART_ErrorCallback:
 6635              	.LFB160:
2645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART error callbacks.
ARM GAS  /tmp/cceCIUcs.s 			page 185


2648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6636              		.loc 1 2653 1
 6637              		.cfi_startproc
 6638              		@ args = 0, pretend = 0, frame = 8
 6639              		@ frame_needed = 1, uses_anonymous_args = 0
 6640              		@ link register save eliminated.
 6641 0000 80B4     		push	{r7}
 6642              	.LCFI159:
 6643              		.cfi_def_cfa_offset 4
 6644              		.cfi_offset 7, -4
 6645 0002 83B0     		sub	sp, sp, #12
 6646              	.LCFI160:
 6647              		.cfi_def_cfa_offset 16
 6648 0004 00AF     		add	r7, sp, #0
 6649              	.LCFI161:
 6650              		.cfi_def_cfa_register 7
 6651 0006 7860     		str	r0, [r7, #4]
2654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6652              		.loc 1 2659 1
 6653 0008 00BF     		nop
 6654 000a 0C37     		adds	r7, r7, #12
 6655              	.LCFI162:
 6656              		.cfi_def_cfa_offset 4
 6657 000c BD46     		mov	sp, r7
 6658              	.LCFI163:
 6659              		.cfi_def_cfa_register 13
 6660              		@ sp needed
 6661 000e 5DF8047B 		ldr	r7, [sp], #4
 6662              	.LCFI164:
 6663              		.cfi_restore 7
 6664              		.cfi_def_cfa_offset 0
 6665 0012 7047     		bx	lr
 6666              		.cfi_endproc
 6667              	.LFE160:
 6669              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 6670              		.align	1
 6671              		.weak	HAL_UART_AbortCpltCallback
 6672              		.syntax unified
 6673              		.thumb
 6674              		.thumb_func
 6675              		.fpu fpv4-sp-d16
 6677              	HAL_UART_AbortCpltCallback:
 6678              	.LFB161:
2660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
ARM GAS  /tmp/cceCIUcs.s 			page 186


2664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6679              		.loc 1 2667 1
 6680              		.cfi_startproc
 6681              		@ args = 0, pretend = 0, frame = 8
 6682              		@ frame_needed = 1, uses_anonymous_args = 0
 6683              		@ link register save eliminated.
 6684 0000 80B4     		push	{r7}
 6685              	.LCFI165:
 6686              		.cfi_def_cfa_offset 4
 6687              		.cfi_offset 7, -4
 6688 0002 83B0     		sub	sp, sp, #12
 6689              	.LCFI166:
 6690              		.cfi_def_cfa_offset 16
 6691 0004 00AF     		add	r7, sp, #0
 6692              	.LCFI167:
 6693              		.cfi_def_cfa_register 7
 6694 0006 7860     		str	r0, [r7, #4]
2668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6695              		.loc 1 2674 1
 6696 0008 00BF     		nop
 6697 000a 0C37     		adds	r7, r7, #12
 6698              	.LCFI168:
 6699              		.cfi_def_cfa_offset 4
 6700 000c BD46     		mov	sp, r7
 6701              	.LCFI169:
 6702              		.cfi_def_cfa_register 13
 6703              		@ sp needed
 6704 000e 5DF8047B 		ldr	r7, [sp], #4
 6705              	.LCFI170:
 6706              		.cfi_restore 7
 6707              		.cfi_def_cfa_offset 0
 6708 0012 7047     		bx	lr
 6709              		.cfi_endproc
 6710              	.LFE161:
 6712              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 6713              		.align	1
 6714              		.weak	HAL_UART_AbortTransmitCpltCallback
 6715              		.syntax unified
 6716              		.thumb
 6717              		.thumb_func
 6718              		.fpu fpv4-sp-d16
 6720              	HAL_UART_AbortTransmitCpltCallback:
 6721              	.LFB162:
2675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/cceCIUcs.s 			page 187


2680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6722              		.loc 1 2682 1
 6723              		.cfi_startproc
 6724              		@ args = 0, pretend = 0, frame = 8
 6725              		@ frame_needed = 1, uses_anonymous_args = 0
 6726              		@ link register save eliminated.
 6727 0000 80B4     		push	{r7}
 6728              	.LCFI171:
 6729              		.cfi_def_cfa_offset 4
 6730              		.cfi_offset 7, -4
 6731 0002 83B0     		sub	sp, sp, #12
 6732              	.LCFI172:
 6733              		.cfi_def_cfa_offset 16
 6734 0004 00AF     		add	r7, sp, #0
 6735              	.LCFI173:
 6736              		.cfi_def_cfa_register 7
 6737 0006 7860     		str	r0, [r7, #4]
2683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6738              		.loc 1 2689 1
 6739 0008 00BF     		nop
 6740 000a 0C37     		adds	r7, r7, #12
 6741              	.LCFI174:
 6742              		.cfi_def_cfa_offset 4
 6743 000c BD46     		mov	sp, r7
 6744              	.LCFI175:
 6745              		.cfi_def_cfa_register 13
 6746              		@ sp needed
 6747 000e 5DF8047B 		ldr	r7, [sp], #4
 6748              	.LCFI176:
 6749              		.cfi_restore 7
 6750              		.cfi_def_cfa_offset 0
 6751 0012 7047     		bx	lr
 6752              		.cfi_endproc
 6753              	.LFE162:
 6755              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 6756              		.align	1
 6757              		.weak	HAL_UART_AbortReceiveCpltCallback
 6758              		.syntax unified
 6759              		.thumb
 6760              		.thumb_func
 6761              		.fpu fpv4-sp-d16
 6763              	HAL_UART_AbortReceiveCpltCallback:
 6764              	.LFB163:
2690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
ARM GAS  /tmp/cceCIUcs.s 			page 188


2696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6765              		.loc 1 2697 1
 6766              		.cfi_startproc
 6767              		@ args = 0, pretend = 0, frame = 8
 6768              		@ frame_needed = 1, uses_anonymous_args = 0
 6769              		@ link register save eliminated.
 6770 0000 80B4     		push	{r7}
 6771              	.LCFI177:
 6772              		.cfi_def_cfa_offset 4
 6773              		.cfi_offset 7, -4
 6774 0002 83B0     		sub	sp, sp, #12
 6775              	.LCFI178:
 6776              		.cfi_def_cfa_offset 16
 6777 0004 00AF     		add	r7, sp, #0
 6778              	.LCFI179:
 6779              		.cfi_def_cfa_register 7
 6780 0006 7860     		str	r0, [r7, #4]
2698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6781              		.loc 1 2704 1
 6782 0008 00BF     		nop
 6783 000a 0C37     		adds	r7, r7, #12
 6784              	.LCFI180:
 6785              		.cfi_def_cfa_offset 4
 6786 000c BD46     		mov	sp, r7
 6787              	.LCFI181:
 6788              		.cfi_def_cfa_register 13
 6789              		@ sp needed
 6790 000e 5DF8047B 		ldr	r7, [sp], #4
 6791              	.LCFI182:
 6792              		.cfi_restore 7
 6793              		.cfi_def_cfa_offset 0
 6794 0012 7047     		bx	lr
 6795              		.cfi_endproc
 6796              	.LFE163:
 6798              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 6799              		.align	1
 6800              		.weak	HAL_UARTEx_RxEventCallback
 6801              		.syntax unified
 6802              		.thumb
 6803              		.thumb_func
 6804              		.fpu fpv4-sp-d16
 6806              	HAL_UARTEx_RxEventCallback:
 6807              	.LFB164:
2705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle
2709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               reception buffer until which, data are available)
2711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/cceCIUcs.s 			page 189


2712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6808              		.loc 1 2714 1
 6809              		.cfi_startproc
 6810              		@ args = 0, pretend = 0, frame = 8
 6811              		@ frame_needed = 1, uses_anonymous_args = 0
 6812              		@ link register save eliminated.
 6813 0000 80B4     		push	{r7}
 6814              	.LCFI183:
 6815              		.cfi_def_cfa_offset 4
 6816              		.cfi_offset 7, -4
 6817 0002 83B0     		sub	sp, sp, #12
 6818              	.LCFI184:
 6819              		.cfi_def_cfa_offset 16
 6820 0004 00AF     		add	r7, sp, #0
 6821              	.LCFI185:
 6822              		.cfi_def_cfa_register 7
 6823 0006 7860     		str	r0, [r7, #4]
 6824 0008 0B46     		mov	r3, r1
 6825 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
2717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(Size);
2718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
2722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6826              		.loc 1 2722 1
 6827 000c 00BF     		nop
 6828 000e 0C37     		adds	r7, r7, #12
 6829              	.LCFI186:
 6830              		.cfi_def_cfa_offset 4
 6831 0010 BD46     		mov	sp, r7
 6832              	.LCFI187:
 6833              		.cfi_def_cfa_register 13
 6834              		@ sp needed
 6835 0012 5DF8047B 		ldr	r7, [sp], #4
 6836              	.LCFI188:
 6837              		.cfi_restore 7
 6838              		.cfi_def_cfa_offset 0
 6839 0016 7047     		bx	lr
 6840              		.cfi_endproc
 6841              	.LFE164:
 6843              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 6844              		.align	1
 6845              		.global	HAL_LIN_SendBreak
 6846              		.syntax unified
 6847              		.thumb
 6848              		.thumb_func
 6849              		.fpu fpv4-sp-d16
 6851              	HAL_LIN_SendBreak:
 6852              	.LFB165:
2723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
ARM GAS  /tmp/cceCIUcs.s 			page 190


2726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief   UART control functions
2730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
2731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim
2732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
2733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
2735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
2736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
2744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
2745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Transmits break characters.
2749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 6853              		.loc 1 2754 1
 6854              		.cfi_startproc
 6855              		@ args = 0, pretend = 0, frame = 32
 6856              		@ frame_needed = 1, uses_anonymous_args = 0
 6857 0000 80B5     		push	{r7, lr}
 6858              	.LCFI189:
 6859              		.cfi_def_cfa_offset 8
 6860              		.cfi_offset 7, -8
 6861              		.cfi_offset 14, -4
 6862 0002 88B0     		sub	sp, sp, #32
 6863              	.LCFI190:
 6864              		.cfi_def_cfa_offset 40
 6865 0004 00AF     		add	r7, sp, #0
 6866              	.LCFI191:
 6867              		.cfi_def_cfa_register 7
 6868 0006 7860     		str	r0, [r7, #4]
2755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
2756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 6869              		.loc 1 2756 3
 6870 0008 7B68     		ldr	r3, [r7, #4]
 6871 000a 1B68     		ldr	r3, [r3]
 6872 000c 234A     		ldr	r2, .L372
 6873 000e 9342     		cmp	r3, r2
 6874 0010 0ED0     		beq	.L366
 6875              		.loc 1 2756 3 is_stmt 0 discriminator 1
 6876 0012 7B68     		ldr	r3, [r7, #4]
 6877 0014 1B68     		ldr	r3, [r3]
 6878 0016 224A     		ldr	r2, .L372+4
ARM GAS  /tmp/cceCIUcs.s 			page 191


 6879 0018 9342     		cmp	r3, r2
 6880 001a 09D0     		beq	.L366
 6881              		.loc 1 2756 3 discriminator 2
 6882 001c 7B68     		ldr	r3, [r7, #4]
 6883 001e 1B68     		ldr	r3, [r3]
 6884 0020 204A     		ldr	r2, .L372+8
 6885 0022 9342     		cmp	r3, r2
 6886 0024 04D0     		beq	.L366
 6887              		.loc 1 2756 3 discriminator 3
 6888 0026 40F6C421 		movw	r1, #2756
 6889 002a 1F48     		ldr	r0, .L372+12
 6890 002c FFF7FEFF 		bl	assert_failed
 6891              	.L366:
2757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
2759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 6892              		.loc 1 2759 3 is_stmt 1
 6893 0030 7B68     		ldr	r3, [r7, #4]
 6894 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 6895 0036 012B     		cmp	r3, #1
 6896 0038 01D1     		bne	.L367
 6897              		.loc 1 2759 3 is_stmt 0 discriminator 1
 6898 003a 0223     		movs	r3, #2
 6899 003c 2AE0     		b	.L368
 6900              	.L367:
 6901              		.loc 1 2759 3 discriminator 2
 6902 003e 7B68     		ldr	r3, [r7, #4]
 6903 0040 0122     		movs	r2, #1
 6904 0042 83F83C20 		strb	r2, [r3, #60]
2760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6905              		.loc 1 2761 17 is_stmt 1 discriminator 2
 6906 0046 7B68     		ldr	r3, [r7, #4]
 6907 0048 2422     		movs	r2, #36
 6908 004a 83F83D20 		strb	r2, [r3, #61]
 6909              	.L371:
 6910              	.LBB544:
2762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Send break characters */
2764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 6911              		.loc 1 2764 3 discriminator 1
 6912 004e 7B68     		ldr	r3, [r7, #4]
 6913 0050 1B68     		ldr	r3, [r3]
 6914 0052 0C33     		adds	r3, r3, #12
 6915 0054 FB60     		str	r3, [r7, #12]
 6916              	.LBB545:
 6917              	.LBB546:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6918              		.loc 2 1072 4 discriminator 1
 6919 0056 FB68     		ldr	r3, [r7, #12]
 6920              		.syntax unified
 6921              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6922 0058 53E8003F 		ldrex r3, [r3]
 6923              	@ 0 "" 2
 6924              		.thumb
 6925              		.syntax unified
 6926 005c BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/cceCIUcs.s 			page 192


1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6927              		.loc 2 1073 10 discriminator 1
 6928 005e BB68     		ldr	r3, [r7, #8]
 6929              	.LBE546:
 6930              	.LBE545:
 6931              		.loc 1 2764 3 discriminator 1
 6932 0060 43F00103 		orr	r3, r3, #1
 6933 0064 FB61     		str	r3, [r7, #28]
 6934 0066 7B68     		ldr	r3, [r7, #4]
 6935 0068 1B68     		ldr	r3, [r3]
 6936 006a 0C33     		adds	r3, r3, #12
 6937 006c FA69     		ldr	r2, [r7, #28]
 6938 006e BA61     		str	r2, [r7, #24]
 6939 0070 7B61     		str	r3, [r7, #20]
 6940              	.LBB547:
 6941              	.LBB548:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6942              		.loc 2 1123 4 discriminator 1
 6943 0072 7969     		ldr	r1, [r7, #20]
 6944 0074 BA69     		ldr	r2, [r7, #24]
 6945              		.syntax unified
 6946              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6947 0076 41E80023 		strex r3, r2, [r1]
 6948              	@ 0 "" 2
 6949              		.thumb
 6950              		.syntax unified
 6951 007a 3B61     		str	r3, [r7, #16]
 6952              		.loc 2 1124 10 discriminator 1
 6953 007c 3B69     		ldr	r3, [r7, #16]
 6954              	.LBE548:
 6955              	.LBE547:
 6956              		.loc 1 2764 3 discriminator 1
 6957 007e 002B     		cmp	r3, #0
 6958 0080 E5D1     		bne	.L371
 6959              	.LBE544:
2765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6960              		.loc 1 2766 17
 6961 0082 7B68     		ldr	r3, [r7, #4]
 6962 0084 2022     		movs	r2, #32
 6963 0086 83F83D20 		strb	r2, [r3, #61]
2767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
2769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6964              		.loc 1 2769 3
 6965 008a 7B68     		ldr	r3, [r7, #4]
 6966 008c 0022     		movs	r2, #0
 6967 008e 83F83C20 		strb	r2, [r3, #60]
2770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 6968              		.loc 1 2771 10
 6969 0092 0023     		movs	r3, #0
 6970              	.L368:
2772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 6971              		.loc 1 2772 1
 6972 0094 1846     		mov	r0, r3
 6973 0096 2037     		adds	r7, r7, #32
ARM GAS  /tmp/cceCIUcs.s 			page 193


 6974              	.LCFI192:
 6975              		.cfi_def_cfa_offset 8
 6976 0098 BD46     		mov	sp, r7
 6977              	.LCFI193:
 6978              		.cfi_def_cfa_register 13
 6979              		@ sp needed
 6980 009a 80BD     		pop	{r7, pc}
 6981              	.L373:
 6982              		.align	2
 6983              	.L372:
 6984 009c 00100140 		.word	1073811456
 6985 00a0 00440040 		.word	1073759232
 6986 00a4 00140140 		.word	1073812480
 6987 00a8 00000000 		.word	.LC0
 6988              		.cfi_endproc
 6989              	.LFE165:
 6991              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 6992              		.align	1
 6993              		.global	HAL_MultiProcessor_EnterMuteMode
 6994              		.syntax unified
 6995              		.thumb
 6996              		.thumb_func
 6997              		.fpu fpv4-sp-d16
 6999              	HAL_MultiProcessor_EnterMuteMode:
 7000              	.LFB166:
2773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7001              		.loc 1 2781 1
 7002              		.cfi_startproc
 7003              		@ args = 0, pretend = 0, frame = 32
 7004              		@ frame_needed = 1, uses_anonymous_args = 0
 7005 0000 80B5     		push	{r7, lr}
 7006              	.LCFI194:
 7007              		.cfi_def_cfa_offset 8
 7008              		.cfi_offset 7, -8
 7009              		.cfi_offset 14, -4
 7010 0002 88B0     		sub	sp, sp, #32
 7011              	.LCFI195:
 7012              		.cfi_def_cfa_offset 40
 7013 0004 00AF     		add	r7, sp, #0
 7014              	.LCFI196:
 7015              		.cfi_def_cfa_register 7
 7016 0006 7860     		str	r0, [r7, #4]
2782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
2783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 7017              		.loc 1 2783 3
 7018 0008 7B68     		ldr	r3, [r7, #4]
 7019 000a 1B68     		ldr	r3, [r3]
 7020 000c 234A     		ldr	r2, .L381
 7021 000e 9342     		cmp	r3, r2
ARM GAS  /tmp/cceCIUcs.s 			page 194


 7022 0010 0ED0     		beq	.L375
 7023              		.loc 1 2783 3 is_stmt 0 discriminator 1
 7024 0012 7B68     		ldr	r3, [r7, #4]
 7025 0014 1B68     		ldr	r3, [r3]
 7026 0016 224A     		ldr	r2, .L381+4
 7027 0018 9342     		cmp	r3, r2
 7028 001a 09D0     		beq	.L375
 7029              		.loc 1 2783 3 discriminator 2
 7030 001c 7B68     		ldr	r3, [r7, #4]
 7031 001e 1B68     		ldr	r3, [r3]
 7032 0020 204A     		ldr	r2, .L381+8
 7033 0022 9342     		cmp	r3, r2
 7034 0024 04D0     		beq	.L375
 7035              		.loc 1 2783 3 discriminator 3
 7036 0026 40F6DF21 		movw	r1, #2783
 7037 002a 1F48     		ldr	r0, .L381+12
 7038 002c FFF7FEFF 		bl	assert_failed
 7039              	.L375:
2784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
2786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 7040              		.loc 1 2786 3 is_stmt 1
 7041 0030 7B68     		ldr	r3, [r7, #4]
 7042 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 7043 0036 012B     		cmp	r3, #1
 7044 0038 01D1     		bne	.L376
 7045              		.loc 1 2786 3 is_stmt 0 discriminator 1
 7046 003a 0223     		movs	r3, #2
 7047 003c 2AE0     		b	.L377
 7048              	.L376:
 7049              		.loc 1 2786 3 discriminator 2
 7050 003e 7B68     		ldr	r3, [r7, #4]
 7051 0040 0122     		movs	r2, #1
 7052 0042 83F83C20 		strb	r2, [r3, #60]
2787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 7053              		.loc 1 2788 17 is_stmt 1 discriminator 2
 7054 0046 7B68     		ldr	r3, [r7, #4]
 7055 0048 2422     		movs	r2, #36
 7056 004a 83F83D20 		strb	r2, [r3, #61]
 7057              	.L380:
 7058              	.LBB549:
2789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 7059              		.loc 1 2791 3 discriminator 1
 7060 004e 7B68     		ldr	r3, [r7, #4]
 7061 0050 1B68     		ldr	r3, [r3]
 7062 0052 0C33     		adds	r3, r3, #12
 7063 0054 FB60     		str	r3, [r7, #12]
 7064              	.LBB550:
 7065              	.LBB551:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7066              		.loc 2 1072 4 discriminator 1
 7067 0056 FB68     		ldr	r3, [r7, #12]
 7068              		.syntax unified
 7069              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cceCIUcs.s 			page 195


 7070 0058 53E8003F 		ldrex r3, [r3]
 7071              	@ 0 "" 2
 7072              		.thumb
 7073              		.syntax unified
 7074 005c BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7075              		.loc 2 1073 10 discriminator 1
 7076 005e BB68     		ldr	r3, [r7, #8]
 7077              	.LBE551:
 7078              	.LBE550:
 7079              		.loc 1 2791 3 discriminator 1
 7080 0060 43F00203 		orr	r3, r3, #2
 7081 0064 FB61     		str	r3, [r7, #28]
 7082 0066 7B68     		ldr	r3, [r7, #4]
 7083 0068 1B68     		ldr	r3, [r3]
 7084 006a 0C33     		adds	r3, r3, #12
 7085 006c FA69     		ldr	r2, [r7, #28]
 7086 006e BA61     		str	r2, [r7, #24]
 7087 0070 7B61     		str	r3, [r7, #20]
 7088              	.LBB552:
 7089              	.LBB553:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7090              		.loc 2 1123 4 discriminator 1
 7091 0072 7969     		ldr	r1, [r7, #20]
 7092 0074 BA69     		ldr	r2, [r7, #24]
 7093              		.syntax unified
 7094              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7095 0076 41E80023 		strex r3, r2, [r1]
 7096              	@ 0 "" 2
 7097              		.thumb
 7098              		.syntax unified
 7099 007a 3B61     		str	r3, [r7, #16]
 7100              		.loc 2 1124 10 discriminator 1
 7101 007c 3B69     		ldr	r3, [r7, #16]
 7102              	.LBE553:
 7103              	.LBE552:
 7104              		.loc 1 2791 3 discriminator 1
 7105 007e 002B     		cmp	r3, #0
 7106 0080 E5D1     		bne	.L380
 7107              	.LBE549:
2792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 7108              		.loc 1 2793 17
 7109 0082 7B68     		ldr	r3, [r7, #4]
 7110 0084 2022     		movs	r2, #32
 7111 0086 83F83D20 		strb	r2, [r3, #61]
2794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
2796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 7112              		.loc 1 2796 3
 7113 008a 7B68     		ldr	r3, [r7, #4]
 7114 008c 0022     		movs	r2, #0
 7115 008e 83F83C20 		strb	r2, [r3, #60]
2797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 7116              		.loc 1 2798 10
 7117 0092 0023     		movs	r3, #0
ARM GAS  /tmp/cceCIUcs.s 			page 196


 7118              	.L377:
2799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7119              		.loc 1 2799 1
 7120 0094 1846     		mov	r0, r3
 7121 0096 2037     		adds	r7, r7, #32
 7122              	.LCFI197:
 7123              		.cfi_def_cfa_offset 8
 7124 0098 BD46     		mov	sp, r7
 7125              	.LCFI198:
 7126              		.cfi_def_cfa_register 13
 7127              		@ sp needed
 7128 009a 80BD     		pop	{r7, pc}
 7129              	.L382:
 7130              		.align	2
 7131              	.L381:
 7132 009c 00100140 		.word	1073811456
 7133 00a0 00440040 		.word	1073759232
 7134 00a4 00140140 		.word	1073812480
 7135 00a8 00000000 		.word	.LC0
 7136              		.cfi_endproc
 7137              	.LFE166:
 7139              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 7140              		.align	1
 7141              		.global	HAL_MultiProcessor_ExitMuteMode
 7142              		.syntax unified
 7143              		.thumb
 7144              		.thumb_func
 7145              		.fpu fpv4-sp-d16
 7147              	HAL_MultiProcessor_ExitMuteMode:
 7148              	.LFB167:
2800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7149              		.loc 1 2808 1
 7150              		.cfi_startproc
 7151              		@ args = 0, pretend = 0, frame = 32
 7152              		@ frame_needed = 1, uses_anonymous_args = 0
 7153 0000 80B5     		push	{r7, lr}
 7154              	.LCFI199:
 7155              		.cfi_def_cfa_offset 8
 7156              		.cfi_offset 7, -8
 7157              		.cfi_offset 14, -4
 7158 0002 88B0     		sub	sp, sp, #32
 7159              	.LCFI200:
 7160              		.cfi_def_cfa_offset 40
 7161 0004 00AF     		add	r7, sp, #0
 7162              	.LCFI201:
 7163              		.cfi_def_cfa_register 7
 7164 0006 7860     		str	r0, [r7, #4]
2809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
2810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
ARM GAS  /tmp/cceCIUcs.s 			page 197


 7165              		.loc 1 2810 3
 7166 0008 7B68     		ldr	r3, [r7, #4]
 7167 000a 1B68     		ldr	r3, [r3]
 7168 000c 234A     		ldr	r2, .L390
 7169 000e 9342     		cmp	r3, r2
 7170 0010 0ED0     		beq	.L384
 7171              		.loc 1 2810 3 is_stmt 0 discriminator 1
 7172 0012 7B68     		ldr	r3, [r7, #4]
 7173 0014 1B68     		ldr	r3, [r3]
 7174 0016 224A     		ldr	r2, .L390+4
 7175 0018 9342     		cmp	r3, r2
 7176 001a 09D0     		beq	.L384
 7177              		.loc 1 2810 3 discriminator 2
 7178 001c 7B68     		ldr	r3, [r7, #4]
 7179 001e 1B68     		ldr	r3, [r3]
 7180 0020 204A     		ldr	r2, .L390+8
 7181 0022 9342     		cmp	r3, r2
 7182 0024 04D0     		beq	.L384
 7183              		.loc 1 2810 3 discriminator 3
 7184 0026 40F6FA21 		movw	r1, #2810
 7185 002a 1F48     		ldr	r0, .L390+12
 7186 002c FFF7FEFF 		bl	assert_failed
 7187              	.L384:
2811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
2813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 7188              		.loc 1 2813 3 is_stmt 1
 7189 0030 7B68     		ldr	r3, [r7, #4]
 7190 0032 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 7191 0036 012B     		cmp	r3, #1
 7192 0038 01D1     		bne	.L385
 7193              		.loc 1 2813 3 is_stmt 0 discriminator 1
 7194 003a 0223     		movs	r3, #2
 7195 003c 2AE0     		b	.L386
 7196              	.L385:
 7197              		.loc 1 2813 3 discriminator 2
 7198 003e 7B68     		ldr	r3, [r7, #4]
 7199 0040 0122     		movs	r2, #1
 7200 0042 83F83C20 		strb	r2, [r3, #60]
2814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 7201              		.loc 1 2815 17 is_stmt 1 discriminator 2
 7202 0046 7B68     		ldr	r3, [r7, #4]
 7203 0048 2422     		movs	r2, #36
 7204 004a 83F83D20 		strb	r2, [r3, #61]
 7205              	.L389:
 7206              	.LBB554:
2816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 7207              		.loc 1 2818 3 discriminator 1
 7208 004e 7B68     		ldr	r3, [r7, #4]
 7209 0050 1B68     		ldr	r3, [r3]
 7210 0052 0C33     		adds	r3, r3, #12
 7211 0054 FB60     		str	r3, [r7, #12]
 7212              	.LBB555:
 7213              	.LBB556:
ARM GAS  /tmp/cceCIUcs.s 			page 198


1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7214              		.loc 2 1072 4 discriminator 1
 7215 0056 FB68     		ldr	r3, [r7, #12]
 7216              		.syntax unified
 7217              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7218 0058 53E8003F 		ldrex r3, [r3]
 7219              	@ 0 "" 2
 7220              		.thumb
 7221              		.syntax unified
 7222 005c BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7223              		.loc 2 1073 10 discriminator 1
 7224 005e BB68     		ldr	r3, [r7, #8]
 7225              	.LBE556:
 7226              	.LBE555:
 7227              		.loc 1 2818 3 discriminator 1
 7228 0060 23F00203 		bic	r3, r3, #2
 7229 0064 FB61     		str	r3, [r7, #28]
 7230 0066 7B68     		ldr	r3, [r7, #4]
 7231 0068 1B68     		ldr	r3, [r3]
 7232 006a 0C33     		adds	r3, r3, #12
 7233 006c FA69     		ldr	r2, [r7, #28]
 7234 006e BA61     		str	r2, [r7, #24]
 7235 0070 7B61     		str	r3, [r7, #20]
 7236              	.LBB557:
 7237              	.LBB558:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7238              		.loc 2 1123 4 discriminator 1
 7239 0072 7969     		ldr	r1, [r7, #20]
 7240 0074 BA69     		ldr	r2, [r7, #24]
 7241              		.syntax unified
 7242              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7243 0076 41E80023 		strex r3, r2, [r1]
 7244              	@ 0 "" 2
 7245              		.thumb
 7246              		.syntax unified
 7247 007a 3B61     		str	r3, [r7, #16]
 7248              		.loc 2 1124 10 discriminator 1
 7249 007c 3B69     		ldr	r3, [r7, #16]
 7250              	.LBE558:
 7251              	.LBE557:
 7252              		.loc 1 2818 3 discriminator 1
 7253 007e 002B     		cmp	r3, #0
 7254 0080 E5D1     		bne	.L389
 7255              	.LBE554:
2819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 7256              		.loc 1 2820 17
 7257 0082 7B68     		ldr	r3, [r7, #4]
 7258 0084 2022     		movs	r2, #32
 7259 0086 83F83D20 		strb	r2, [r3, #61]
2821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
2823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 7260              		.loc 1 2823 3
 7261 008a 7B68     		ldr	r3, [r7, #4]
 7262 008c 0022     		movs	r2, #0
ARM GAS  /tmp/cceCIUcs.s 			page 199


 7263 008e 83F83C20 		strb	r2, [r3, #60]
2824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 7264              		.loc 1 2825 10
 7265 0092 0023     		movs	r3, #0
 7266              	.L386:
2826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7267              		.loc 1 2826 1
 7268 0094 1846     		mov	r0, r3
 7269 0096 2037     		adds	r7, r7, #32
 7270              	.LCFI202:
 7271              		.cfi_def_cfa_offset 8
 7272 0098 BD46     		mov	sp, r7
 7273              	.LCFI203:
 7274              		.cfi_def_cfa_register 13
 7275              		@ sp needed
 7276 009a 80BD     		pop	{r7, pc}
 7277              	.L391:
 7278              		.align	2
 7279              	.L390:
 7280 009c 00100140 		.word	1073811456
 7281 00a0 00440040 		.word	1073759232
 7282 00a4 00140140 		.word	1073812480
 7283 00a8 00000000 		.word	.LC0
 7284              		.cfi_endproc
 7285              	.LFE167:
 7287              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 7288              		.align	1
 7289              		.global	HAL_HalfDuplex_EnableTransmitter
 7290              		.syntax unified
 7291              		.thumb
 7292              		.thumb_func
 7293              		.fpu fpv4-sp-d16
 7295              	HAL_HalfDuplex_EnableTransmitter:
 7296              	.LFB168:
2827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7297              		.loc 1 2835 1
 7298              		.cfi_startproc
 7299              		@ args = 0, pretend = 0, frame = 16
 7300              		@ frame_needed = 1, uses_anonymous_args = 0
 7301              		@ link register save eliminated.
 7302 0000 80B4     		push	{r7}
 7303              	.LCFI204:
 7304              		.cfi_def_cfa_offset 4
 7305              		.cfi_offset 7, -4
 7306 0002 85B0     		sub	sp, sp, #20
 7307              	.LCFI205:
 7308              		.cfi_def_cfa_offset 24
 7309 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cceCIUcs.s 			page 200


 7310              	.LCFI206:
 7311              		.cfi_def_cfa_register 7
 7312 0006 7860     		str	r0, [r7, #4]
2836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 7313              		.loc 1 2836 12
 7314 0008 0023     		movs	r3, #0
 7315 000a FB60     		str	r3, [r7, #12]
2837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
2839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 7316              		.loc 1 2839 3
 7317 000c 7B68     		ldr	r3, [r7, #4]
 7318 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 7319 0012 012B     		cmp	r3, #1
 7320 0014 01D1     		bne	.L393
 7321              		.loc 1 2839 3 is_stmt 0 discriminator 1
 7322 0016 0223     		movs	r3, #2
 7323 0018 20E0     		b	.L394
 7324              	.L393:
 7325              		.loc 1 2839 3 discriminator 2
 7326 001a 7B68     		ldr	r3, [r7, #4]
 7327 001c 0122     		movs	r2, #1
 7328 001e 83F83C20 		strb	r2, [r3, #60]
2840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 7329              		.loc 1 2841 17 is_stmt 1 discriminator 2
 7330 0022 7B68     		ldr	r3, [r7, #4]
 7331 0024 2422     		movs	r2, #36
 7332 0026 83F83D20 		strb	r2, [r3, #61]
2842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 7333              		.loc 1 2844 17 discriminator 2
 7334 002a 7B68     		ldr	r3, [r7, #4]
 7335 002c 1B68     		ldr	r3, [r3]
 7336              		.loc 1 2844 10 discriminator 2
 7337 002e DB68     		ldr	r3, [r3, #12]
 7338 0030 FB60     		str	r3, [r7, #12]
2845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear TE and RE bits */
2847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 7339              		.loc 1 2847 10 discriminator 2
 7340 0032 FB68     		ldr	r3, [r7, #12]
 7341 0034 23F00C03 		bic	r3, r3, #12
 7342 0038 FB60     		str	r3, [r7, #12]
2848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 7343              		.loc 1 2850 10 discriminator 2
 7344 003a FB68     		ldr	r3, [r7, #12]
 7345 003c 43F00803 		orr	r3, r3, #8
 7346 0040 FB60     		str	r3, [r7, #12]
2851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
2853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 7347              		.loc 1 2853 3 discriminator 2
 7348 0042 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 201


 7349 0044 1B68     		ldr	r3, [r3]
 7350 0046 FA68     		ldr	r2, [r7, #12]
 7351 0048 DA60     		str	r2, [r3, #12]
2854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 7352              		.loc 1 2855 17 discriminator 2
 7353 004a 7B68     		ldr	r3, [r7, #4]
 7354 004c 2022     		movs	r2, #32
 7355 004e 83F83D20 		strb	r2, [r3, #61]
2856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
2858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 7356              		.loc 1 2858 3 discriminator 2
 7357 0052 7B68     		ldr	r3, [r7, #4]
 7358 0054 0022     		movs	r2, #0
 7359 0056 83F83C20 		strb	r2, [r3, #60]
2859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 7360              		.loc 1 2860 10 discriminator 2
 7361 005a 0023     		movs	r3, #0
 7362              	.L394:
2861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7363              		.loc 1 2861 1
 7364 005c 1846     		mov	r0, r3
 7365 005e 1437     		adds	r7, r7, #20
 7366              	.LCFI207:
 7367              		.cfi_def_cfa_offset 4
 7368 0060 BD46     		mov	sp, r7
 7369              	.LCFI208:
 7370              		.cfi_def_cfa_register 13
 7371              		@ sp needed
 7372 0062 5DF8047B 		ldr	r7, [sp], #4
 7373              	.LCFI209:
 7374              		.cfi_restore 7
 7375              		.cfi_def_cfa_offset 0
 7376 0066 7047     		bx	lr
 7377              		.cfi_endproc
 7378              	.LFE168:
 7380              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 7381              		.align	1
 7382              		.global	HAL_HalfDuplex_EnableReceiver
 7383              		.syntax unified
 7384              		.thumb
 7385              		.thumb_func
 7386              		.fpu fpv4-sp-d16
 7388              	HAL_HalfDuplex_EnableReceiver:
 7389              	.LFB169:
2862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7390              		.loc 1 2870 1
ARM GAS  /tmp/cceCIUcs.s 			page 202


 7391              		.cfi_startproc
 7392              		@ args = 0, pretend = 0, frame = 16
 7393              		@ frame_needed = 1, uses_anonymous_args = 0
 7394              		@ link register save eliminated.
 7395 0000 80B4     		push	{r7}
 7396              	.LCFI210:
 7397              		.cfi_def_cfa_offset 4
 7398              		.cfi_offset 7, -4
 7399 0002 85B0     		sub	sp, sp, #20
 7400              	.LCFI211:
 7401              		.cfi_def_cfa_offset 24
 7402 0004 00AF     		add	r7, sp, #0
 7403              	.LCFI212:
 7404              		.cfi_def_cfa_register 7
 7405 0006 7860     		str	r0, [r7, #4]
2871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 7406              		.loc 1 2871 12
 7407 0008 0023     		movs	r3, #0
 7408 000a FB60     		str	r3, [r7, #12]
2872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
2874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 7409              		.loc 1 2874 3
 7410 000c 7B68     		ldr	r3, [r7, #4]
 7411 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 7412 0012 012B     		cmp	r3, #1
 7413 0014 01D1     		bne	.L396
 7414              		.loc 1 2874 3 is_stmt 0 discriminator 1
 7415 0016 0223     		movs	r3, #2
 7416 0018 20E0     		b	.L397
 7417              	.L396:
 7418              		.loc 1 2874 3 discriminator 2
 7419 001a 7B68     		ldr	r3, [r7, #4]
 7420 001c 0122     		movs	r2, #1
 7421 001e 83F83C20 		strb	r2, [r3, #60]
2875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 7422              		.loc 1 2876 17 is_stmt 1 discriminator 2
 7423 0022 7B68     		ldr	r3, [r7, #4]
 7424 0024 2422     		movs	r2, #36
 7425 0026 83F83D20 		strb	r2, [r3, #61]
2877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 7426              		.loc 1 2879 17 discriminator 2
 7427 002a 7B68     		ldr	r3, [r7, #4]
 7428 002c 1B68     		ldr	r3, [r3]
 7429              		.loc 1 2879 10 discriminator 2
 7430 002e DB68     		ldr	r3, [r3, #12]
 7431 0030 FB60     		str	r3, [r7, #12]
2880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear TE and RE bits */
2882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 7432              		.loc 1 2882 10 discriminator 2
 7433 0032 FB68     		ldr	r3, [r7, #12]
 7434 0034 23F00C03 		bic	r3, r3, #12
 7435 0038 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cceCIUcs.s 			page 203


2883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 7436              		.loc 1 2885 10 discriminator 2
 7437 003a FB68     		ldr	r3, [r7, #12]
 7438 003c 43F00403 		orr	r3, r3, #4
 7439 0040 FB60     		str	r3, [r7, #12]
2886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
2888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 7440              		.loc 1 2888 3 discriminator 2
 7441 0042 7B68     		ldr	r3, [r7, #4]
 7442 0044 1B68     		ldr	r3, [r3]
 7443 0046 FA68     		ldr	r2, [r7, #12]
 7444 0048 DA60     		str	r2, [r3, #12]
2889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 7445              		.loc 1 2890 17 discriminator 2
 7446 004a 7B68     		ldr	r3, [r7, #4]
 7447 004c 2022     		movs	r2, #32
 7448 004e 83F83D20 		strb	r2, [r3, #61]
2891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
2893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 7449              		.loc 1 2893 3 discriminator 2
 7450 0052 7B68     		ldr	r3, [r7, #4]
 7451 0054 0022     		movs	r2, #0
 7452 0056 83F83C20 		strb	r2, [r3, #60]
2894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 7453              		.loc 1 2895 10 discriminator 2
 7454 005a 0023     		movs	r3, #0
 7455              	.L397:
2896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7456              		.loc 1 2896 1
 7457 005c 1846     		mov	r0, r3
 7458 005e 1437     		adds	r7, r7, #20
 7459              	.LCFI213:
 7460              		.cfi_def_cfa_offset 4
 7461 0060 BD46     		mov	sp, r7
 7462              	.LCFI214:
 7463              		.cfi_def_cfa_register 13
 7464              		@ sp needed
 7465 0062 5DF8047B 		ldr	r7, [sp], #4
 7466              	.LCFI215:
 7467              		.cfi_restore 7
 7468              		.cfi_def_cfa_offset 0
 7469 0066 7047     		bx	lr
 7470              		.cfi_endproc
 7471              	.LFE169:
 7473              		.section	.text.HAL_UART_GetState,"ax",%progbits
 7474              		.align	1
 7475              		.global	HAL_UART_GetState
 7476              		.syntax unified
 7477              		.thumb
 7478              		.thumb_func
 7479              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cceCIUcs.s 			page 204


 7481              	HAL_UART_GetState:
 7482              	.LFB170:
2897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
2900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
2905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim
2906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
2907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
2909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  [..]
2910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    process
2913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
2917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
2918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Returns the UART state.
2922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL state
2925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7483              		.loc 1 2927 1
 7484              		.cfi_startproc
 7485              		@ args = 0, pretend = 0, frame = 16
 7486              		@ frame_needed = 1, uses_anonymous_args = 0
 7487              		@ link register save eliminated.
 7488 0000 80B4     		push	{r7}
 7489              	.LCFI216:
 7490              		.cfi_def_cfa_offset 4
 7491              		.cfi_offset 7, -4
 7492 0002 85B0     		sub	sp, sp, #20
 7493              	.LCFI217:
 7494              		.cfi_def_cfa_offset 24
 7495 0004 00AF     		add	r7, sp, #0
 7496              	.LCFI218:
 7497              		.cfi_def_cfa_register 7
 7498 0006 7860     		str	r0, [r7, #4]
2928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 7499              		.loc 1 2928 12
 7500 0008 0023     		movs	r3, #0
 7501 000a FB60     		str	r3, [r7, #12]
 7502              		.loc 1 2928 27
 7503 000c 0023     		movs	r3, #0
 7504 000e BB60     		str	r3, [r7, #8]
2929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   temp1 = huart->gState;
ARM GAS  /tmp/cceCIUcs.s 			page 205


 7505              		.loc 1 2929 16
 7506 0010 7B68     		ldr	r3, [r7, #4]
 7507 0012 93F83D30 		ldrb	r3, [r3, #61]
 7508 0016 DBB2     		uxtb	r3, r3
 7509              		.loc 1 2929 9
 7510 0018 FB60     		str	r3, [r7, #12]
2930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   temp2 = huart->RxState;
 7511              		.loc 1 2930 16
 7512 001a 7B68     		ldr	r3, [r7, #4]
 7513 001c 93F83E30 		ldrb	r3, [r3, #62]
 7514 0020 DBB2     		uxtb	r3, r3
 7515              		.loc 1 2930 9
 7516 0022 BB60     		str	r3, [r7, #8]
2931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 7517              		.loc 1 2932 10
 7518 0024 FB68     		ldr	r3, [r7, #12]
 7519 0026 DAB2     		uxtb	r2, r3
 7520 0028 BB68     		ldr	r3, [r7, #8]
 7521 002a DBB2     		uxtb	r3, r3
 7522 002c 1343     		orrs	r3, r3, r2
 7523 002e DBB2     		uxtb	r3, r3
2933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7524              		.loc 1 2933 1
 7525 0030 1846     		mov	r0, r3
 7526 0032 1437     		adds	r7, r7, #20
 7527              	.LCFI219:
 7528              		.cfi_def_cfa_offset 4
 7529 0034 BD46     		mov	sp, r7
 7530              	.LCFI220:
 7531              		.cfi_def_cfa_register 13
 7532              		@ sp needed
 7533 0036 5DF8047B 		ldr	r7, [sp], #4
 7534              	.LCFI221:
 7535              		.cfi_restore 7
 7536              		.cfi_def_cfa_offset 0
 7537 003a 7047     		bx	lr
 7538              		.cfi_endproc
 7539              	.LFE170:
 7541              		.section	.text.HAL_UART_GetError,"ax",%progbits
 7542              		.align	1
 7543              		.global	HAL_UART_GetError
 7544              		.syntax unified
 7545              		.thumb
 7546              		.thumb_func
 7547              		.fpu fpv4-sp-d16
 7549              	HAL_UART_GetError:
 7550              	.LFB171:
2934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Return the UART error code
2937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified UART.
2939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval UART Error Code
2940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
ARM GAS  /tmp/cceCIUcs.s 			page 206


 7551              		.loc 1 2942 1
 7552              		.cfi_startproc
 7553              		@ args = 0, pretend = 0, frame = 8
 7554              		@ frame_needed = 1, uses_anonymous_args = 0
 7555              		@ link register save eliminated.
 7556 0000 80B4     		push	{r7}
 7557              	.LCFI222:
 7558              		.cfi_def_cfa_offset 4
 7559              		.cfi_offset 7, -4
 7560 0002 83B0     		sub	sp, sp, #12
 7561              	.LCFI223:
 7562              		.cfi_def_cfa_offset 16
 7563 0004 00AF     		add	r7, sp, #0
 7564              	.LCFI224:
 7565              		.cfi_def_cfa_register 7
 7566 0006 7860     		str	r0, [r7, #4]
2943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return huart->ErrorCode;
 7567              		.loc 1 2943 15
 7568 0008 7B68     		ldr	r3, [r7, #4]
 7569 000a 1B6C     		ldr	r3, [r3, #64]
2944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7570              		.loc 1 2944 1
 7571 000c 1846     		mov	r0, r3
 7572 000e 0C37     		adds	r7, r7, #12
 7573              	.LCFI225:
 7574              		.cfi_def_cfa_offset 4
 7575 0010 BD46     		mov	sp, r7
 7576              	.LCFI226:
 7577              		.cfi_def_cfa_register 13
 7578              		@ sp needed
 7579 0012 5DF8047B 		ldr	r7, [sp], #4
 7580              	.LCFI227:
 7581              		.cfi_restore 7
 7582              		.cfi_def_cfa_offset 0
 7583 0016 7047     		bx	lr
 7584              		.cfi_endproc
 7585              	.LFE171:
 7587              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 7588              		.align	1
 7589              		.syntax unified
 7590              		.thumb
 7591              		.thumb_func
 7592              		.fpu fpv4-sp-d16
 7594              	UART_DMATransmitCplt:
 7595              	.LFB172:
2945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
2948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
2952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
2956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
ARM GAS  /tmp/cceCIUcs.s 			page 207


2957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval none
2962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
2966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Init the UART Callback settings */
2967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
2978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7596              		.loc 1 2987 1
 7597              		.cfi_startproc
 7598              		@ args = 0, pretend = 0, frame = 64
 7599              		@ frame_needed = 1, uses_anonymous_args = 0
 7600 0000 80B5     		push	{r7, lr}
 7601              	.LCFI228:
 7602              		.cfi_def_cfa_offset 8
 7603              		.cfi_offset 7, -8
 7604              		.cfi_offset 14, -4
 7605 0002 90B0     		sub	sp, sp, #64
 7606              	.LCFI229:
 7607              		.cfi_def_cfa_offset 72
 7608 0004 00AF     		add	r7, sp, #0
 7609              	.LCFI230:
 7610              		.cfi_def_cfa_register 7
 7611 0006 7860     		str	r0, [r7, #4]
2988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7612              		.loc 1 2988 23
 7613 0008 7B68     		ldr	r3, [r7, #4]
 7614 000a 9B6B     		ldr	r3, [r3, #56]
 7615 000c FB63     		str	r3, [r7, #60]
2989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Normal mode*/
2990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 7616              		.loc 1 2990 12
 7617 000e 7B68     		ldr	r3, [r7, #4]
 7618 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 208


 7619              		.loc 1 2990 22
 7620 0012 1B68     		ldr	r3, [r3]
 7621              		.loc 1 2990 27
 7622 0014 03F48073 		and	r3, r3, #256
 7623              		.loc 1 2990 6
 7624 0018 002B     		cmp	r3, #0
 7625 001a 37D1     		bne	.L403
2991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 7626              		.loc 1 2992 24
 7627 001c FB6B     		ldr	r3, [r7, #60]
 7628 001e 0022     		movs	r2, #0
 7629 0020 DA84     		strh	r2, [r3, #38]	@ movhi
 7630              	.L406:
 7631              	.LBB559:
2993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
2996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 7632              		.loc 1 2996 5 discriminator 1
 7633 0022 FB6B     		ldr	r3, [r7, #60]
 7634 0024 1B68     		ldr	r3, [r3]
 7635 0026 1433     		adds	r3, r3, #20
 7636 0028 7B62     		str	r3, [r7, #36]
 7637              	.LBB560:
 7638              	.LBB561:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7639              		.loc 2 1072 4 discriminator 1
 7640 002a 7B6A     		ldr	r3, [r7, #36]
 7641              		.syntax unified
 7642              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7643 002c 53E8003F 		ldrex r3, [r3]
 7644              	@ 0 "" 2
 7645              		.thumb
 7646              		.syntax unified
 7647 0030 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7648              		.loc 2 1073 10 discriminator 1
 7649 0032 3B6A     		ldr	r3, [r7, #32]
 7650              	.LBE561:
 7651              	.LBE560:
 7652              		.loc 1 2996 5 discriminator 1
 7653 0034 23F08003 		bic	r3, r3, #128
 7654 0038 BB63     		str	r3, [r7, #56]
 7655 003a FB6B     		ldr	r3, [r7, #60]
 7656 003c 1B68     		ldr	r3, [r3]
 7657 003e 1433     		adds	r3, r3, #20
 7658 0040 BA6B     		ldr	r2, [r7, #56]
 7659 0042 3A63     		str	r2, [r7, #48]
 7660 0044 FB62     		str	r3, [r7, #44]
 7661              	.LBB562:
 7662              	.LBB563:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7663              		.loc 2 1123 4 discriminator 1
 7664 0046 F96A     		ldr	r1, [r7, #44]
 7665 0048 3A6B     		ldr	r2, [r7, #48]
 7666              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 209


 7667              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7668 004a 41E80023 		strex r3, r2, [r1]
 7669              	@ 0 "" 2
 7670              		.thumb
 7671              		.syntax unified
 7672 004e BB62     		str	r3, [r7, #40]
 7673              		.loc 2 1124 10 discriminator 1
 7674 0050 BB6A     		ldr	r3, [r7, #40]
 7675              	.LBE563:
 7676              	.LBE562:
 7677              		.loc 1 2996 5 discriminator 1
 7678 0052 002B     		cmp	r3, #0
 7679 0054 E5D1     		bne	.L406
 7680              	.L409:
 7681              	.LBE559:
 7682              	.LBB564:
2997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 7683              		.loc 1 2999 5 discriminator 1
 7684 0056 FB6B     		ldr	r3, [r7, #60]
 7685 0058 1B68     		ldr	r3, [r3]
 7686 005a 0C33     		adds	r3, r3, #12
 7687 005c 3B61     		str	r3, [r7, #16]
 7688              	.LBB565:
 7689              	.LBB566:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7690              		.loc 2 1072 4 discriminator 1
 7691 005e 3B69     		ldr	r3, [r7, #16]
 7692              		.syntax unified
 7693              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7694 0060 53E8003F 		ldrex r3, [r3]
 7695              	@ 0 "" 2
 7696              		.thumb
 7697              		.syntax unified
 7698 0064 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7699              		.loc 2 1073 10 discriminator 1
 7700 0066 FB68     		ldr	r3, [r7, #12]
 7701              	.LBE566:
 7702              	.LBE565:
 7703              		.loc 1 2999 5 discriminator 1
 7704 0068 43F04003 		orr	r3, r3, #64
 7705 006c 7B63     		str	r3, [r7, #52]
 7706 006e FB6B     		ldr	r3, [r7, #60]
 7707 0070 1B68     		ldr	r3, [r3]
 7708 0072 0C33     		adds	r3, r3, #12
 7709 0074 7A6B     		ldr	r2, [r7, #52]
 7710 0076 FA61     		str	r2, [r7, #28]
 7711 0078 BB61     		str	r3, [r7, #24]
 7712              	.LBB567:
 7713              	.LBB568:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7714              		.loc 2 1123 4 discriminator 1
 7715 007a B969     		ldr	r1, [r7, #24]
 7716 007c FA69     		ldr	r2, [r7, #28]
 7717              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 210


 7718              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7719 007e 41E80023 		strex r3, r2, [r1]
 7720              	@ 0 "" 2
 7721              		.thumb
 7722              		.syntax unified
 7723 0082 7B61     		str	r3, [r7, #20]
 7724              		.loc 2 1124 10 discriminator 1
 7725 0084 7B69     		ldr	r3, [r7, #20]
 7726              	.LBE568:
 7727              	.LBE567:
 7728              		.loc 1 2999 5 discriminator 1
 7729 0086 002B     		cmp	r3, #0
 7730 0088 E5D1     		bne	.L409
 7731              	.LBE564:
3000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Circular mode */
3003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
3004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7732              		.loc 1 3013 1
 7733 008a 02E0     		b	.L411
 7734              	.L403:
3010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7735              		.loc 1 3010 5
 7736 008c F86B     		ldr	r0, [r7, #60]
 7737 008e FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 7738              	.L411:
 7739              		.loc 1 3013 1
 7740 0092 00BF     		nop
 7741 0094 4037     		adds	r7, r7, #64
 7742              	.LCFI231:
 7743              		.cfi_def_cfa_offset 8
 7744 0096 BD46     		mov	sp, r7
 7745              	.LCFI232:
 7746              		.cfi_def_cfa_register 13
 7747              		@ sp needed
 7748 0098 80BD     		pop	{r7, pc}
 7749              		.cfi_endproc
 7750              	.LFE172:
 7752              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 7753              		.align	1
 7754              		.syntax unified
 7755              		.thumb
 7756              		.thumb_func
 7757              		.fpu fpv4-sp-d16
 7759              	UART_DMATxHalfCplt:
 7760              	.LFB173:
3014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/cceCIUcs.s 			page 211


3015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
3017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7761              		.loc 1 3022 1
 7762              		.cfi_startproc
 7763              		@ args = 0, pretend = 0, frame = 16
 7764              		@ frame_needed = 1, uses_anonymous_args = 0
 7765 0000 80B5     		push	{r7, lr}
 7766              	.LCFI233:
 7767              		.cfi_def_cfa_offset 8
 7768              		.cfi_offset 7, -8
 7769              		.cfi_offset 14, -4
 7770 0002 84B0     		sub	sp, sp, #16
 7771              	.LCFI234:
 7772              		.cfi_def_cfa_offset 24
 7773 0004 00AF     		add	r7, sp, #0
 7774              	.LCFI235:
 7775              		.cfi_def_cfa_register 7
 7776 0006 7860     		str	r0, [r7, #4]
3023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7777              		.loc 1 3023 23
 7778 0008 7B68     		ldr	r3, [r7, #4]
 7779 000a 9B6B     		ldr	r3, [r3, #56]
 7780 000c FB60     		str	r3, [r7, #12]
3024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 7781              		.loc 1 3030 3
 7782 000e F868     		ldr	r0, [r7, #12]
 7783 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 7784              		.loc 1 3032 1
 7785 0014 00BF     		nop
 7786 0016 1037     		adds	r7, r7, #16
 7787              	.LCFI236:
 7788              		.cfi_def_cfa_offset 8
 7789 0018 BD46     		mov	sp, r7
 7790              	.LCFI237:
 7791              		.cfi_def_cfa_register 13
 7792              		@ sp needed
 7793 001a 80BD     		pop	{r7, pc}
 7794              		.cfi_endproc
 7795              	.LFE173:
 7797              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 7798              		.align	1
 7799              		.syntax unified
 7800              		.thumb
ARM GAS  /tmp/cceCIUcs.s 			page 212


 7801              		.thumb_func
 7802              		.fpu fpv4-sp-d16
 7804              	UART_DMAReceiveCplt:
 7805              	.LFB174:
3033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
3036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 7806              		.loc 1 3041 1
 7807              		.cfi_startproc
 7808              		@ args = 0, pretend = 0, frame = 112
 7809              		@ frame_needed = 1, uses_anonymous_args = 0
 7810 0000 80B5     		push	{r7, lr}
 7811              	.LCFI238:
 7812              		.cfi_def_cfa_offset 8
 7813              		.cfi_offset 7, -8
 7814              		.cfi_offset 14, -4
 7815 0002 9CB0     		sub	sp, sp, #112
 7816              	.LCFI239:
 7817              		.cfi_def_cfa_offset 120
 7818 0004 00AF     		add	r7, sp, #0
 7819              	.LCFI240:
 7820              		.cfi_def_cfa_register 7
 7821 0006 7860     		str	r0, [r7, #4]
3042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7822              		.loc 1 3042 23
 7823 0008 7B68     		ldr	r3, [r7, #4]
 7824 000a 9B6B     		ldr	r3, [r3, #56]
 7825 000c FB66     		str	r3, [r7, #108]
3043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Normal mode*/
3044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 7826              		.loc 1 3044 12
 7827 000e 7B68     		ldr	r3, [r7, #4]
 7828 0010 1B68     		ldr	r3, [r3]
 7829              		.loc 1 3044 22
 7830 0012 1B68     		ldr	r3, [r3]
 7831              		.loc 1 3044 27
 7832 0014 03F48073 		and	r3, r3, #256
 7833              		.loc 1 3044 6
 7834 0018 002B     		cmp	r3, #0
 7835 001a 72D1     		bne	.L414
3045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0U;
 7836              		.loc 1 3046 24
 7837 001c FB6E     		ldr	r3, [r7, #108]
 7838 001e 0022     		movs	r2, #0
 7839 0020 DA85     		strh	r2, [r3, #46]	@ movhi
 7840              	.L417:
 7841              	.LBB569:
3047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
ARM GAS  /tmp/cceCIUcs.s 			page 213


 7842              		.loc 1 3049 5 discriminator 1
 7843 0022 FB6E     		ldr	r3, [r7, #108]
 7844 0024 1B68     		ldr	r3, [r3]
 7845 0026 0C33     		adds	r3, r3, #12
 7846 0028 FB64     		str	r3, [r7, #76]
 7847              	.LBB570:
 7848              	.LBB571:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7849              		.loc 2 1072 4 discriminator 1
 7850 002a FB6C     		ldr	r3, [r7, #76]
 7851              		.syntax unified
 7852              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7853 002c 53E8003F 		ldrex r3, [r3]
 7854              	@ 0 "" 2
 7855              		.thumb
 7856              		.syntax unified
 7857 0030 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7858              		.loc 2 1073 10 discriminator 1
 7859 0032 BB6C     		ldr	r3, [r7, #72]
 7860              	.LBE571:
 7861              	.LBE570:
 7862              		.loc 1 3049 5 discriminator 1
 7863 0034 23F48073 		bic	r3, r3, #256
 7864 0038 BB66     		str	r3, [r7, #104]
 7865 003a FB6E     		ldr	r3, [r7, #108]
 7866 003c 1B68     		ldr	r3, [r3]
 7867 003e 0C33     		adds	r3, r3, #12
 7868 0040 BA6E     		ldr	r2, [r7, #104]
 7869 0042 BA65     		str	r2, [r7, #88]
 7870 0044 7B65     		str	r3, [r7, #84]
 7871              	.LBB572:
 7872              	.LBB573:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7873              		.loc 2 1123 4 discriminator 1
 7874 0046 796D     		ldr	r1, [r7, #84]
 7875 0048 BA6D     		ldr	r2, [r7, #88]
 7876              		.syntax unified
 7877              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7878 004a 41E80023 		strex r3, r2, [r1]
 7879              	@ 0 "" 2
 7880              		.thumb
 7881              		.syntax unified
 7882 004e 3B65     		str	r3, [r7, #80]
 7883              		.loc 2 1124 10 discriminator 1
 7884 0050 3B6D     		ldr	r3, [r7, #80]
 7885              	.LBE573:
 7886              	.LBE572:
 7887              		.loc 1 3049 5 discriminator 1
 7888 0052 002B     		cmp	r3, #0
 7889 0054 E5D1     		bne	.L417
 7890              	.L420:
 7891              	.LBE569:
 7892              	.LBB574:
3050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7893              		.loc 1 3050 5 discriminator 1
 7894 0056 FB6E     		ldr	r3, [r7, #108]
ARM GAS  /tmp/cceCIUcs.s 			page 214


 7895 0058 1B68     		ldr	r3, [r3]
 7896 005a 1433     		adds	r3, r3, #20
 7897 005c BB63     		str	r3, [r7, #56]
 7898              	.LBB575:
 7899              	.LBB576:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7900              		.loc 2 1072 4 discriminator 1
 7901 005e BB6B     		ldr	r3, [r7, #56]
 7902              		.syntax unified
 7903              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7904 0060 53E8003F 		ldrex r3, [r3]
 7905              	@ 0 "" 2
 7906              		.thumb
 7907              		.syntax unified
 7908 0064 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7909              		.loc 2 1073 10 discriminator 1
 7910 0066 7B6B     		ldr	r3, [r7, #52]
 7911              	.LBE576:
 7912              	.LBE575:
 7913              		.loc 1 3050 5 discriminator 1
 7914 0068 23F00103 		bic	r3, r3, #1
 7915 006c 7B66     		str	r3, [r7, #100]
 7916 006e FB6E     		ldr	r3, [r7, #108]
 7917 0070 1B68     		ldr	r3, [r3]
 7918 0072 1433     		adds	r3, r3, #20
 7919 0074 7A6E     		ldr	r2, [r7, #100]
 7920 0076 7A64     		str	r2, [r7, #68]
 7921 0078 3B64     		str	r3, [r7, #64]
 7922              	.LBB577:
 7923              	.LBB578:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7924              		.loc 2 1123 4 discriminator 1
 7925 007a 396C     		ldr	r1, [r7, #64]
 7926 007c 7A6C     		ldr	r2, [r7, #68]
 7927              		.syntax unified
 7928              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7929 007e 41E80023 		strex r3, r2, [r1]
 7930              	@ 0 "" 2
 7931              		.thumb
 7932              		.syntax unified
 7933 0082 FB63     		str	r3, [r7, #60]
 7934              		.loc 2 1124 10 discriminator 1
 7935 0084 FB6B     		ldr	r3, [r7, #60]
 7936              	.LBE578:
 7937              	.LBE577:
 7938              		.loc 1 3050 5 discriminator 1
 7939 0086 002B     		cmp	r3, #0
 7940 0088 E5D1     		bne	.L420
 7941              	.L423:
 7942              	.LBE574:
 7943              	.LBB579:
3051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
3053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
3054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 7944              		.loc 1 3054 5 discriminator 1
ARM GAS  /tmp/cceCIUcs.s 			page 215


 7945 008a FB6E     		ldr	r3, [r7, #108]
 7946 008c 1B68     		ldr	r3, [r3]
 7947 008e 1433     		adds	r3, r3, #20
 7948 0090 7B62     		str	r3, [r7, #36]
 7949              	.LBB580:
 7950              	.LBB581:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7951              		.loc 2 1072 4 discriminator 1
 7952 0092 7B6A     		ldr	r3, [r7, #36]
 7953              		.syntax unified
 7954              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7955 0094 53E8003F 		ldrex r3, [r3]
 7956              	@ 0 "" 2
 7957              		.thumb
 7958              		.syntax unified
 7959 0098 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7960              		.loc 2 1073 10 discriminator 1
 7961 009a 3B6A     		ldr	r3, [r7, #32]
 7962              	.LBE581:
 7963              	.LBE580:
 7964              		.loc 1 3054 5 discriminator 1
 7965 009c 23F04003 		bic	r3, r3, #64
 7966 00a0 3B66     		str	r3, [r7, #96]
 7967 00a2 FB6E     		ldr	r3, [r7, #108]
 7968 00a4 1B68     		ldr	r3, [r3]
 7969 00a6 1433     		adds	r3, r3, #20
 7970 00a8 3A6E     		ldr	r2, [r7, #96]
 7971 00aa 3A63     		str	r2, [r7, #48]
 7972 00ac FB62     		str	r3, [r7, #44]
 7973              	.LBB582:
 7974              	.LBB583:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7975              		.loc 2 1123 4 discriminator 1
 7976 00ae F96A     		ldr	r1, [r7, #44]
 7977 00b0 3A6B     		ldr	r2, [r7, #48]
 7978              		.syntax unified
 7979              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7980 00b2 41E80023 		strex r3, r2, [r1]
 7981              	@ 0 "" 2
 7982              		.thumb
 7983              		.syntax unified
 7984 00b6 BB62     		str	r3, [r7, #40]
 7985              		.loc 2 1124 10 discriminator 1
 7986 00b8 BB6A     		ldr	r3, [r7, #40]
 7987              	.LBE583:
 7988              	.LBE582:
 7989              		.loc 1 3054 5 discriminator 1
 7990 00ba 002B     		cmp	r3, #0
 7991 00bc E5D1     		bne	.L423
 7992              	.LBE579:
3055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 7993              		.loc 1 3057 20
 7994 00be FB6E     		ldr	r3, [r7, #108]
 7995 00c0 2022     		movs	r2, #32
ARM GAS  /tmp/cceCIUcs.s 			page 216


 7996 00c2 83F83E20 		strb	r2, [r3, #62]
3058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7997              		.loc 1 3060 14
 7998 00c6 FB6E     		ldr	r3, [r7, #108]
 7999 00c8 1B6B     		ldr	r3, [r3, #48]
 8000              		.loc 1 3060 8
 8001 00ca 012B     		cmp	r3, #1
 8002 00cc 19D1     		bne	.L414
 8003              	.L426:
 8004              	.LBB584:
3061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005              		.loc 1 3062 7 discriminator 1
 8006 00ce FB6E     		ldr	r3, [r7, #108]
 8007 00d0 1B68     		ldr	r3, [r3]
 8008 00d2 0C33     		adds	r3, r3, #12
 8009 00d4 3B61     		str	r3, [r7, #16]
 8010              	.LBB585:
 8011              	.LBB586:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8012              		.loc 2 1072 4 discriminator 1
 8013 00d6 3B69     		ldr	r3, [r7, #16]
 8014              		.syntax unified
 8015              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8016 00d8 53E8003F 		ldrex r3, [r3]
 8017              	@ 0 "" 2
 8018              		.thumb
 8019              		.syntax unified
 8020 00dc FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8021              		.loc 2 1073 10 discriminator 1
 8022 00de FB68     		ldr	r3, [r7, #12]
 8023              	.LBE586:
 8024              	.LBE585:
 8025              		.loc 1 3062 7 discriminator 1
 8026 00e0 23F01003 		bic	r3, r3, #16
 8027 00e4 FB65     		str	r3, [r7, #92]
 8028 00e6 FB6E     		ldr	r3, [r7, #108]
 8029 00e8 1B68     		ldr	r3, [r3]
 8030 00ea 0C33     		adds	r3, r3, #12
 8031 00ec FA6D     		ldr	r2, [r7, #92]
 8032 00ee FA61     		str	r2, [r7, #28]
 8033 00f0 BB61     		str	r3, [r7, #24]
 8034              	.LBB587:
 8035              	.LBB588:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8036              		.loc 2 1123 4 discriminator 1
 8037 00f2 B969     		ldr	r1, [r7, #24]
 8038 00f4 FA69     		ldr	r2, [r7, #28]
 8039              		.syntax unified
 8040              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8041 00f6 41E80023 		strex r3, r2, [r1]
 8042              	@ 0 "" 2
 8043              		.thumb
 8044              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 217


 8045 00fa 7B61     		str	r3, [r7, #20]
 8046              		.loc 2 1124 10 discriminator 1
 8047 00fc 7B69     		ldr	r3, [r7, #20]
 8048              	.LBE588:
 8049              	.LBE587:
 8050              		.loc 1 3062 7 discriminator 1
 8051 00fe 002B     		cmp	r3, #0
 8052 0100 E5D1     		bne	.L426
 8053              	.L414:
 8054              	.LBE584:
3063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check current reception Mode :
3067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8055              		.loc 1 3068 12
 8056 0102 FB6E     		ldr	r3, [r7, #108]
 8057 0104 1B6B     		ldr	r3, [r3, #48]
 8058              		.loc 1 3068 6
 8059 0106 012B     		cmp	r3, #1
 8060 0108 06D1     		bne	.L427
3069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8061              		.loc 1 3075 5
 8062 010a FB6E     		ldr	r3, [r7, #108]
 8063 010c 9B8D     		ldrh	r3, [r3, #44]
 8064 010e 1946     		mov	r1, r3
 8065 0110 F86E     		ldr	r0, [r7, #108]
 8066 0112 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
3079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8067              		.loc 1 3089 1
 8068 0116 02E0     		b	.L429
 8069              	.L427:
3086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 8070              		.loc 1 3086 5
 8071 0118 F86E     		ldr	r0, [r7, #108]
 8072 011a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 8073              	.L429:
ARM GAS  /tmp/cceCIUcs.s 			page 218


 8074              		.loc 1 3089 1
 8075 011e 00BF     		nop
 8076 0120 7037     		adds	r7, r7, #112
 8077              	.LCFI241:
 8078              		.cfi_def_cfa_offset 8
 8079 0122 BD46     		mov	sp, r7
 8080              	.LCFI242:
 8081              		.cfi_def_cfa_register 13
 8082              		@ sp needed
 8083 0124 80BD     		pop	{r7, pc}
 8084              		.cfi_endproc
 8085              	.LFE174:
 8087              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 8088              		.align	1
 8089              		.syntax unified
 8090              		.thumb
 8091              		.thumb_func
 8092              		.fpu fpv4-sp-d16
 8094              	UART_DMARxHalfCplt:
 8095              	.LFB175:
3090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
3093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8096              		.loc 1 3098 1
 8097              		.cfi_startproc
 8098              		@ args = 0, pretend = 0, frame = 16
 8099              		@ frame_needed = 1, uses_anonymous_args = 0
 8100 0000 80B5     		push	{r7, lr}
 8101              	.LCFI243:
 8102              		.cfi_def_cfa_offset 8
 8103              		.cfi_offset 7, -8
 8104              		.cfi_offset 14, -4
 8105 0002 84B0     		sub	sp, sp, #16
 8106              	.LCFI244:
 8107              		.cfi_def_cfa_offset 24
 8108 0004 00AF     		add	r7, sp, #0
 8109              	.LCFI245:
 8110              		.cfi_def_cfa_register 7
 8111 0006 7860     		str	r0, [r7, #4]
3099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8112              		.loc 1 3099 23
 8113 0008 7B68     		ldr	r3, [r7, #4]
 8114 000a 9B6B     		ldr	r3, [r3, #56]
 8115 000c FB60     		str	r3, [r7, #12]
3100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check current reception Mode :
3102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8116              		.loc 1 3103 12
 8117 000e FB68     		ldr	r3, [r7, #12]
 8118 0010 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/cceCIUcs.s 			page 219


 8119              		.loc 1 3103 6
 8120 0012 012B     		cmp	r3, #1
 8121 0014 08D1     		bne	.L431
3104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize / 2U);
3108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8122              		.loc 1 3110 44
 8123 0016 FB68     		ldr	r3, [r7, #12]
 8124 0018 9B8D     		ldrh	r3, [r3, #44]
 8125              		.loc 1 3110 5
 8126 001a 5B08     		lsrs	r3, r3, #1
 8127 001c 9BB2     		uxth	r3, r3
 8128 001e 1946     		mov	r1, r3
 8129 0020 F868     		ldr	r0, [r7, #12]
 8130 0022 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
3114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8131              		.loc 1 3124 1
 8132 0026 02E0     		b	.L433
 8133              	.L431:
3121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 8134              		.loc 1 3121 5
 8135 0028 F868     		ldr	r0, [r7, #12]
 8136 002a FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 8137              	.L433:
 8138              		.loc 1 3124 1
 8139 002e 00BF     		nop
 8140 0030 1037     		adds	r7, r7, #16
 8141              	.LCFI246:
 8142              		.cfi_def_cfa_offset 8
 8143 0032 BD46     		mov	sp, r7
 8144              	.LCFI247:
 8145              		.cfi_def_cfa_register 13
 8146              		@ sp needed
 8147 0034 80BD     		pop	{r7, pc}
 8148              		.cfi_endproc
 8149              	.LFE175:
 8151              		.section	.text.UART_DMAError,"ax",%progbits
 8152              		.align	1
 8153              		.syntax unified
 8154              		.thumb
ARM GAS  /tmp/cceCIUcs.s 			page 220


 8155              		.thumb_func
 8156              		.fpu fpv4-sp-d16
 8158              	UART_DMAError:
 8159              	.LFB176:
3125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
3128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8160              		.loc 1 3133 1
 8161              		.cfi_startproc
 8162              		@ args = 0, pretend = 0, frame = 16
 8163              		@ frame_needed = 1, uses_anonymous_args = 0
 8164 0000 80B5     		push	{r7, lr}
 8165              	.LCFI248:
 8166              		.cfi_def_cfa_offset 8
 8167              		.cfi_offset 7, -8
 8168              		.cfi_offset 14, -4
 8169 0002 84B0     		sub	sp, sp, #16
 8170              	.LCFI249:
 8171              		.cfi_def_cfa_offset 24
 8172 0004 00AF     		add	r7, sp, #0
 8173              	.LCFI250:
 8174              		.cfi_def_cfa_register 7
 8175 0006 7860     		str	r0, [r7, #4]
3134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 8176              		.loc 1 3134 12
 8177 0008 0023     		movs	r3, #0
 8178 000a FB60     		str	r3, [r7, #12]
3135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8179              		.loc 1 3135 23
 8180 000c 7B68     		ldr	r3, [r7, #4]
 8181 000e 9B6B     		ldr	r3, [r3, #56]
 8182 0010 BB60     		str	r3, [r7, #8]
3136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8183              		.loc 1 3138 16
 8184 0012 BB68     		ldr	r3, [r7, #8]
 8185 0014 1B68     		ldr	r3, [r3]
 8186 0016 5B69     		ldr	r3, [r3, #20]
 8187 0018 03F08003 		and	r3, r3, #128
 8188 001c 802B     		cmp	r3, #128
 8189 001e 0CBF     		ite	eq
 8190 0020 0123     		moveq	r3, #1
 8191 0022 0023     		movne	r3, #0
 8192 0024 DBB2     		uxtb	r3, r3
 8193              		.loc 1 3138 14
 8194 0026 FB60     		str	r3, [r7, #12]
3139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8195              		.loc 1 3139 13
 8196 0028 BB68     		ldr	r3, [r7, #8]
 8197 002a 93F83D30 		ldrb	r3, [r3, #61]
ARM GAS  /tmp/cceCIUcs.s 			page 221


 8198 002e DBB2     		uxtb	r3, r3
 8199              		.loc 1 3139 6
 8200 0030 212B     		cmp	r3, #33
 8201 0032 08D1     		bne	.L435
 8202              		.loc 1 3139 49 discriminator 1
 8203 0034 FB68     		ldr	r3, [r7, #12]
 8204 0036 002B     		cmp	r3, #0
 8205 0038 05D0     		beq	.L435
3140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 8206              		.loc 1 3141 24
 8207 003a BB68     		ldr	r3, [r7, #8]
 8208 003c 0022     		movs	r2, #0
 8209 003e DA84     		strh	r2, [r3, #38]	@ movhi
3142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 8210              		.loc 1 3142 5
 8211 0040 B868     		ldr	r0, [r7, #8]
 8212 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 8213              	.L435:
3143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8214              		.loc 1 3146 16
 8215 0046 BB68     		ldr	r3, [r7, #8]
 8216 0048 1B68     		ldr	r3, [r3]
 8217 004a 5B69     		ldr	r3, [r3, #20]
 8218 004c 03F04003 		and	r3, r3, #64
 8219 0050 402B     		cmp	r3, #64
 8220 0052 0CBF     		ite	eq
 8221 0054 0123     		moveq	r3, #1
 8222 0056 0023     		movne	r3, #0
 8223 0058 DBB2     		uxtb	r3, r3
 8224              		.loc 1 3146 14
 8225 005a FB60     		str	r3, [r7, #12]
3147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8226              		.loc 1 3147 13
 8227 005c BB68     		ldr	r3, [r7, #8]
 8228 005e 93F83E30 		ldrb	r3, [r3, #62]
 8229 0062 DBB2     		uxtb	r3, r3
 8230              		.loc 1 3147 6
 8231 0064 222B     		cmp	r3, #34
 8232 0066 08D1     		bne	.L436
 8233              		.loc 1 3147 50 discriminator 1
 8234 0068 FB68     		ldr	r3, [r7, #12]
 8235 006a 002B     		cmp	r3, #0
 8236 006c 05D0     		beq	.L436
3148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 8237              		.loc 1 3149 24
 8238 006e BB68     		ldr	r3, [r7, #8]
 8239 0070 0022     		movs	r2, #0
 8240 0072 DA85     		strh	r2, [r3, #46]	@ movhi
3150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 8241              		.loc 1 3150 5
 8242 0074 B868     		ldr	r0, [r7, #8]
 8243 0076 FFF7FEFF 		bl	UART_EndRxTransfer
ARM GAS  /tmp/cceCIUcs.s 			page 222


 8244              	.L436:
3151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8245              		.loc 1 3153 20
 8246 007a BB68     		ldr	r3, [r7, #8]
 8247 007c 1B6C     		ldr	r3, [r3, #64]
 8248 007e 43F01002 		orr	r2, r3, #16
 8249 0082 BB68     		ldr	r3, [r7, #8]
 8250 0084 1A64     		str	r2, [r3, #64]
3154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call registered error callback*/
3156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCallback(huart);
3157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call legacy weak error callback*/
3159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 8251              		.loc 1 3159 3
 8252 0086 B868     		ldr	r0, [r7, #8]
 8253 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8254              		.loc 1 3161 1
 8255 008c 00BF     		nop
 8256 008e 1037     		adds	r7, r7, #16
 8257              	.LCFI251:
 8258              		.cfi_def_cfa_offset 8
 8259 0090 BD46     		mov	sp, r7
 8260              	.LCFI252:
 8261              		.cfi_def_cfa_register 13
 8262              		@ sp needed
 8263 0092 80BD     		pop	{r7, pc}
 8264              		.cfi_endproc
 8265              	.LFE176:
 8267              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 8268              		.align	1
 8269              		.syntax unified
 8270              		.thumb
 8271              		.thumb_func
 8272              		.fpu fpv4-sp-d16
 8274              	UART_WaitOnFlagUntilTimeout:
 8275              	.LFB177:
3162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout. It waits
3165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         until a flag is no longer in the specified status.
3166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
3169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Status The actual Flag status (SET or RESET).
3170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Tickstart Tick start value
3171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
3172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
3173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
3175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                                      uint32_t Tickstart, uint32_t Timeout)
3176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8276              		.loc 1 3176 1
ARM GAS  /tmp/cceCIUcs.s 			page 223


 8277              		.cfi_startproc
 8278              		@ args = 4, pretend = 0, frame = 64
 8279              		@ frame_needed = 1, uses_anonymous_args = 0
 8280 0000 80B5     		push	{r7, lr}
 8281              	.LCFI253:
 8282              		.cfi_def_cfa_offset 8
 8283              		.cfi_offset 7, -8
 8284              		.cfi_offset 14, -4
 8285 0002 90B0     		sub	sp, sp, #64
 8286              	.LCFI254:
 8287              		.cfi_def_cfa_offset 72
 8288 0004 00AF     		add	r7, sp, #0
 8289              	.LCFI255:
 8290              		.cfi_def_cfa_register 7
 8291 0006 F860     		str	r0, [r7, #12]
 8292 0008 B960     		str	r1, [r7, #8]
 8293 000a 3B60     		str	r3, [r7]
 8294 000c 1346     		mov	r3, r2
 8295 000e FB71     		strb	r3, [r7, #7]
3177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Wait until flag is set */
3178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8296              		.loc 1 3178 9
 8297 0010 50E0     		b	.L438
 8298              	.L447:
3179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check for the Timeout */
3181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 8299              		.loc 1 3181 8
 8300 0012 BB6C     		ldr	r3, [r7, #72]
 8301 0014 B3F1FF3F 		cmp	r3, #-1
 8302 0018 4CD0     		beq	.L438
3182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8303              		.loc 1 3183 10
 8304 001a BB6C     		ldr	r3, [r7, #72]
 8305 001c 002B     		cmp	r3, #0
 8306 001e 07D0     		beq	.L442
 8307              		.loc 1 3183 32 discriminator 1
 8308 0020 FFF7FEFF 		bl	HAL_GetTick
 8309 0024 0246     		mov	r2, r0
 8310              		.loc 1 3183 46 discriminator 1
 8311 0026 3B68     		ldr	r3, [r7]
 8312 0028 D31A     		subs	r3, r2, r3
 8313              		.loc 1 3183 27 discriminator 1
 8314 002a BA6C     		ldr	r2, [r7, #72]
 8315 002c 9A42     		cmp	r2, r3
 8316 002e 41D2     		bcs	.L438
 8317              	.L442:
 8318              	.LBB589:
3184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
3185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE
 8319              		.loc 1 3186 9 discriminator 1
 8320 0030 FB68     		ldr	r3, [r7, #12]
 8321 0032 1B68     		ldr	r3, [r3]
 8322 0034 0C33     		adds	r3, r3, #12
 8323 0036 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/cceCIUcs.s 			page 224


 8324              	.LBB590:
 8325              	.LBB591:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8326              		.loc 2 1072 4 discriminator 1
 8327 0038 BB6A     		ldr	r3, [r7, #40]
 8328              		.syntax unified
 8329              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8330 003a 53E8003F 		ldrex r3, [r3]
 8331              	@ 0 "" 2
 8332              		.thumb
 8333              		.syntax unified
 8334 003e 7B62     		str	r3, [r7, #36]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8335              		.loc 2 1073 10 discriminator 1
 8336 0040 7B6A     		ldr	r3, [r7, #36]
 8337              	.LBE591:
 8338              	.LBE590:
 8339              		.loc 1 3186 9 discriminator 1
 8340 0042 23F4D073 		bic	r3, r3, #416
 8341 0046 FB63     		str	r3, [r7, #60]
 8342 0048 FB68     		ldr	r3, [r7, #12]
 8343 004a 1B68     		ldr	r3, [r3]
 8344 004c 0C33     		adds	r3, r3, #12
 8345 004e FA6B     		ldr	r2, [r7, #60]
 8346 0050 7A63     		str	r2, [r7, #52]
 8347 0052 3B63     		str	r3, [r7, #48]
 8348              	.LBB592:
 8349              	.LBB593:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8350              		.loc 2 1123 4 discriminator 1
 8351 0054 396B     		ldr	r1, [r7, #48]
 8352 0056 7A6B     		ldr	r2, [r7, #52]
 8353              		.syntax unified
 8354              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8355 0058 41E80023 		strex r3, r2, [r1]
 8356              	@ 0 "" 2
 8357              		.thumb
 8358              		.syntax unified
 8359 005c FB62     		str	r3, [r7, #44]
 8360              		.loc 2 1124 10 discriminator 1
 8361 005e FB6A     		ldr	r3, [r7, #44]
 8362              	.LBE593:
 8363              	.LBE592:
 8364              		.loc 1 3186 9 discriminator 1
 8365 0060 002B     		cmp	r3, #0
 8366 0062 E5D1     		bne	.L442
 8367              	.L445:
 8368              	.LBE589:
 8369              	.LBB594:
3187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8370              		.loc 1 3187 9 discriminator 1
 8371 0064 FB68     		ldr	r3, [r7, #12]
 8372 0066 1B68     		ldr	r3, [r3]
 8373 0068 1433     		adds	r3, r3, #20
 8374 006a 7B61     		str	r3, [r7, #20]
 8375              	.LBB595:
 8376              	.LBB596:
ARM GAS  /tmp/cceCIUcs.s 			page 225


1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8377              		.loc 2 1072 4 discriminator 1
 8378 006c 7B69     		ldr	r3, [r7, #20]
 8379              		.syntax unified
 8380              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8381 006e 53E8003F 		ldrex r3, [r3]
 8382              	@ 0 "" 2
 8383              		.thumb
 8384              		.syntax unified
 8385 0072 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8386              		.loc 2 1073 10 discriminator 1
 8387 0074 3B69     		ldr	r3, [r7, #16]
 8388              	.LBE596:
 8389              	.LBE595:
 8390              		.loc 1 3187 9 discriminator 1
 8391 0076 23F00103 		bic	r3, r3, #1
 8392 007a BB63     		str	r3, [r7, #56]
 8393 007c FB68     		ldr	r3, [r7, #12]
 8394 007e 1B68     		ldr	r3, [r3]
 8395 0080 1433     		adds	r3, r3, #20
 8396 0082 BA6B     		ldr	r2, [r7, #56]
 8397 0084 3A62     		str	r2, [r7, #32]
 8398 0086 FB61     		str	r3, [r7, #28]
 8399              	.LBB597:
 8400              	.LBB598:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8401              		.loc 2 1123 4 discriminator 1
 8402 0088 F969     		ldr	r1, [r7, #28]
 8403 008a 3A6A     		ldr	r2, [r7, #32]
 8404              		.syntax unified
 8405              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8406 008c 41E80023 		strex r3, r2, [r1]
 8407              	@ 0 "" 2
 8408              		.thumb
 8409              		.syntax unified
 8410 0090 BB61     		str	r3, [r7, #24]
 8411              		.loc 2 1124 10 discriminator 1
 8412 0092 BB69     		ldr	r3, [r7, #24]
 8413              	.LBE598:
 8414              	.LBE597:
 8415              		.loc 1 3187 9 discriminator 1
 8416 0094 002B     		cmp	r3, #0
 8417 0096 E5D1     		bne	.L445
 8418              	.LBE594:
3188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 8419              		.loc 1 3189 24
 8420 0098 FB68     		ldr	r3, [r7, #12]
 8421 009a 2022     		movs	r2, #32
 8422 009c 83F83D20 		strb	r2, [r3, #61]
3190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 8423              		.loc 1 3190 24
 8424 00a0 FB68     		ldr	r3, [r7, #12]
 8425 00a2 2022     		movs	r2, #32
 8426 00a4 83F83E20 		strb	r2, [r3, #62]
3191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/cceCIUcs.s 			page 226


3192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Process Unlocked */
3193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 8427              		.loc 1 3193 9
 8428 00a8 FB68     		ldr	r3, [r7, #12]
 8429 00aa 0022     		movs	r2, #0
 8430 00ac 83F83C20 		strb	r2, [r3, #60]
3194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         return HAL_TIMEOUT;
 8431              		.loc 1 3195 16
 8432 00b0 0323     		movs	r3, #3
 8433 00b2 0FE0     		b	.L446
 8434              	.L438:
3178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 8435              		.loc 1 3178 11
 8436 00b4 FB68     		ldr	r3, [r7, #12]
 8437 00b6 1B68     		ldr	r3, [r3]
 8438 00b8 1A68     		ldr	r2, [r3]
 8439 00ba BB68     		ldr	r3, [r7, #8]
 8440 00bc 1340     		ands	r3, r3, r2
3178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 8441              		.loc 1 3178 50
 8442 00be BA68     		ldr	r2, [r7, #8]
 8443 00c0 9A42     		cmp	r2, r3
 8444 00c2 0CBF     		ite	eq
 8445 00c4 0123     		moveq	r3, #1
 8446 00c6 0023     		movne	r3, #0
 8447 00c8 DBB2     		uxtb	r3, r3
 8448 00ca 1A46     		mov	r2, r3
3178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 8449              		.loc 1 3178 59
 8450 00cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
3178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 8451              		.loc 1 3178 9
 8452 00ce 9A42     		cmp	r2, r3
 8453 00d0 9FD0     		beq	.L447
3196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
3197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 8454              		.loc 1 3199 10
 8455 00d2 0023     		movs	r3, #0
 8456              	.L446:
3200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8457              		.loc 1 3200 1
 8458 00d4 1846     		mov	r0, r3
 8459 00d6 4037     		adds	r7, r7, #64
 8460              	.LCFI256:
 8461              		.cfi_def_cfa_offset 8
 8462 00d8 BD46     		mov	sp, r7
 8463              	.LCFI257:
 8464              		.cfi_def_cfa_register 13
 8465              		@ sp needed
 8466 00da 80BD     		pop	{r7, pc}
 8467              		.cfi_endproc
 8468              	.LFE177:
 8470              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 8471              		.align	1
ARM GAS  /tmp/cceCIUcs.s 			page 227


 8472              		.global	UART_Start_Receive_IT
 8473              		.syntax unified
 8474              		.thumb
 8475              		.thumb_func
 8476              		.fpu fpv4-sp-d16
 8478              	UART_Start_Receive_IT:
 8479              	.LFB178:
3201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
3209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
3212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8480              		.loc 1 3214 1
 8481              		.cfi_startproc
 8482              		@ args = 0, pretend = 0, frame = 16
 8483              		@ frame_needed = 1, uses_anonymous_args = 0
 8484              		@ link register save eliminated.
 8485 0000 80B4     		push	{r7}
 8486              	.LCFI258:
 8487              		.cfi_def_cfa_offset 4
 8488              		.cfi_offset 7, -4
 8489 0002 85B0     		sub	sp, sp, #20
 8490              	.LCFI259:
 8491              		.cfi_def_cfa_offset 24
 8492 0004 00AF     		add	r7, sp, #0
 8493              	.LCFI260:
 8494              		.cfi_def_cfa_register 7
 8495 0006 F860     		str	r0, [r7, #12]
 8496 0008 B960     		str	r1, [r7, #8]
 8497 000a 1346     		mov	r3, r2
 8498 000c FB80     		strh	r3, [r7, #6]	@ movhi
3215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 8499              		.loc 1 3215 21
 8500 000e FB68     		ldr	r3, [r7, #12]
 8501 0010 BA68     		ldr	r2, [r7, #8]
 8502 0012 9A62     		str	r2, [r3, #40]
3216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferSize = Size;
 8503              		.loc 1 3216 21
 8504 0014 FB68     		ldr	r3, [r7, #12]
 8505 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 8506 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = Size;
 8507              		.loc 1 3217 22
 8508 001a FB68     		ldr	r3, [r7, #12]
 8509 001c FA88     		ldrh	r2, [r7, #6]	@ movhi
 8510 001e DA85     		strh	r2, [r3, #46]	@ movhi
3218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
ARM GAS  /tmp/cceCIUcs.s 			page 228


 8511              		.loc 1 3219 20
 8512 0020 FB68     		ldr	r3, [r7, #12]
 8513 0022 0022     		movs	r2, #0
 8514 0024 1A64     		str	r2, [r3, #64]
3220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 8515              		.loc 1 3220 18
 8516 0026 FB68     		ldr	r3, [r7, #12]
 8517 0028 2222     		movs	r2, #34
 8518 002a 83F83E20 		strb	r2, [r3, #62]
3221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
3223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 8519              		.loc 1 3223 3
 8520 002e FB68     		ldr	r3, [r7, #12]
 8521 0030 0022     		movs	r2, #0
 8522 0032 83F83C20 		strb	r2, [r3, #60]
3224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->Init.Parity != UART_PARITY_NONE)
 8523              		.loc 1 3225 18
 8524 0036 FB68     		ldr	r3, [r7, #12]
 8525 0038 1B69     		ldr	r3, [r3, #16]
 8526              		.loc 1 3225 6
 8527 003a 002B     		cmp	r3, #0
 8528 003c 07D0     		beq	.L449
3226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
3228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8529              		.loc 1 3228 5
 8530 003e FB68     		ldr	r3, [r7, #12]
 8531 0040 1B68     		ldr	r3, [r3]
 8532 0042 DA68     		ldr	r2, [r3, #12]
 8533 0044 FB68     		ldr	r3, [r7, #12]
 8534 0046 1B68     		ldr	r3, [r3]
 8535 0048 42F48072 		orr	r2, r2, #256
 8536 004c DA60     		str	r2, [r3, #12]
 8537              	.L449:
3229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8538              		.loc 1 3232 3
 8539 004e FB68     		ldr	r3, [r7, #12]
 8540 0050 1B68     		ldr	r3, [r3]
 8541 0052 5A69     		ldr	r2, [r3, #20]
 8542 0054 FB68     		ldr	r3, [r7, #12]
 8543 0056 1B68     		ldr	r3, [r3]
 8544 0058 42F00102 		orr	r2, r2, #1
 8545 005c 5A61     		str	r2, [r3, #20]
3233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the UART Data Register not empty Interrupt */
3235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8546              		.loc 1 3235 3
 8547 005e FB68     		ldr	r3, [r7, #12]
 8548 0060 1B68     		ldr	r3, [r3]
 8549 0062 DA68     		ldr	r2, [r3, #12]
 8550 0064 FB68     		ldr	r3, [r7, #12]
 8551 0066 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 229


 8552 0068 42F02002 		orr	r2, r2, #32
 8553 006c DA60     		str	r2, [r3, #12]
3236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 8554              		.loc 1 3237 10
 8555 006e 0023     		movs	r3, #0
3238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8556              		.loc 1 3238 1
 8557 0070 1846     		mov	r0, r3
 8558 0072 1437     		adds	r7, r7, #20
 8559              	.LCFI261:
 8560              		.cfi_def_cfa_offset 4
 8561 0074 BD46     		mov	sp, r7
 8562              	.LCFI262:
 8563              		.cfi_def_cfa_register 13
 8564              		@ sp needed
 8565 0076 5DF8047B 		ldr	r7, [sp], #4
 8566              	.LCFI263:
 8567              		.cfi_restore 7
 8568              		.cfi_def_cfa_offset 0
 8569 007a 7047     		bx	lr
 8570              		.cfi_endproc
 8571              	.LFE178:
 8573              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 8574              		.align	1
 8575              		.global	UART_Start_Receive_DMA
 8576              		.syntax unified
 8577              		.thumb
 8578              		.thumb_func
 8579              		.fpu fpv4-sp-d16
 8581              	UART_Start_Receive_DMA:
 8582              	.LFB179:
3239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
3247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
3250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8583              		.loc 1 3252 1
 8584              		.cfi_startproc
 8585              		@ args = 0, pretend = 0, frame = 96
 8586              		@ frame_needed = 1, uses_anonymous_args = 0
 8587 0000 80B5     		push	{r7, lr}
 8588              	.LCFI264:
 8589              		.cfi_def_cfa_offset 8
 8590              		.cfi_offset 7, -8
 8591              		.cfi_offset 14, -4
 8592 0002 98B0     		sub	sp, sp, #96
 8593              	.LCFI265:
ARM GAS  /tmp/cceCIUcs.s 			page 230


 8594              		.cfi_def_cfa_offset 104
 8595 0004 00AF     		add	r7, sp, #0
 8596              	.LCFI266:
 8597              		.cfi_def_cfa_register 7
 8598 0006 F860     		str	r0, [r7, #12]
 8599 0008 B960     		str	r1, [r7, #8]
 8600 000a 1346     		mov	r3, r2
 8601 000c FB80     		strh	r3, [r7, #6]	@ movhi
3253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t *tmp;
3254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 8602              		.loc 1 3255 21
 8603 000e BA68     		ldr	r2, [r7, #8]
 8604 0010 FB68     		ldr	r3, [r7, #12]
 8605 0012 9A62     		str	r2, [r3, #40]
3256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferSize = Size;
 8606              		.loc 1 3256 21
 8607 0014 FB68     		ldr	r3, [r7, #12]
 8608 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 8609 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8610              		.loc 1 3258 20
 8611 001a FB68     		ldr	r3, [r7, #12]
 8612 001c 0022     		movs	r2, #0
 8613 001e 1A64     		str	r2, [r3, #64]
3259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 8614              		.loc 1 3259 18
 8615 0020 FB68     		ldr	r3, [r7, #12]
 8616 0022 2222     		movs	r2, #34
 8617 0024 83F83E20 		strb	r2, [r3, #62]
3260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART DMA transfer complete callback */
3262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8618              		.loc 1 3262 8
 8619 0028 FB68     		ldr	r3, [r7, #12]
 8620 002a 9B6B     		ldr	r3, [r3, #56]
 8621              		.loc 1 3262 35
 8622 002c 404A     		ldr	r2, .L463
 8623 002e DA63     		str	r2, [r3, #60]
3263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART DMA Half transfer complete callback */
3265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8624              		.loc 1 3265 8
 8625 0030 FB68     		ldr	r3, [r7, #12]
 8626 0032 9B6B     		ldr	r3, [r3, #56]
 8627              		.loc 1 3265 39
 8628 0034 3F4A     		ldr	r2, .L463+4
 8629 0036 1A64     		str	r2, [r3, #64]
3266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the DMA error callback */
3268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferErrorCallback = UART_DMAError;
 8630              		.loc 1 3268 8
 8631 0038 FB68     		ldr	r3, [r7, #12]
 8632 003a 9B6B     		ldr	r3, [r3, #56]
 8633              		.loc 1 3268 36
 8634 003c 3E4A     		ldr	r2, .L463+8
ARM GAS  /tmp/cceCIUcs.s 			page 231


 8635 003e DA64     		str	r2, [r3, #76]
3269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the DMA abort callback */
3271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 8636              		.loc 1 3271 8
 8637 0040 FB68     		ldr	r3, [r7, #12]
 8638 0042 9B6B     		ldr	r3, [r3, #56]
 8639              		.loc 1 3271 36
 8640 0044 0022     		movs	r2, #0
 8641 0046 1A65     		str	r2, [r3, #80]
3272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the DMA stream */
3274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmp = (uint32_t *)&pData;
 8642              		.loc 1 3274 7
 8643 0048 07F10803 		add	r3, r7, #8
 8644 004c FB65     		str	r3, [r7, #92]
3275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8645              		.loc 1 3275 3
 8646 004e FB68     		ldr	r3, [r7, #12]
 8647 0050 986B     		ldr	r0, [r3, #56]
 8648              		.loc 1 3275 51
 8649 0052 FB68     		ldr	r3, [r7, #12]
 8650 0054 1B68     		ldr	r3, [r3]
 8651              		.loc 1 3275 45
 8652 0056 0433     		adds	r3, r3, #4
 8653              		.loc 1 3275 3
 8654 0058 1946     		mov	r1, r3
 8655 005a FB6D     		ldr	r3, [r7, #92]
 8656 005c 1A68     		ldr	r2, [r3]
 8657 005e FB88     		ldrh	r3, [r7, #6]
 8658 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8659              	.LBB599:
3276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the secon
3278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_CLEAR_OREFLAG(huart);
 8660              		.loc 1 3278 3
 8661 0064 0023     		movs	r3, #0
 8662 0066 3B61     		str	r3, [r7, #16]
 8663 0068 FB68     		ldr	r3, [r7, #12]
 8664 006a 1B68     		ldr	r3, [r3]
 8665 006c 1B68     		ldr	r3, [r3]
 8666 006e 3B61     		str	r3, [r7, #16]
 8667 0070 FB68     		ldr	r3, [r7, #12]
 8668 0072 1B68     		ldr	r3, [r3]
 8669 0074 5B68     		ldr	r3, [r3, #4]
 8670 0076 3B61     		str	r3, [r7, #16]
 8671 0078 3B69     		ldr	r3, [r7, #16]
 8672              	.LBE599:
3279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
3281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 8673              		.loc 1 3281 3
 8674 007a FB68     		ldr	r3, [r7, #12]
 8675 007c 0022     		movs	r2, #0
 8676 007e 83F83C20 		strb	r2, [r3, #60]
3282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->Init.Parity != UART_PARITY_NONE)
ARM GAS  /tmp/cceCIUcs.s 			page 232


 8677              		.loc 1 3283 18
 8678 0082 FB68     		ldr	r3, [r7, #12]
 8679 0084 1B69     		ldr	r3, [r3, #16]
 8680              		.loc 1 3283 6
 8681 0086 002B     		cmp	r3, #0
 8682 0088 19D0     		beq	.L458
 8683              	.L455:
 8684              	.LBB600:
3284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
3286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8685              		.loc 1 3286 5 discriminator 1
 8686 008a FB68     		ldr	r3, [r7, #12]
 8687 008c 1B68     		ldr	r3, [r3]
 8688 008e 0C33     		adds	r3, r3, #12
 8689 0090 3B64     		str	r3, [r7, #64]
 8690              	.LBB601:
 8691              	.LBB602:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8692              		.loc 2 1072 4 discriminator 1
 8693 0092 3B6C     		ldr	r3, [r7, #64]
 8694              		.syntax unified
 8695              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8696 0094 53E8003F 		ldrex r3, [r3]
 8697              	@ 0 "" 2
 8698              		.thumb
 8699              		.syntax unified
 8700 0098 FB63     		str	r3, [r7, #60]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8701              		.loc 2 1073 10 discriminator 1
 8702 009a FB6B     		ldr	r3, [r7, #60]
 8703              	.LBE602:
 8704              	.LBE601:
 8705              		.loc 1 3286 5 discriminator 1
 8706 009c 43F48073 		orr	r3, r3, #256
 8707 00a0 BB65     		str	r3, [r7, #88]
 8708 00a2 FB68     		ldr	r3, [r7, #12]
 8709 00a4 1B68     		ldr	r3, [r3]
 8710 00a6 0C33     		adds	r3, r3, #12
 8711 00a8 BA6D     		ldr	r2, [r7, #88]
 8712 00aa FA64     		str	r2, [r7, #76]
 8713 00ac BB64     		str	r3, [r7, #72]
 8714              	.LBB603:
 8715              	.LBB604:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8716              		.loc 2 1123 4 discriminator 1
 8717 00ae B96C     		ldr	r1, [r7, #72]
 8718 00b0 FA6C     		ldr	r2, [r7, #76]
 8719              		.syntax unified
 8720              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8721 00b2 41E80023 		strex r3, r2, [r1]
 8722              	@ 0 "" 2
 8723              		.thumb
 8724              		.syntax unified
 8725 00b6 7B64     		str	r3, [r7, #68]
 8726              		.loc 2 1124 10 discriminator 1
 8727 00b8 7B6C     		ldr	r3, [r7, #68]
ARM GAS  /tmp/cceCIUcs.s 			page 233


 8728              	.LBE604:
 8729              	.LBE603:
 8730              		.loc 1 3286 5 discriminator 1
 8731 00ba 002B     		cmp	r3, #0
 8732 00bc E5D1     		bne	.L455
 8733              	.L458:
 8734              	.LBE600:
 8735              	.LBB605:
3287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8736              		.loc 1 3290 3 discriminator 1
 8737 00be FB68     		ldr	r3, [r7, #12]
 8738 00c0 1B68     		ldr	r3, [r3]
 8739 00c2 1433     		adds	r3, r3, #20
 8740 00c4 FB62     		str	r3, [r7, #44]
 8741              	.LBB606:
 8742              	.LBB607:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8743              		.loc 2 1072 4 discriminator 1
 8744 00c6 FB6A     		ldr	r3, [r7, #44]
 8745              		.syntax unified
 8746              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8747 00c8 53E8003F 		ldrex r3, [r3]
 8748              	@ 0 "" 2
 8749              		.thumb
 8750              		.syntax unified
 8751 00cc BB62     		str	r3, [r7, #40]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8752              		.loc 2 1073 10 discriminator 1
 8753 00ce BB6A     		ldr	r3, [r7, #40]
 8754              	.LBE607:
 8755              	.LBE606:
 8756              		.loc 1 3290 3 discriminator 1
 8757 00d0 43F00103 		orr	r3, r3, #1
 8758 00d4 7B65     		str	r3, [r7, #84]
 8759 00d6 FB68     		ldr	r3, [r7, #12]
 8760 00d8 1B68     		ldr	r3, [r3]
 8761 00da 1433     		adds	r3, r3, #20
 8762 00dc 7A6D     		ldr	r2, [r7, #84]
 8763 00de BA63     		str	r2, [r7, #56]
 8764 00e0 7B63     		str	r3, [r7, #52]
 8765              	.LBB608:
 8766              	.LBB609:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8767              		.loc 2 1123 4 discriminator 1
 8768 00e2 796B     		ldr	r1, [r7, #52]
 8769 00e4 BA6B     		ldr	r2, [r7, #56]
 8770              		.syntax unified
 8771              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8772 00e6 41E80023 		strex r3, r2, [r1]
 8773              	@ 0 "" 2
 8774              		.thumb
 8775              		.syntax unified
 8776 00ea 3B63     		str	r3, [r7, #48]
 8777              		.loc 2 1124 10 discriminator 1
ARM GAS  /tmp/cceCIUcs.s 			page 234


 8778 00ec 3B6B     		ldr	r3, [r7, #48]
 8779              	.LBE609:
 8780              	.LBE608:
 8781              		.loc 1 3290 3 discriminator 1
 8782 00ee 002B     		cmp	r3, #0
 8783 00f0 E5D1     		bne	.L458
 8784              	.L461:
 8785              	.LBE605:
 8786              	.LBB610:
3291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   in the UART CR3 register */
3294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8787              		.loc 1 3294 3 discriminator 1
 8788 00f2 FB68     		ldr	r3, [r7, #12]
 8789 00f4 1B68     		ldr	r3, [r3]
 8790 00f6 1433     		adds	r3, r3, #20
 8791 00f8 BB61     		str	r3, [r7, #24]
 8792              	.LBB611:
 8793              	.LBB612:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8794              		.loc 2 1072 4 discriminator 1
 8795 00fa BB69     		ldr	r3, [r7, #24]
 8796              		.syntax unified
 8797              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8798 00fc 53E8003F 		ldrex r3, [r3]
 8799              	@ 0 "" 2
 8800              		.thumb
 8801              		.syntax unified
 8802 0100 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8803              		.loc 2 1073 10 discriminator 1
 8804 0102 7B69     		ldr	r3, [r7, #20]
 8805              	.LBE612:
 8806              	.LBE611:
 8807              		.loc 1 3294 3 discriminator 1
 8808 0104 43F04003 		orr	r3, r3, #64
 8809 0108 3B65     		str	r3, [r7, #80]
 8810 010a FB68     		ldr	r3, [r7, #12]
 8811 010c 1B68     		ldr	r3, [r3]
 8812 010e 1433     		adds	r3, r3, #20
 8813 0110 3A6D     		ldr	r2, [r7, #80]
 8814 0112 7A62     		str	r2, [r7, #36]
 8815 0114 3B62     		str	r3, [r7, #32]
 8816              	.LBB613:
 8817              	.LBB614:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8818              		.loc 2 1123 4 discriminator 1
 8819 0116 396A     		ldr	r1, [r7, #32]
 8820 0118 7A6A     		ldr	r2, [r7, #36]
 8821              		.syntax unified
 8822              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8823 011a 41E80023 		strex r3, r2, [r1]
 8824              	@ 0 "" 2
 8825              		.thumb
 8826              		.syntax unified
 8827 011e FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/cceCIUcs.s 			page 235


 8828              		.loc 2 1124 10 discriminator 1
 8829 0120 FB69     		ldr	r3, [r7, #28]
 8830              	.LBE614:
 8831              	.LBE613:
 8832              		.loc 1 3294 3 discriminator 1
 8833 0122 002B     		cmp	r3, #0
 8834 0124 E5D1     		bne	.L461
 8835              	.LBE610:
3295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 8836              		.loc 1 3296 10
 8837 0126 0023     		movs	r3, #0
3297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8838              		.loc 1 3297 1
 8839 0128 1846     		mov	r0, r3
 8840 012a 6037     		adds	r7, r7, #96
 8841              	.LCFI267:
 8842              		.cfi_def_cfa_offset 8
 8843 012c BD46     		mov	sp, r7
 8844              	.LCFI268:
 8845              		.cfi_def_cfa_register 13
 8846              		@ sp needed
 8847 012e 80BD     		pop	{r7, pc}
 8848              	.L464:
 8849              		.align	2
 8850              	.L463:
 8851 0130 00000000 		.word	UART_DMAReceiveCplt
 8852 0134 00000000 		.word	UART_DMARxHalfCplt
 8853 0138 00000000 		.word	UART_DMAError
 8854              		.cfi_endproc
 8855              	.LFE179:
 8857              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 8858              		.align	1
 8859              		.syntax unified
 8860              		.thumb
 8861              		.thumb_func
 8862              		.fpu fpv4-sp-d16
 8864              	UART_EndTxTransfer:
 8865              	.LFB180:
3298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
3302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8866              		.loc 1 3305 1
 8867              		.cfi_startproc
 8868              		@ args = 0, pretend = 0, frame = 32
 8869              		@ frame_needed = 1, uses_anonymous_args = 0
 8870              		@ link register save eliminated.
 8871 0000 80B4     		push	{r7}
 8872              	.LCFI269:
 8873              		.cfi_def_cfa_offset 4
 8874              		.cfi_offset 7, -4
 8875 0002 89B0     		sub	sp, sp, #36
ARM GAS  /tmp/cceCIUcs.s 			page 236


 8876              	.LCFI270:
 8877              		.cfi_def_cfa_offset 40
 8878 0004 00AF     		add	r7, sp, #0
 8879              	.LCFI271:
 8880              		.cfi_def_cfa_register 7
 8881 0006 7860     		str	r0, [r7, #4]
 8882              	.L468:
 8883              	.LBB615:
3306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8884              		.loc 1 3307 3 discriminator 1
 8885 0008 7B68     		ldr	r3, [r7, #4]
 8886 000a 1B68     		ldr	r3, [r3]
 8887 000c 0C33     		adds	r3, r3, #12
 8888 000e FB60     		str	r3, [r7, #12]
 8889              	.LBB616:
 8890              	.LBB617:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8891              		.loc 2 1072 4 discriminator 1
 8892 0010 FB68     		ldr	r3, [r7, #12]
 8893              		.syntax unified
 8894              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8895 0012 53E8003F 		ldrex r3, [r3]
 8896              	@ 0 "" 2
 8897              		.thumb
 8898              		.syntax unified
 8899 0016 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8900              		.loc 2 1073 10 discriminator 1
 8901 0018 BB68     		ldr	r3, [r7, #8]
 8902              	.LBE617:
 8903              	.LBE616:
 8904              		.loc 1 3307 3 discriminator 1
 8905 001a 23F0C003 		bic	r3, r3, #192
 8906 001e FB61     		str	r3, [r7, #28]
 8907 0020 7B68     		ldr	r3, [r7, #4]
 8908 0022 1B68     		ldr	r3, [r3]
 8909 0024 0C33     		adds	r3, r3, #12
 8910 0026 FA69     		ldr	r2, [r7, #28]
 8911 0028 BA61     		str	r2, [r7, #24]
 8912 002a 7B61     		str	r3, [r7, #20]
 8913              	.LBB618:
 8914              	.LBB619:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8915              		.loc 2 1123 4 discriminator 1
 8916 002c 7969     		ldr	r1, [r7, #20]
 8917 002e BA69     		ldr	r2, [r7, #24]
 8918              		.syntax unified
 8919              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8920 0030 41E80023 		strex r3, r2, [r1]
 8921              	@ 0 "" 2
 8922              		.thumb
 8923              		.syntax unified
 8924 0034 3B61     		str	r3, [r7, #16]
 8925              		.loc 2 1124 10 discriminator 1
 8926 0036 3B69     		ldr	r3, [r7, #16]
 8927              	.LBE619:
ARM GAS  /tmp/cceCIUcs.s 			page 237


 8928              	.LBE618:
 8929              		.loc 1 3307 3 discriminator 1
 8930 0038 002B     		cmp	r3, #0
 8931 003a E5D1     		bne	.L468
 8932              	.LBE615:
3308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 8933              		.loc 1 3310 17
 8934 003c 7B68     		ldr	r3, [r7, #4]
 8935 003e 2022     		movs	r2, #32
 8936 0040 83F83D20 		strb	r2, [r3, #61]
3311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 8937              		.loc 1 3311 1
 8938 0044 00BF     		nop
 8939 0046 2437     		adds	r7, r7, #36
 8940              	.LCFI272:
 8941              		.cfi_def_cfa_offset 4
 8942 0048 BD46     		mov	sp, r7
 8943              	.LCFI273:
 8944              		.cfi_def_cfa_register 13
 8945              		@ sp needed
 8946 004a 5DF8047B 		ldr	r7, [sp], #4
 8947              	.LCFI274:
 8948              		.cfi_restore 7
 8949              		.cfi_def_cfa_offset 0
 8950 004e 7047     		bx	lr
 8951              		.cfi_endproc
 8952              	.LFE180:
 8954              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 8955              		.align	1
 8956              		.syntax unified
 8957              		.thumb
 8958              		.thumb_func
 8959              		.fpu fpv4-sp-d16
 8961              	UART_EndRxTransfer:
 8962              	.LFB181:
3312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
3316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 8963              		.loc 1 3319 1
 8964              		.cfi_startproc
 8965              		@ args = 0, pretend = 0, frame = 80
 8966              		@ frame_needed = 1, uses_anonymous_args = 0
 8967              		@ link register save eliminated.
 8968 0000 80B4     		push	{r7}
 8969              	.LCFI275:
 8970              		.cfi_def_cfa_offset 4
 8971              		.cfi_offset 7, -4
 8972 0002 95B0     		sub	sp, sp, #84
 8973              	.LCFI276:
 8974              		.cfi_def_cfa_offset 88
ARM GAS  /tmp/cceCIUcs.s 			page 238


 8975 0004 00AF     		add	r7, sp, #0
 8976              	.LCFI277:
 8977              		.cfi_def_cfa_register 7
 8978 0006 7860     		str	r0, [r7, #4]
 8979              	.L472:
 8980              	.LBB620:
3320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8981              		.loc 1 3321 3 discriminator 1
 8982 0008 7B68     		ldr	r3, [r7, #4]
 8983 000a 1B68     		ldr	r3, [r3]
 8984 000c 0C33     		adds	r3, r3, #12
 8985 000e 7B63     		str	r3, [r7, #52]
 8986              	.LBB621:
 8987              	.LBB622:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8988              		.loc 2 1072 4 discriminator 1
 8989 0010 7B6B     		ldr	r3, [r7, #52]
 8990              		.syntax unified
 8991              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8992 0012 53E8003F 		ldrex r3, [r3]
 8993              	@ 0 "" 2
 8994              		.thumb
 8995              		.syntax unified
 8996 0016 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8997              		.loc 2 1073 10 discriminator 1
 8998 0018 3B6B     		ldr	r3, [r7, #48]
 8999              	.LBE622:
 9000              	.LBE621:
 9001              		.loc 1 3321 3 discriminator 1
 9002 001a 23F49073 		bic	r3, r3, #288
 9003 001e FB64     		str	r3, [r7, #76]
 9004 0020 7B68     		ldr	r3, [r7, #4]
 9005 0022 1B68     		ldr	r3, [r3]
 9006 0024 0C33     		adds	r3, r3, #12
 9007 0026 FA6C     		ldr	r2, [r7, #76]
 9008 0028 3A64     		str	r2, [r7, #64]
 9009 002a FB63     		str	r3, [r7, #60]
 9010              	.LBB623:
 9011              	.LBB624:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9012              		.loc 2 1123 4 discriminator 1
 9013 002c F96B     		ldr	r1, [r7, #60]
 9014 002e 3A6C     		ldr	r2, [r7, #64]
 9015              		.syntax unified
 9016              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9017 0030 41E80023 		strex r3, r2, [r1]
 9018              	@ 0 "" 2
 9019              		.thumb
 9020              		.syntax unified
 9021 0034 BB63     		str	r3, [r7, #56]
 9022              		.loc 2 1124 10 discriminator 1
 9023 0036 BB6B     		ldr	r3, [r7, #56]
 9024              	.LBE624:
 9025              	.LBE623:
 9026              		.loc 1 3321 3 discriminator 1
ARM GAS  /tmp/cceCIUcs.s 			page 239


 9027 0038 002B     		cmp	r3, #0
 9028 003a E5D1     		bne	.L472
 9029              	.L475:
 9030              	.LBE620:
 9031              	.LBB625:
3322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 9032              		.loc 1 3322 3 discriminator 1
 9033 003c 7B68     		ldr	r3, [r7, #4]
 9034 003e 1B68     		ldr	r3, [r3]
 9035 0040 1433     		adds	r3, r3, #20
 9036 0042 3B62     		str	r3, [r7, #32]
 9037              	.LBB626:
 9038              	.LBB627:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9039              		.loc 2 1072 4 discriminator 1
 9040 0044 3B6A     		ldr	r3, [r7, #32]
 9041              		.syntax unified
 9042              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9043 0046 53E8003F 		ldrex r3, [r3]
 9044              	@ 0 "" 2
 9045              		.thumb
 9046              		.syntax unified
 9047 004a FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 9048              		.loc 2 1073 10 discriminator 1
 9049 004c FB69     		ldr	r3, [r7, #28]
 9050              	.LBE627:
 9051              	.LBE626:
 9052              		.loc 1 3322 3 discriminator 1
 9053 004e 23F00103 		bic	r3, r3, #1
 9054 0052 BB64     		str	r3, [r7, #72]
 9055 0054 7B68     		ldr	r3, [r7, #4]
 9056 0056 1B68     		ldr	r3, [r3]
 9057 0058 1433     		adds	r3, r3, #20
 9058 005a BA6C     		ldr	r2, [r7, #72]
 9059 005c FA62     		str	r2, [r7, #44]
 9060 005e BB62     		str	r3, [r7, #40]
 9061              	.LBB628:
 9062              	.LBB629:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9063              		.loc 2 1123 4 discriminator 1
 9064 0060 B96A     		ldr	r1, [r7, #40]
 9065 0062 FA6A     		ldr	r2, [r7, #44]
 9066              		.syntax unified
 9067              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9068 0064 41E80023 		strex r3, r2, [r1]
 9069              	@ 0 "" 2
 9070              		.thumb
 9071              		.syntax unified
 9072 0068 7B62     		str	r3, [r7, #36]
 9073              		.loc 2 1124 10 discriminator 1
 9074 006a 7B6A     		ldr	r3, [r7, #36]
 9075              	.LBE629:
 9076              	.LBE628:
 9077              		.loc 1 3322 3 discriminator 1
 9078 006c 002B     		cmp	r3, #0
 9079 006e E5D1     		bne	.L475
ARM GAS  /tmp/cceCIUcs.s 			page 240


 9080              	.LBE625:
3323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 9081              		.loc 1 3325 12
 9082 0070 7B68     		ldr	r3, [r7, #4]
 9083 0072 1B6B     		ldr	r3, [r3, #48]
 9084              		.loc 1 3325 6
 9085 0074 012B     		cmp	r3, #1
 9086 0076 19D1     		bne	.L476
 9087              	.L479:
 9088              	.LBB630:
3326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 9089              		.loc 1 3327 5 discriminator 1
 9090 0078 7B68     		ldr	r3, [r7, #4]
 9091 007a 1B68     		ldr	r3, [r3]
 9092 007c 0C33     		adds	r3, r3, #12
 9093 007e FB60     		str	r3, [r7, #12]
 9094              	.LBB631:
 9095              	.LBB632:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9096              		.loc 2 1072 4 discriminator 1
 9097 0080 FB68     		ldr	r3, [r7, #12]
 9098              		.syntax unified
 9099              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9100 0082 53E8003F 		ldrex r3, [r3]
 9101              	@ 0 "" 2
 9102              		.thumb
 9103              		.syntax unified
 9104 0086 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 9105              		.loc 2 1073 10 discriminator 1
 9106 0088 BB68     		ldr	r3, [r7, #8]
 9107              	.LBE632:
 9108              	.LBE631:
 9109              		.loc 1 3327 5 discriminator 1
 9110 008a 23F01003 		bic	r3, r3, #16
 9111 008e 7B64     		str	r3, [r7, #68]
 9112 0090 7B68     		ldr	r3, [r7, #4]
 9113 0092 1B68     		ldr	r3, [r3]
 9114 0094 0C33     		adds	r3, r3, #12
 9115 0096 7A6C     		ldr	r2, [r7, #68]
 9116 0098 BA61     		str	r2, [r7, #24]
 9117 009a 7B61     		str	r3, [r7, #20]
 9118              	.LBB633:
 9119              	.LBB634:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9120              		.loc 2 1123 4 discriminator 1
 9121 009c 7969     		ldr	r1, [r7, #20]
 9122 009e BA69     		ldr	r2, [r7, #24]
 9123              		.syntax unified
 9124              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9125 00a0 41E80023 		strex r3, r2, [r1]
 9126              	@ 0 "" 2
 9127              		.thumb
 9128              		.syntax unified
ARM GAS  /tmp/cceCIUcs.s 			page 241


 9129 00a4 3B61     		str	r3, [r7, #16]
 9130              		.loc 2 1124 10 discriminator 1
 9131 00a6 3B69     		ldr	r3, [r7, #16]
 9132              	.LBE634:
 9133              	.LBE633:
 9134              		.loc 1 3327 5 discriminator 1
 9135 00a8 002B     		cmp	r3, #0
 9136 00aa E5D1     		bne	.L479
 9137              	.L476:
 9138              	.LBE630:
3328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 9139              		.loc 1 3331 18
 9140 00ac 7B68     		ldr	r3, [r7, #4]
 9141 00ae 2022     		movs	r2, #32
 9142 00b0 83F83E20 		strb	r2, [r3, #62]
3332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9143              		.loc 1 3332 24
 9144 00b4 7B68     		ldr	r3, [r7, #4]
 9145 00b6 0022     		movs	r2, #0
 9146 00b8 1A63     		str	r2, [r3, #48]
3333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9147              		.loc 1 3333 1
 9148 00ba 00BF     		nop
 9149 00bc 5437     		adds	r7, r7, #84
 9150              	.LCFI278:
 9151              		.cfi_def_cfa_offset 4
 9152 00be BD46     		mov	sp, r7
 9153              	.LCFI279:
 9154              		.cfi_def_cfa_register 13
 9155              		@ sp needed
 9156 00c0 5DF8047B 		ldr	r7, [sp], #4
 9157              	.LCFI280:
 9158              		.cfi_restore 7
 9159              		.cfi_def_cfa_offset 0
 9160 00c4 7047     		bx	lr
 9161              		.cfi_endproc
 9162              	.LFE181:
 9164              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 9165              		.align	1
 9166              		.syntax unified
 9167              		.thumb
 9168              		.thumb_func
 9169              		.fpu fpv4-sp-d16
 9171              	UART_DMAAbortOnError:
 9172              	.LFB182:
3334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/cceCIUcs.s 			page 242


3343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9173              		.loc 1 3343 1
 9174              		.cfi_startproc
 9175              		@ args = 0, pretend = 0, frame = 16
 9176              		@ frame_needed = 1, uses_anonymous_args = 0
 9177 0000 80B5     		push	{r7, lr}
 9178              	.LCFI281:
 9179              		.cfi_def_cfa_offset 8
 9180              		.cfi_offset 7, -8
 9181              		.cfi_offset 14, -4
 9182 0002 84B0     		sub	sp, sp, #16
 9183              	.LCFI282:
 9184              		.cfi_def_cfa_offset 24
 9185 0004 00AF     		add	r7, sp, #0
 9186              	.LCFI283:
 9187              		.cfi_def_cfa_register 7
 9188 0006 7860     		str	r0, [r7, #4]
3344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 9189              		.loc 1 3344 23
 9190 0008 7B68     		ldr	r3, [r7, #4]
 9191 000a 9B6B     		ldr	r3, [r3, #56]
 9192 000c FB60     		str	r3, [r7, #12]
3345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 9193              		.loc 1 3345 22
 9194 000e FB68     		ldr	r3, [r7, #12]
 9195 0010 0022     		movs	r2, #0
 9196 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 9197              		.loc 1 3346 22
 9198 0014 FB68     		ldr	r3, [r7, #12]
 9199 0016 0022     		movs	r2, #0
 9200 0018 DA84     		strh	r2, [r3, #38]	@ movhi
3347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call registered error callback*/
3350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCallback(huart);
3351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call legacy weak error callback*/
3353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 9201              		.loc 1 3353 3
 9202 001a F868     		ldr	r0, [r7, #12]
 9203 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
3354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9204              		.loc 1 3355 1
 9205 0020 00BF     		nop
 9206 0022 1037     		adds	r7, r7, #16
 9207              	.LCFI284:
 9208              		.cfi_def_cfa_offset 8
 9209 0024 BD46     		mov	sp, r7
 9210              	.LCFI285:
 9211              		.cfi_def_cfa_register 13
 9212              		@ sp needed
 9213 0026 80BD     		pop	{r7, pc}
 9214              		.cfi_endproc
 9215              	.LFE182:
 9217              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
ARM GAS  /tmp/cceCIUcs.s 			page 243


 9218              		.align	1
 9219              		.syntax unified
 9220              		.thumb
 9221              		.thumb_func
 9222              		.fpu fpv4-sp-d16
 9224              	UART_DMATxAbortCallback:
 9225              	.LFB183:
3356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9226              		.loc 1 3367 1
 9227              		.cfi_startproc
 9228              		@ args = 0, pretend = 0, frame = 16
 9229              		@ frame_needed = 1, uses_anonymous_args = 0
 9230 0000 80B5     		push	{r7, lr}
 9231              	.LCFI286:
 9232              		.cfi_def_cfa_offset 8
 9233              		.cfi_offset 7, -8
 9234              		.cfi_offset 14, -4
 9235 0002 84B0     		sub	sp, sp, #16
 9236              	.LCFI287:
 9237              		.cfi_def_cfa_offset 24
 9238 0004 00AF     		add	r7, sp, #0
 9239              	.LCFI288:
 9240              		.cfi_def_cfa_register 7
 9241 0006 7860     		str	r0, [r7, #4]
3368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 9242              		.loc 1 3368 23
 9243 0008 7B68     		ldr	r3, [r7, #4]
 9244 000a 9B6B     		ldr	r3, [r3, #56]
 9245 000c FB60     		str	r3, [r7, #12]
3369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 9246              		.loc 1 3370 8
 9247 000e FB68     		ldr	r3, [r7, #12]
 9248 0010 5B6B     		ldr	r3, [r3, #52]
 9249              		.loc 1 3370 36
 9250 0012 0022     		movs	r2, #0
 9251 0014 1A65     		str	r2, [r3, #80]
3371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 9252              		.loc 1 3373 12
 9253 0016 FB68     		ldr	r3, [r7, #12]
 9254 0018 9B6B     		ldr	r3, [r3, #56]
 9255              		.loc 1 3373 6
 9256 001a 002B     		cmp	r3, #0
 9257 001c 04D0     		beq	.L482
ARM GAS  /tmp/cceCIUcs.s 			page 244


3374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 9258              		.loc 1 3375 14
 9259 001e FB68     		ldr	r3, [r7, #12]
 9260 0020 9B6B     		ldr	r3, [r3, #56]
 9261              		.loc 1 3375 22
 9262 0022 1B6D     		ldr	r3, [r3, #80]
 9263              		.loc 1 3375 8
 9264 0024 002B     		cmp	r3, #0
 9265 0026 17D1     		bne	.L484
 9266              	.L482:
3376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
3378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 9267              		.loc 1 3382 22
 9268 0028 FB68     		ldr	r3, [r7, #12]
 9269 002a 0022     		movs	r2, #0
 9270 002c DA84     		strh	r2, [r3, #38]	@ movhi
3383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 9271              		.loc 1 3383 22
 9272 002e FB68     		ldr	r3, [r7, #12]
 9273 0030 0022     		movs	r2, #0
 9274 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
3386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 9275              		.loc 1 3386 20
 9276 0034 FB68     		ldr	r3, [r7, #12]
 9277 0036 0022     		movs	r2, #0
 9278 0038 1A64     		str	r2, [r3, #64]
3387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 9279              		.loc 1 3389 18
 9280 003a FB68     		ldr	r3, [r7, #12]
 9281 003c 2022     		movs	r2, #32
 9282 003e 83F83D20 		strb	r2, [r3, #61]
3390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 9283              		.loc 1 3390 18
 9284 0042 FB68     		ldr	r3, [r7, #12]
 9285 0044 2022     		movs	r2, #32
 9286 0046 83F83E20 		strb	r2, [r3, #62]
3391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9287              		.loc 1 3391 24
 9288 004a FB68     		ldr	r3, [r7, #12]
 9289 004c 0022     		movs	r2, #0
 9290 004e 1A63     		str	r2, [r3, #48]
3392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
3394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call registered Abort complete callback */
3396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
ARM GAS  /tmp/cceCIUcs.s 			page 245


3398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 9291              		.loc 1 3399 3
 9292 0050 F868     		ldr	r0, [r7, #12]
 9293 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 9294 0056 00E0     		b	.L481
 9295              	.L484:
3377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 9296              		.loc 1 3377 7
 9297 0058 00BF     		nop
 9298              	.L481:
3400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9299              		.loc 1 3401 1
 9300 005a 1037     		adds	r7, r7, #16
 9301              	.LCFI289:
 9302              		.cfi_def_cfa_offset 8
 9303 005c BD46     		mov	sp, r7
 9304              	.LCFI290:
 9305              		.cfi_def_cfa_register 13
 9306              		@ sp needed
 9307 005e 80BD     		pop	{r7, pc}
 9308              		.cfi_endproc
 9309              	.LFE183:
 9311              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 9312              		.align	1
 9313              		.syntax unified
 9314              		.thumb
 9315              		.thumb_func
 9316              		.fpu fpv4-sp-d16
 9318              	UART_DMARxAbortCallback:
 9319              	.LFB184:
3402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9320              		.loc 1 3413 1
 9321              		.cfi_startproc
 9322              		@ args = 0, pretend = 0, frame = 16
 9323              		@ frame_needed = 1, uses_anonymous_args = 0
 9324 0000 80B5     		push	{r7, lr}
 9325              	.LCFI291:
 9326              		.cfi_def_cfa_offset 8
 9327              		.cfi_offset 7, -8
 9328              		.cfi_offset 14, -4
 9329 0002 84B0     		sub	sp, sp, #16
 9330              	.LCFI292:
 9331              		.cfi_def_cfa_offset 24
 9332 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cceCIUcs.s 			page 246


 9333              	.LCFI293:
 9334              		.cfi_def_cfa_register 7
 9335 0006 7860     		str	r0, [r7, #4]
3414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 9336              		.loc 1 3414 23
 9337 0008 7B68     		ldr	r3, [r7, #4]
 9338 000a 9B6B     		ldr	r3, [r3, #56]
 9339 000c FB60     		str	r3, [r7, #12]
3415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 9340              		.loc 1 3416 8
 9341 000e FB68     		ldr	r3, [r7, #12]
 9342 0010 9B6B     		ldr	r3, [r3, #56]
 9343              		.loc 1 3416 36
 9344 0012 0022     		movs	r2, #0
 9345 0014 1A65     		str	r2, [r3, #80]
3417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 9346              		.loc 1 3419 12
 9347 0016 FB68     		ldr	r3, [r7, #12]
 9348 0018 5B6B     		ldr	r3, [r3, #52]
 9349              		.loc 1 3419 6
 9350 001a 002B     		cmp	r3, #0
 9351 001c 04D0     		beq	.L486
3420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 9352              		.loc 1 3421 14
 9353 001e FB68     		ldr	r3, [r7, #12]
 9354 0020 5B6B     		ldr	r3, [r3, #52]
 9355              		.loc 1 3421 22
 9356 0022 1B6D     		ldr	r3, [r3, #80]
 9357              		.loc 1 3421 8
 9358 0024 002B     		cmp	r3, #0
 9359 0026 17D1     		bne	.L488
 9360              	.L486:
3422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
3424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 9361              		.loc 1 3428 22
 9362 0028 FB68     		ldr	r3, [r7, #12]
 9363 002a 0022     		movs	r2, #0
 9364 002c DA84     		strh	r2, [r3, #38]	@ movhi
3429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 9365              		.loc 1 3429 22
 9366 002e FB68     		ldr	r3, [r7, #12]
 9367 0030 0022     		movs	r2, #0
 9368 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
3432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 9369              		.loc 1 3432 20
 9370 0034 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cceCIUcs.s 			page 247


 9371 0036 0022     		movs	r2, #0
 9372 0038 1A64     		str	r2, [r3, #64]
3433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 9373              		.loc 1 3435 18
 9374 003a FB68     		ldr	r3, [r7, #12]
 9375 003c 2022     		movs	r2, #32
 9376 003e 83F83D20 		strb	r2, [r3, #61]
3436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 9377              		.loc 1 3436 18
 9378 0042 FB68     		ldr	r3, [r7, #12]
 9379 0044 2022     		movs	r2, #32
 9380 0046 83F83E20 		strb	r2, [r3, #62]
3437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9381              		.loc 1 3437 24
 9382 004a FB68     		ldr	r3, [r7, #12]
 9383 004c 0022     		movs	r2, #0
 9384 004e 1A63     		str	r2, [r3, #48]
3438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
3440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call registered Abort complete callback */
3442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 9385              		.loc 1 3445 3
 9386 0050 F868     		ldr	r0, [r7, #12]
 9387 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 9388 0056 00E0     		b	.L485
 9389              	.L488:
3423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 9390              		.loc 1 3423 7
 9391 0058 00BF     		nop
 9392              	.L485:
3446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9393              		.loc 1 3447 1
 9394 005a 1037     		adds	r7, r7, #16
 9395              	.LCFI294:
 9396              		.cfi_def_cfa_offset 8
 9397 005c BD46     		mov	sp, r7
 9398              	.LCFI295:
 9399              		.cfi_def_cfa_register 13
 9400              		@ sp needed
 9401 005e 80BD     		pop	{r7, pc}
 9402              		.cfi_endproc
 9403              	.LFE184:
 9405              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 9406              		.align	1
 9407              		.syntax unified
 9408              		.thumb
 9409              		.thumb_func
 9410              		.fpu fpv4-sp-d16
 9412              	UART_DMATxOnlyAbortCallback:
 9413              	.LFB185:
ARM GAS  /tmp/cceCIUcs.s 			page 248


3448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9414              		.loc 1 3459 1
 9415              		.cfi_startproc
 9416              		@ args = 0, pretend = 0, frame = 16
 9417              		@ frame_needed = 1, uses_anonymous_args = 0
 9418 0000 80B5     		push	{r7, lr}
 9419              	.LCFI296:
 9420              		.cfi_def_cfa_offset 8
 9421              		.cfi_offset 7, -8
 9422              		.cfi_offset 14, -4
 9423 0002 84B0     		sub	sp, sp, #16
 9424              	.LCFI297:
 9425              		.cfi_def_cfa_offset 24
 9426 0004 00AF     		add	r7, sp, #0
 9427              	.LCFI298:
 9428              		.cfi_def_cfa_register 7
 9429 0006 7860     		str	r0, [r7, #4]
3460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 9430              		.loc 1 3460 23
 9431 0008 7B68     		ldr	r3, [r7, #4]
 9432 000a 9B6B     		ldr	r3, [r3, #56]
 9433 000c FB60     		str	r3, [r7, #12]
3461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 9434              		.loc 1 3462 22
 9435 000e FB68     		ldr	r3, [r7, #12]
 9436 0010 0022     		movs	r2, #0
 9437 0012 DA84     		strh	r2, [r3, #38]	@ movhi
3463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 9438              		.loc 1 3465 17
 9439 0014 FB68     		ldr	r3, [r7, #12]
 9440 0016 2022     		movs	r2, #32
 9441 0018 83F83D20 		strb	r2, [r3, #61]
3466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
3468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 9442              		.loc 1 3473 3
 9443 001c F868     		ldr	r0, [r7, #12]
 9444 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
ARM GAS  /tmp/cceCIUcs.s 			page 249


3474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9445              		.loc 1 3475 1
 9446 0022 00BF     		nop
 9447 0024 1037     		adds	r7, r7, #16
 9448              	.LCFI299:
 9449              		.cfi_def_cfa_offset 8
 9450 0026 BD46     		mov	sp, r7
 9451              	.LCFI300:
 9452              		.cfi_def_cfa_register 13
 9453              		@ sp needed
 9454 0028 80BD     		pop	{r7, pc}
 9455              		.cfi_endproc
 9456              	.LFE185:
 9458              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 9459              		.align	1
 9460              		.syntax unified
 9461              		.thumb
 9462              		.thumb_func
 9463              		.fpu fpv4-sp-d16
 9465              	UART_DMARxOnlyAbortCallback:
 9466              	.LFB186:
3476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9467              		.loc 1 3487 1
 9468              		.cfi_startproc
 9469              		@ args = 0, pretend = 0, frame = 16
 9470              		@ frame_needed = 1, uses_anonymous_args = 0
 9471 0000 80B5     		push	{r7, lr}
 9472              	.LCFI301:
 9473              		.cfi_def_cfa_offset 8
 9474              		.cfi_offset 7, -8
 9475              		.cfi_offset 14, -4
 9476 0002 84B0     		sub	sp, sp, #16
 9477              	.LCFI302:
 9478              		.cfi_def_cfa_offset 24
 9479 0004 00AF     		add	r7, sp, #0
 9480              	.LCFI303:
 9481              		.cfi_def_cfa_register 7
 9482 0006 7860     		str	r0, [r7, #4]
3488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 9483              		.loc 1 3488 23
 9484 0008 7B68     		ldr	r3, [r7, #4]
 9485 000a 9B6B     		ldr	r3, [r3, #56]
 9486 000c FB60     		str	r3, [r7, #12]
3489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
ARM GAS  /tmp/cceCIUcs.s 			page 250


 9487              		.loc 1 3490 22
 9488 000e FB68     		ldr	r3, [r7, #12]
 9489 0010 0022     		movs	r2, #0
 9490 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 9491              		.loc 1 3493 18
 9492 0014 FB68     		ldr	r3, [r7, #12]
 9493 0016 2022     		movs	r2, #32
 9494 0018 83F83E20 		strb	r2, [r3, #62]
3494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9495              		.loc 1 3494 24
 9496 001c FB68     		ldr	r3, [r7, #12]
 9497 001e 0022     		movs	r2, #0
 9498 0020 1A63     		str	r2, [r3, #48]
3495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
3497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 9499              		.loc 1 3502 3
 9500 0022 F868     		ldr	r0, [r7, #12]
 9501 0024 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9502              		.loc 1 3504 1
 9503 0028 00BF     		nop
 9504 002a 1037     		adds	r7, r7, #16
 9505              	.LCFI304:
 9506              		.cfi_def_cfa_offset 8
 9507 002c BD46     		mov	sp, r7
 9508              	.LCFI305:
 9509              		.cfi_def_cfa_register 13
 9510              		@ sp needed
 9511 002e 80BD     		pop	{r7, pc}
 9512              		.cfi_endproc
 9513              	.LFE186:
 9515              		.section	.text.UART_Transmit_IT,"ax",%progbits
 9516              		.align	1
 9517              		.syntax unified
 9518              		.thumb
 9519              		.thumb_func
 9520              		.fpu fpv4-sp-d16
 9522              	UART_Transmit_IT:
 9523              	.LFB187:
3505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
3508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
3511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cceCIUcs.s 			page 251


3513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9524              		.loc 1 3513 1
 9525              		.cfi_startproc
 9526              		@ args = 0, pretend = 0, frame = 16
 9527              		@ frame_needed = 1, uses_anonymous_args = 0
 9528              		@ link register save eliminated.
 9529 0000 80B4     		push	{r7}
 9530              	.LCFI306:
 9531              		.cfi_def_cfa_offset 4
 9532              		.cfi_offset 7, -4
 9533 0002 85B0     		sub	sp, sp, #20
 9534              	.LCFI307:
 9535              		.cfi_def_cfa_offset 24
 9536 0004 00AF     		add	r7, sp, #0
 9537              	.LCFI308:
 9538              		.cfi_def_cfa_register 7
 9539 0006 7860     		str	r0, [r7, #4]
3514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   const uint16_t *tmp;
3515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 9540              		.loc 1 3517 12
 9541 0008 7B68     		ldr	r3, [r7, #4]
 9542 000a 93F83D30 		ldrb	r3, [r3, #61]
 9543 000e DBB2     		uxtb	r3, r3
 9544              		.loc 1 3517 6
 9545 0010 212B     		cmp	r3, #33
 9546 0012 3ED1     		bne	.L492
3518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 9547              		.loc 1 3519 21
 9548 0014 7B68     		ldr	r3, [r7, #4]
 9549 0016 9B68     		ldr	r3, [r3, #8]
 9550              		.loc 1 3519 8
 9551 0018 B3F5805F 		cmp	r3, #4096
 9552 001c 14D1     		bne	.L493
 9553              		.loc 1 3519 71 discriminator 1
 9554 001e 7B68     		ldr	r3, [r7, #4]
 9555 0020 1B69     		ldr	r3, [r3, #16]
 9556              		.loc 1 3519 56 discriminator 1
 9557 0022 002B     		cmp	r3, #0
 9558 0024 10D1     		bne	.L493
3520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       tmp = (const uint16_t *) huart->pTxBuffPtr;
 9559              		.loc 1 3521 11
 9560 0026 7B68     		ldr	r3, [r7, #4]
 9561 0028 1B6A     		ldr	r3, [r3, #32]
 9562 002a FB60     		str	r3, [r7, #12]
3522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 9563              		.loc 1 3522 40
 9564 002c FB68     		ldr	r3, [r7, #12]
 9565 002e 1B88     		ldrh	r3, [r3]
 9566              		.loc 1 3522 29
 9567 0030 1A46     		mov	r2, r3
 9568              		.loc 1 3522 12
 9569 0032 7B68     		ldr	r3, [r7, #4]
 9570 0034 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 252


 9571              		.loc 1 3522 29
 9572 0036 C2F30802 		ubfx	r2, r2, #0, #9
 9573              		.loc 1 3522 27
 9574 003a 5A60     		str	r2, [r3, #4]
3523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 9575              		.loc 1 3523 25
 9576 003c 7B68     		ldr	r3, [r7, #4]
 9577 003e 1B6A     		ldr	r3, [r3, #32]
 9578 0040 9A1C     		adds	r2, r3, #2
 9579 0042 7B68     		ldr	r3, [r7, #4]
 9580 0044 1A62     		str	r2, [r3, #32]
 9581 0046 08E0     		b	.L494
 9582              	.L493:
3524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
3526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 9583              		.loc 1 3527 45
 9584 0048 7B68     		ldr	r3, [r7, #4]
 9585 004a 1B6A     		ldr	r3, [r3, #32]
 9586              		.loc 1 3527 57
 9587 004c 591C     		adds	r1, r3, #1
 9588 004e 7A68     		ldr	r2, [r7, #4]
 9589 0050 1162     		str	r1, [r2, #32]
 9590              		.loc 1 3527 39
 9591 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 9592              		.loc 1 3527 12
 9593 0054 7B68     		ldr	r3, [r7, #4]
 9594 0056 1B68     		ldr	r3, [r3]
 9595              		.loc 1 3527 27
 9596 0058 5A60     		str	r2, [r3, #4]
 9597              	.L494:
3528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
 9598              		.loc 1 3530 16
 9599 005a 7B68     		ldr	r3, [r7, #4]
 9600 005c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 9601 005e 9BB2     		uxth	r3, r3
 9602              		.loc 1 3530 9
 9603 0060 013B     		subs	r3, r3, #1
 9604 0062 9BB2     		uxth	r3, r3
 9605              		.loc 1 3530 8
 9606 0064 7A68     		ldr	r2, [r7, #4]
 9607 0066 1946     		mov	r1, r3	@ movhi
 9608 0068 D184     		strh	r1, [r2, #38]	@ movhi
 9609 006a 002B     		cmp	r3, #0
 9610 006c 0FD1     		bne	.L495
3531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 9611              		.loc 1 3533 7
 9612 006e 7B68     		ldr	r3, [r7, #4]
 9613 0070 1B68     		ldr	r3, [r3]
 9614 0072 DA68     		ldr	r2, [r3, #12]
 9615 0074 7B68     		ldr	r3, [r7, #4]
 9616 0076 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cceCIUcs.s 			page 253


 9617 0078 22F08002 		bic	r2, r2, #128
 9618 007c DA60     		str	r2, [r3, #12]
3534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 9619              		.loc 1 3536 7
 9620 007e 7B68     		ldr	r3, [r7, #4]
 9621 0080 1B68     		ldr	r3, [r3]
 9622 0082 DA68     		ldr	r2, [r3, #12]
 9623 0084 7B68     		ldr	r3, [r7, #4]
 9624 0086 1B68     		ldr	r3, [r3]
 9625 0088 42F04002 		orr	r2, r2, #64
 9626 008c DA60     		str	r2, [r3, #12]
 9627              	.L495:
3537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 9628              		.loc 1 3538 12
 9629 008e 0023     		movs	r3, #0
 9630 0090 00E0     		b	.L496
 9631              	.L492:
3539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
3541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 9632              		.loc 1 3542 12
 9633 0092 0223     		movs	r3, #2
 9634              	.L496:
3543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9635              		.loc 1 3544 1
 9636 0094 1846     		mov	r0, r3
 9637 0096 1437     		adds	r7, r7, #20
 9638              	.LCFI309:
 9639              		.cfi_def_cfa_offset 4
 9640 0098 BD46     		mov	sp, r7
 9641              	.LCFI310:
 9642              		.cfi_def_cfa_register 13
 9643              		@ sp needed
 9644 009a 5DF8047B 		ldr	r7, [sp], #4
 9645              	.LCFI311:
 9646              		.cfi_restore 7
 9647              		.cfi_def_cfa_offset 0
 9648 009e 7047     		bx	lr
 9649              		.cfi_endproc
 9650              	.LFE187:
 9652              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 9653              		.align	1
 9654              		.syntax unified
 9655              		.thumb
 9656              		.thumb_func
 9657              		.fpu fpv4-sp-d16
 9659              	UART_EndTransmit_IT:
 9660              	.LFB188:
3545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
3548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
ARM GAS  /tmp/cceCIUcs.s 			page 254


3549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
3551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9661              		.loc 1 3553 1
 9662              		.cfi_startproc
 9663              		@ args = 0, pretend = 0, frame = 8
 9664              		@ frame_needed = 1, uses_anonymous_args = 0
 9665 0000 80B5     		push	{r7, lr}
 9666              	.LCFI312:
 9667              		.cfi_def_cfa_offset 8
 9668              		.cfi_offset 7, -8
 9669              		.cfi_offset 14, -4
 9670 0002 82B0     		sub	sp, sp, #8
 9671              	.LCFI313:
 9672              		.cfi_def_cfa_offset 16
 9673 0004 00AF     		add	r7, sp, #0
 9674              	.LCFI314:
 9675              		.cfi_def_cfa_register 7
 9676 0006 7860     		str	r0, [r7, #4]
3554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 9677              		.loc 1 3555 3
 9678 0008 7B68     		ldr	r3, [r7, #4]
 9679 000a 1B68     		ldr	r3, [r3]
 9680 000c DA68     		ldr	r2, [r3, #12]
 9681 000e 7B68     		ldr	r3, [r7, #4]
 9682 0010 1B68     		ldr	r3, [r3]
 9683 0012 22F04002 		bic	r2, r2, #64
 9684 0016 DA60     		str	r2, [r3, #12]
3556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 9685              		.loc 1 3558 17
 9686 0018 7B68     		ldr	r3, [r7, #4]
 9687 001a 2022     		movs	r2, #32
 9688 001c 83F83D20 		strb	r2, [r3, #61]
3559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 9689              		.loc 1 3565 3
 9690 0020 7868     		ldr	r0, [r7, #4]
 9691 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 9692              		.loc 1 3568 10
 9693 0026 0023     		movs	r3, #0
3569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9694              		.loc 1 3569 1
 9695 0028 1846     		mov	r0, r3
 9696 002a 0837     		adds	r7, r7, #8
ARM GAS  /tmp/cceCIUcs.s 			page 255


 9697              	.LCFI315:
 9698              		.cfi_def_cfa_offset 8
 9699 002c BD46     		mov	sp, r7
 9700              	.LCFI316:
 9701              		.cfi_def_cfa_register 13
 9702              		@ sp needed
 9703 002e 80BD     		pop	{r7, pc}
 9704              		.cfi_endproc
 9705              	.LFE188:
 9707              		.section	.text.UART_Receive_IT,"ax",%progbits
 9708              		.align	1
 9709              		.syntax unified
 9710              		.thumb
 9711              		.thumb_func
 9712              		.fpu fpv4-sp-d16
 9714              	UART_Receive_IT:
 9715              	.LFB189:
3570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
3573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
3576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
3578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 9716              		.loc 1 3578 1
 9717              		.cfi_startproc
 9718              		@ args = 0, pretend = 0, frame = 48
 9719              		@ frame_needed = 1, uses_anonymous_args = 0
 9720 0000 80B5     		push	{r7, lr}
 9721              	.LCFI317:
 9722              		.cfi_def_cfa_offset 8
 9723              		.cfi_offset 7, -8
 9724              		.cfi_offset 14, -4
 9725 0002 8CB0     		sub	sp, sp, #48
 9726              	.LCFI318:
 9727              		.cfi_def_cfa_offset 56
 9728 0004 00AF     		add	r7, sp, #0
 9729              	.LCFI319:
 9730              		.cfi_def_cfa_register 7
 9731 0006 7860     		str	r0, [r7, #4]
3579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint8_t  *pdata8bits;
3580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t *pdata16bits;
3581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 9732              		.loc 1 3583 12
 9733 0008 7B68     		ldr	r3, [r7, #4]
 9734 000a 93F83E30 		ldrb	r3, [r3, #62]
 9735 000e DBB2     		uxtb	r3, r3
 9736              		.loc 1 3583 6
 9737 0010 222B     		cmp	r3, #34
 9738 0012 40F0AB80 		bne	.L500
3584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 9739              		.loc 1 3585 21
ARM GAS  /tmp/cceCIUcs.s 			page 256


 9740 0016 7B68     		ldr	r3, [r7, #4]
 9741 0018 9B68     		ldr	r3, [r3, #8]
 9742              		.loc 1 3585 8
 9743 001a B3F5805F 		cmp	r3, #4096
 9744 001e 17D1     		bne	.L501
 9745              		.loc 1 3585 71 discriminator 1
 9746 0020 7B68     		ldr	r3, [r7, #4]
 9747 0022 1B69     		ldr	r3, [r3, #16]
 9748              		.loc 1 3585 56 discriminator 1
 9749 0024 002B     		cmp	r3, #0
 9750 0026 13D1     		bne	.L501
3586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits  = NULL;
 9751              		.loc 1 3587 19
 9752 0028 0023     		movs	r3, #0
 9753 002a FB62     		str	r3, [r7, #44]
3588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 9754              		.loc 1 3588 19
 9755 002c 7B68     		ldr	r3, [r7, #4]
 9756 002e 9B6A     		ldr	r3, [r3, #40]
 9757 0030 BB62     		str	r3, [r7, #40]
3589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 9758              		.loc 1 3589 38
 9759 0032 7B68     		ldr	r3, [r7, #4]
 9760 0034 1B68     		ldr	r3, [r3]
 9761              		.loc 1 3589 48
 9762 0036 5B68     		ldr	r3, [r3, #4]
 9763              		.loc 1 3589 22
 9764 0038 9BB2     		uxth	r3, r3
 9765 003a C3F30803 		ubfx	r3, r3, #0, #9
 9766 003e 9AB2     		uxth	r2, r3
 9767              		.loc 1 3589 20
 9768 0040 BB6A     		ldr	r3, [r7, #40]
 9769 0042 1A80     		strh	r2, [r3]	@ movhi
3590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 9770              		.loc 1 3590 25
 9771 0044 7B68     		ldr	r3, [r7, #4]
 9772 0046 9B6A     		ldr	r3, [r3, #40]
 9773 0048 9A1C     		adds	r2, r3, #2
 9774 004a 7B68     		ldr	r3, [r7, #4]
 9775 004c 9A62     		str	r2, [r3, #40]
 9776 004e 26E0     		b	.L502
 9777              	.L501:
3591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
3593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 9778              		.loc 1 3594 18
 9779 0050 7B68     		ldr	r3, [r7, #4]
 9780 0052 9B6A     		ldr	r3, [r3, #40]
 9781 0054 FB62     		str	r3, [r7, #44]
3595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pdata16bits  = NULL;
 9782              		.loc 1 3595 20
 9783 0056 0023     		movs	r3, #0
 9784 0058 BB62     		str	r3, [r7, #40]
3596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLE
ARM GAS  /tmp/cceCIUcs.s 			page 257


 9785              		.loc 1 3597 23
 9786 005a 7B68     		ldr	r3, [r7, #4]
 9787 005c 9B68     		ldr	r3, [r3, #8]
 9788              		.loc 1 3597 10
 9789 005e B3F5805F 		cmp	r3, #4096
 9790 0062 07D0     		beq	.L503
 9791              		.loc 1 3597 74 discriminator 1
 9792 0064 7B68     		ldr	r3, [r7, #4]
 9793 0066 9B68     		ldr	r3, [r3, #8]
 9794              		.loc 1 3597 58 discriminator 1
 9795 0068 002B     		cmp	r3, #0
 9796 006a 0AD1     		bne	.L504
 9797              		.loc 1 3597 124 discriminator 2
 9798 006c 7B68     		ldr	r3, [r7, #4]
 9799 006e 1B69     		ldr	r3, [r3, #16]
 9800              		.loc 1 3597 109 discriminator 2
 9801 0070 002B     		cmp	r3, #0
 9802 0072 06D1     		bne	.L504
 9803              	.L503:
3598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
3599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 9804              		.loc 1 3599 38
 9805 0074 7B68     		ldr	r3, [r7, #4]
 9806 0076 1B68     		ldr	r3, [r3]
 9807              		.loc 1 3599 48
 9808 0078 5B68     		ldr	r3, [r3, #4]
 9809              		.loc 1 3599 23
 9810 007a DAB2     		uxtb	r2, r3
 9811              		.loc 1 3599 21
 9812 007c FB6A     		ldr	r3, [r7, #44]
 9813 007e 1A70     		strb	r2, [r3]
 9814 0080 08E0     		b	.L505
 9815              	.L504:
3600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
3601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
3602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
3603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 9816              		.loc 1 3603 38
 9817 0082 7B68     		ldr	r3, [r7, #4]
 9818 0084 1B68     		ldr	r3, [r3]
 9819              		.loc 1 3603 48
 9820 0086 5B68     		ldr	r3, [r3, #4]
 9821              		.loc 1 3603 23
 9822 0088 DBB2     		uxtb	r3, r3
 9823 008a 03F07F03 		and	r3, r3, #127
 9824 008e DAB2     		uxtb	r2, r3
 9825              		.loc 1 3603 21
 9826 0090 FB6A     		ldr	r3, [r7, #44]
 9827 0092 1A70     		strb	r2, [r3]
 9828              	.L505:
3604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
3605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->pRxBuffPtr += 1U;
 9829              		.loc 1 3605 25
 9830 0094 7B68     		ldr	r3, [r7, #4]
 9831 0096 9B6A     		ldr	r3, [r3, #40]
 9832 0098 5A1C     		adds	r2, r3, #1
 9833 009a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 258


 9834 009c 9A62     		str	r2, [r3, #40]
 9835              	.L502:
3606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
 9836              		.loc 1 3608 16
 9837 009e 7B68     		ldr	r3, [r7, #4]
 9838 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 9839 00a2 9BB2     		uxth	r3, r3
 9840              		.loc 1 3608 9
 9841 00a4 013B     		subs	r3, r3, #1
 9842 00a6 9BB2     		uxth	r3, r3
 9843              		.loc 1 3608 8
 9844 00a8 7A68     		ldr	r2, [r7, #4]
 9845 00aa 1946     		mov	r1, r3	@ movhi
 9846 00ac D185     		strh	r1, [r2, #46]	@ movhi
 9847 00ae 002B     		cmp	r3, #0
 9848 00b0 5AD1     		bne	.L506
3609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 9849              		.loc 1 3611 7
 9850 00b2 7B68     		ldr	r3, [r7, #4]
 9851 00b4 1B68     		ldr	r3, [r3]
 9852 00b6 DA68     		ldr	r2, [r3, #12]
 9853 00b8 7B68     		ldr	r3, [r7, #4]
 9854 00ba 1B68     		ldr	r3, [r3]
 9855 00bc 22F02002 		bic	r2, r2, #32
 9856 00c0 DA60     		str	r2, [r3, #12]
3612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 9857              		.loc 1 3614 7
 9858 00c2 7B68     		ldr	r3, [r7, #4]
 9859 00c4 1B68     		ldr	r3, [r3]
 9860 00c6 DA68     		ldr	r2, [r3, #12]
 9861 00c8 7B68     		ldr	r3, [r7, #4]
 9862 00ca 1B68     		ldr	r3, [r3]
 9863 00cc 22F48072 		bic	r2, r2, #256
 9864 00d0 DA60     		str	r2, [r3, #12]
3615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 9865              		.loc 1 3617 7
 9866 00d2 7B68     		ldr	r3, [r7, #4]
 9867 00d4 1B68     		ldr	r3, [r3]
 9868 00d6 5A69     		ldr	r2, [r3, #20]
 9869 00d8 7B68     		ldr	r3, [r7, #4]
 9870 00da 1B68     		ldr	r3, [r3]
 9871 00dc 22F00102 		bic	r2, r2, #1
 9872 00e0 5A61     		str	r2, [r3, #20]
3618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 9873              		.loc 1 3620 22
 9874 00e2 7B68     		ldr	r3, [r7, #4]
 9875 00e4 2022     		movs	r2, #32
ARM GAS  /tmp/cceCIUcs.s 			page 259


 9876 00e6 83F83E20 		strb	r2, [r3, #62]
3621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Check current reception Mode :
3623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 9877              		.loc 1 3624 16
 9878 00ea 7B68     		ldr	r3, [r7, #4]
 9879 00ec 1B6B     		ldr	r3, [r3, #48]
 9880              		.loc 1 3624 10
 9881 00ee 012B     		cmp	r3, #1
 9882 00f0 35D1     		bne	.L507
3625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
3626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Set reception type to Standard */
3627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9883              		.loc 1 3627 30
 9884 00f2 7B68     		ldr	r3, [r7, #4]
 9885 00f4 0022     		movs	r2, #0
 9886 00f6 1A63     		str	r2, [r3, #48]
 9887              	.L510:
 9888              	.LBB635:
3628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable IDLE interrupt */
3630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 9889              		.loc 1 3630 9 discriminator 1
 9890 00f8 7B68     		ldr	r3, [r7, #4]
 9891 00fa 1B68     		ldr	r3, [r3]
 9892 00fc 0C33     		adds	r3, r3, #12
 9893 00fe 7B61     		str	r3, [r7, #20]
 9894              	.LBB636:
 9895              	.LBB637:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9896              		.loc 2 1072 4 discriminator 1
 9897 0100 7B69     		ldr	r3, [r7, #20]
 9898              		.syntax unified
 9899              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9900 0102 53E8003F 		ldrex r3, [r3]
 9901              	@ 0 "" 2
 9902              		.thumb
 9903              		.syntax unified
 9904 0106 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 9905              		.loc 2 1073 10 discriminator 1
 9906 0108 3B69     		ldr	r3, [r7, #16]
 9907              	.LBE637:
 9908              	.LBE636:
 9909              		.loc 1 3630 9 discriminator 1
 9910 010a 23F01003 		bic	r3, r3, #16
 9911 010e 7B62     		str	r3, [r7, #36]
 9912 0110 7B68     		ldr	r3, [r7, #4]
 9913 0112 1B68     		ldr	r3, [r3]
 9914 0114 0C33     		adds	r3, r3, #12
 9915 0116 7A6A     		ldr	r2, [r7, #36]
 9916 0118 3A62     		str	r2, [r7, #32]
 9917 011a FB61     		str	r3, [r7, #28]
 9918              	.LBB638:
 9919              	.LBB639:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cceCIUcs.s 			page 260


 9920              		.loc 2 1123 4 discriminator 1
 9921 011c F969     		ldr	r1, [r7, #28]
 9922 011e 3A6A     		ldr	r2, [r7, #32]
 9923              		.syntax unified
 9924              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9925 0120 41E80023 		strex r3, r2, [r1]
 9926              	@ 0 "" 2
 9927              		.thumb
 9928              		.syntax unified
 9929 0124 BB61     		str	r3, [r7, #24]
 9930              		.loc 2 1124 10 discriminator 1
 9931 0126 BB69     		ldr	r3, [r7, #24]
 9932              	.LBE639:
 9933              	.LBE638:
 9934              		.loc 1 3630 9 discriminator 1
 9935 0128 002B     		cmp	r3, #0
 9936 012a E5D1     		bne	.L510
 9937              	.LBE635:
3631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Check if IDLE flag is set */
3633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 9938              		.loc 1 3633 13
 9939 012c 7B68     		ldr	r3, [r7, #4]
 9940 012e 1B68     		ldr	r3, [r3]
 9941 0130 1B68     		ldr	r3, [r3]
 9942 0132 03F01003 		and	r3, r3, #16
 9943              		.loc 1 3633 12
 9944 0136 102B     		cmp	r3, #16
 9945 0138 0AD1     		bne	.L511
 9946              	.LBB640:
3634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
3635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Clear IDLE flag in ISR */
3636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           __HAL_UART_CLEAR_IDLEFLAG(huart);
 9947              		.loc 1 3636 11
 9948 013a 0023     		movs	r3, #0
 9949 013c FB60     		str	r3, [r7, #12]
 9950 013e 7B68     		ldr	r3, [r7, #4]
 9951 0140 1B68     		ldr	r3, [r3]
 9952 0142 1B68     		ldr	r3, [r3]
 9953 0144 FB60     		str	r3, [r7, #12]
 9954 0146 7B68     		ldr	r3, [r7, #4]
 9955 0148 1B68     		ldr	r3, [r3]
 9956 014a 5B68     		ldr	r3, [r3, #4]
 9957 014c FB60     		str	r3, [r7, #12]
 9958 014e FB68     		ldr	r3, [r7, #12]
 9959              	.L511:
 9960              	.LBE640:
3637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
3638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 9961              		.loc 1 3644 9
 9962 0150 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCIUcs.s 			page 261


 9963 0152 9B8D     		ldrh	r3, [r3, #44]
 9964 0154 1946     		mov	r1, r3
 9965 0156 7868     		ldr	r0, [r7, #4]
 9966 0158 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 9967 015c 02E0     		b	.L512
 9968              	.L507:
3645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
3647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
3648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
3649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Standard reception API called */
3650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
 9969              		.loc 1 3655 9
 9970 015e 7868     		ldr	r0, [r7, #4]
 9971 0160 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 9972              	.L512:
3656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
3658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_OK;
 9973              		.loc 1 3659 14
 9974 0164 0023     		movs	r3, #0
 9975 0166 02E0     		b	.L513
 9976              	.L506:
3660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 9977              		.loc 1 3661 12
 9978 0168 0023     		movs	r3, #0
 9979 016a 00E0     		b	.L513
 9980              	.L500:
3662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
3664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 9981              		.loc 1 3665 12
 9982 016c 0223     		movs	r3, #2
 9983              	.L513:
3666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 9984              		.loc 1 3667 1
 9985 016e 1846     		mov	r0, r3
 9986 0170 3037     		adds	r7, r7, #48
 9987              	.LCFI320:
 9988              		.cfi_def_cfa_offset 8
 9989 0172 BD46     		mov	sp, r7
 9990              	.LCFI321:
 9991              		.cfi_def_cfa_register 13
 9992              		@ sp needed
 9993 0174 80BD     		pop	{r7, pc}
 9994              		.cfi_endproc
 9995              	.LFE189:
 9997              		.global	__aeabi_uldivmod
ARM GAS  /tmp/cceCIUcs.s 			page 262


 9998              		.section	.text.UART_SetConfig,"ax",%progbits
 9999              		.align	1
 10000              		.syntax unified
 10001              		.thumb
 10002              		.thumb_func
 10003              		.fpu fpv4-sp-d16
 10005              	UART_SetConfig:
 10006              	.LFB190:
3668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
3670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
3674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
3675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 10007              		.loc 1 3676 1
 10008              		.cfi_startproc
 10009              		@ args = 0, pretend = 0, frame = 256
 10010              		@ frame_needed = 1, uses_anonymous_args = 0
 10011 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 10012              	.LCFI322:
 10013              		.cfi_def_cfa_offset 32
 10014              		.cfi_offset 4, -32
 10015              		.cfi_offset 5, -28
 10016              		.cfi_offset 7, -24
 10017              		.cfi_offset 8, -20
 10018              		.cfi_offset 9, -16
 10019              		.cfi_offset 10, -12
 10020              		.cfi_offset 11, -8
 10021              		.cfi_offset 14, -4
 10022 0004 C0B0     		sub	sp, sp, #256
 10023              	.LCFI323:
 10024              		.cfi_def_cfa_offset 288
 10025 0006 00AF     		add	r7, sp, #0
 10026              	.LCFI324:
 10027              		.cfi_def_cfa_register 7
 10028 0008 C7F8F400 		str	r0, [r7, #244]
3677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg;
3678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t pclk;
3679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
3681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 10029              		.loc 1 3681 3
 10030 000c D7F8F430 		ldr	r3, [r7, #244]
 10031 0010 5A68     		ldr	r2, [r3, #4]
 10032 0012 CF4B     		ldr	r3, .L526
 10033 0014 9A42     		cmp	r2, r3
 10034 0016 04D9     		bls	.L515
 10035              		.loc 1 3681 3 is_stmt 0 discriminator 1
 10036 0018 40F66161 		movw	r1, #3681
 10037 001c CD48     		ldr	r0, .L526+4
 10038 001e FFF7FEFF 		bl	assert_failed
 10039              	.L515:
3682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 10040              		.loc 1 3682 3 is_stmt 1
ARM GAS  /tmp/cceCIUcs.s 			page 263


 10041 0022 D7F8F430 		ldr	r3, [r7, #244]
 10042 0026 DB68     		ldr	r3, [r3, #12]
 10043 0028 002B     		cmp	r3, #0
 10044 002a 0AD0     		beq	.L516
 10045              		.loc 1 3682 3 is_stmt 0 discriminator 1
 10046 002c D7F8F430 		ldr	r3, [r7, #244]
 10047 0030 DB68     		ldr	r3, [r3, #12]
 10048 0032 B3F5005F 		cmp	r3, #8192
 10049 0036 04D0     		beq	.L516
 10050              		.loc 1 3682 3 discriminator 2
 10051 0038 40F66261 		movw	r1, #3682
 10052 003c C548     		ldr	r0, .L526+4
 10053 003e FFF7FEFF 		bl	assert_failed
 10054              	.L516:
3683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
 10055              		.loc 1 3683 3 is_stmt 1
 10056 0042 D7F8F430 		ldr	r3, [r7, #244]
 10057 0046 1B69     		ldr	r3, [r3, #16]
 10058 0048 002B     		cmp	r3, #0
 10059 004a 10D0     		beq	.L517
 10060              		.loc 1 3683 3 is_stmt 0 discriminator 1
 10061 004c D7F8F430 		ldr	r3, [r7, #244]
 10062 0050 1B69     		ldr	r3, [r3, #16]
 10063 0052 B3F5806F 		cmp	r3, #1024
 10064 0056 0AD0     		beq	.L517
 10065              		.loc 1 3683 3 discriminator 2
 10066 0058 D7F8F430 		ldr	r3, [r7, #244]
 10067 005c 1B69     		ldr	r3, [r3, #16]
 10068 005e B3F5C06F 		cmp	r3, #1536
 10069 0062 04D0     		beq	.L517
 10070              		.loc 1 3683 3 discriminator 3
 10071 0064 40F66361 		movw	r1, #3683
 10072 0068 BA48     		ldr	r0, .L526+4
 10073 006a FFF7FEFF 		bl	assert_failed
 10074              	.L517:
3684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
 10075              		.loc 1 3684 3 is_stmt 1
 10076 006e D7F8F430 		ldr	r3, [r7, #244]
 10077 0072 5A69     		ldr	r2, [r3, #20]
 10078 0074 4FF6F373 		movw	r3, #65523
 10079 0078 1340     		ands	r3, r3, r2
 10080 007a 002B     		cmp	r3, #0
 10081 007c 04D1     		bne	.L518
 10082              		.loc 1 3684 3 is_stmt 0 discriminator 2
 10083 007e D7F8F430 		ldr	r3, [r7, #244]
 10084 0082 5B69     		ldr	r3, [r3, #20]
 10085 0084 002B     		cmp	r3, #0
 10086 0086 04D1     		bne	.L519
 10087              	.L518:
 10088              		.loc 1 3684 3 discriminator 3
 10089 0088 40F66461 		movw	r1, #3684
 10090 008c B148     		ldr	r0, .L526+4
 10091 008e FFF7FEFF 		bl	assert_failed
 10092              	.L519:
3685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
ARM GAS  /tmp/cceCIUcs.s 			page 264


3688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      according to huart->Init.StopBits value */
3689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 10093              		.loc 1 3689 3 is_stmt 1
 10094 0092 D7F8F430 		ldr	r3, [r7, #244]
 10095 0096 1B68     		ldr	r3, [r3]
 10096 0098 1B69     		ldr	r3, [r3, #16]
 10097 009a 23F44050 		bic	r0, r3, #12288
 10098 009e D7F8F430 		ldr	r3, [r7, #244]
 10099 00a2 D968     		ldr	r1, [r3, #12]
 10100 00a4 D7F8F430 		ldr	r3, [r7, #244]
 10101 00a8 1A68     		ldr	r2, [r3]
 10102 00aa 40EA0103 		orr	r3, r0, r1
 10103 00ae 1361     		str	r3, [r2, #16]
3690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 10104              		.loc 1 3698 33
 10105 00b0 D7F8F430 		ldr	r3, [r7, #244]
 10106 00b4 9A68     		ldr	r2, [r3, #8]
 10107              		.loc 1 3698 58
 10108 00b6 D7F8F430 		ldr	r3, [r7, #244]
 10109 00ba 1B69     		ldr	r3, [r3, #16]
 10110              		.loc 1 3698 45
 10111 00bc 1A43     		orrs	r2, r2, r3
 10112              		.loc 1 3698 79
 10113 00be D7F8F430 		ldr	r3, [r7, #244]
 10114 00c2 5B69     		ldr	r3, [r3, #20]
 10115              		.loc 1 3698 66
 10116 00c4 1A43     		orrs	r2, r2, r3
 10117              		.loc 1 3698 98
 10118 00c6 D7F8F430 		ldr	r3, [r7, #244]
 10119 00ca DB69     		ldr	r3, [r3, #28]
 10120              		.loc 1 3698 10
 10121 00cc 1343     		orrs	r3, r3, r2
 10122 00ce C7F8F830 		str	r3, [r7, #248]
3699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 10123              		.loc 1 3699 3
 10124 00d2 D7F8F430 		ldr	r3, [r7, #244]
 10125 00d6 1B68     		ldr	r3, [r3]
 10126 00d8 DB68     		ldr	r3, [r3, #12]
 10127 00da 23F41641 		bic	r1, r3, #38400
 10128 00de 21F00C01 		bic	r1, r1, #12
 10129 00e2 D7F8F430 		ldr	r3, [r7, #244]
 10130 00e6 1A68     		ldr	r2, [r3]
 10131 00e8 D7F8F830 		ldr	r3, [r7, #248]
 10132 00ec 0B43     		orrs	r3, r3, r1
 10133 00ee D360     		str	r3, [r2, #12]
3700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              tmpreg);
3702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
ARM GAS  /tmp/cceCIUcs.s 			page 265


3704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 10134              		.loc 1 3705 3
 10135 00f0 D7F8F430 		ldr	r3, [r7, #244]
 10136 00f4 1B68     		ldr	r3, [r3]
 10137 00f6 5B69     		ldr	r3, [r3, #20]
 10138 00f8 23F44070 		bic	r0, r3, #768
 10139 00fc D7F8F430 		ldr	r3, [r7, #244]
 10140 0100 9969     		ldr	r1, [r3, #24]
 10141 0102 D7F8F430 		ldr	r3, [r7, #244]
 10142 0106 1A68     		ldr	r2, [r3]
 10143 0108 40EA0103 		orr	r3, r0, r1
 10144 010c 5361     		str	r3, [r2, #20]
3706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
3708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if defined(USART6) && defined(UART9) && defined(UART10)
3709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) ||
3710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #elif defined(USART6)
3714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if ((huart->Instance == USART1) || (huart->Instance == USART6))
 10145              		.loc 1 3714 15
 10146 010e D7F8F430 		ldr	r3, [r7, #244]
 10147 0112 1A68     		ldr	r2, [r3]
 10148              		.loc 1 3714 8
 10149 0114 904B     		ldr	r3, .L526+8
 10150 0116 9A42     		cmp	r2, r3
 10151 0118 05D0     		beq	.L520
 10152              		.loc 1 3714 46 discriminator 1
 10153 011a D7F8F430 		ldr	r3, [r7, #244]
 10154 011e 1A68     		ldr	r2, [r3]
 10155              		.loc 1 3714 37 discriminator 1
 10156 0120 8E4B     		ldr	r3, .L526+12
 10157 0122 9A42     		cmp	r2, r3
 10158 0124 04D1     		bne	.L521
 10159              	.L520:
3715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
 10160              		.loc 1 3716 14
 10161 0126 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 10162 012a C7F8FC00 		str	r0, [r7, #252]
 10163              		.loc 1 3716 12
 10164 012e 03E0     		b	.L522
 10165              	.L521:
3717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
3719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if (huart->Instance == USART1)
3720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USART6 */
3724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
3725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
3726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
 10166              		.loc 1 3726 14
 10167 0130 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
ARM GAS  /tmp/cceCIUcs.s 			page 266


 10168 0134 C7F8FC00 		str	r0, [r7, #252]
 10169              	.L522:
3727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
3728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 10170              		.loc 1 3729 18
 10171 0138 D7F8F430 		ldr	r3, [r7, #244]
 10172 013c DB69     		ldr	r3, [r3, #28]
 10173              		.loc 1 3729 6
 10174 013e B3F5004F 		cmp	r3, #32768
 10175 0142 40F00F81 		bne	.L523
3730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 10176              		.loc 1 3731 28
 10177 0146 D7F8FC30 		ldr	r3, [r7, #252]
 10178 014a 0022     		movs	r2, #0
 10179 014c C7F8E830 		str	r3, [r7, #232]
 10180 0150 C7F8EC20 		str	r2, [r7, #236]
 10181 0154 D7E93A45 		ldrd	r4, [r7, #232]
 10182 0158 2246     		mov	r2, r4
 10183 015a 2B46     		mov	r3, r5
 10184 015c 9118     		adds	r1, r2, r2
 10185 015e B965     		str	r1, [r7, #88]
 10186 0160 5B41     		adcs	r3, r3, r3
 10187 0162 FB65     		str	r3, [r7, #92]
 10188 0164 D7E91623 		ldrd	r2, [r7, #88]
 10189 0168 2146     		mov	r1, r4
 10190 016a 12EB0108 		adds	r8, r2, r1
 10191 016e 2946     		mov	r1, r5
 10192 0170 43EB0109 		adc	r9, r3, r1
 10193 0174 4FF00002 		mov	r2, #0
 10194 0178 4FF00003 		mov	r3, #0
 10195 017c 4FEAC903 		lsl	r3, r9, #3
 10196 0180 43EA5873 		orr	r3, r3, r8, lsr #29
 10197 0184 4FEAC802 		lsl	r2, r8, #3
 10198 0188 9046     		mov	r8, r2
 10199 018a 9946     		mov	r9, r3
 10200 018c 2346     		mov	r3, r4
 10201 018e 18EB0303 		adds	r3, r8, r3
 10202 0192 C7F8E030 		str	r3, [r7, #224]
 10203 0196 2B46     		mov	r3, r5
 10204 0198 49EB0303 		adc	r3, r9, r3
 10205 019c C7F8E430 		str	r3, [r7, #228]
 10206 01a0 D7F8F430 		ldr	r3, [r7, #244]
 10207 01a4 5B68     		ldr	r3, [r3, #4]
 10208 01a6 0022     		movs	r2, #0
 10209 01a8 C7F8D830 		str	r3, [r7, #216]
 10210 01ac C7F8DC20 		str	r2, [r7, #220]
 10211 01b0 D7E93612 		ldrd	r1, [r7, #216]
 10212 01b4 0B46     		mov	r3, r1
 10213 01b6 DB18     		adds	r3, r3, r3
 10214 01b8 3B65     		str	r3, [r7, #80]
 10215 01ba 1346     		mov	r3, r2
 10216 01bc 42EB0303 		adc	r3, r2, r3
 10217 01c0 7B65     		str	r3, [r7, #84]
 10218 01c2 D7E91423 		ldrd	r2, [r7, #80]
 10219 01c6 D7E93801 		ldrd	r0, [r7, #224]
ARM GAS  /tmp/cceCIUcs.s 			page 267


 10220 01ca FFF7FEFF 		bl	__aeabi_uldivmod
 10221 01ce 0246     		mov	r2, r0
 10222 01d0 0B46     		mov	r3, r1
 10223 01d2 634B     		ldr	r3, .L526+16
 10224 01d4 A3FB0223 		umull	r2, r3, r3, r2
 10225 01d8 5B09     		lsrs	r3, r3, #5
 10226 01da 1C01     		lsls	r4, r3, #4
 10227 01dc D7F8FC30 		ldr	r3, [r7, #252]
 10228 01e0 0022     		movs	r2, #0
 10229 01e2 C7F8D030 		str	r3, [r7, #208]
 10230 01e6 C7F8D420 		str	r2, [r7, #212]
 10231 01ea D7E93489 		ldrd	r8, [r7, #208]
 10232 01ee 4246     		mov	r2, r8
 10233 01f0 4B46     		mov	r3, r9
 10234 01f2 9118     		adds	r1, r2, r2
 10235 01f4 B964     		str	r1, [r7, #72]
 10236 01f6 5B41     		adcs	r3, r3, r3
 10237 01f8 FB64     		str	r3, [r7, #76]
 10238 01fa D7E91223 		ldrd	r2, [r7, #72]
 10239 01fe 4146     		mov	r1, r8
 10240 0200 12EB010A 		adds	r10, r2, r1
 10241 0204 4946     		mov	r1, r9
 10242 0206 43EB010B 		adc	fp, r3, r1
 10243 020a 4FF00002 		mov	r2, #0
 10244 020e 4FF00003 		mov	r3, #0
 10245 0212 4FEACB03 		lsl	r3, fp, #3
 10246 0216 43EA5A73 		orr	r3, r3, r10, lsr #29
 10247 021a 4FEACA02 		lsl	r2, r10, #3
 10248 021e 9246     		mov	r10, r2
 10249 0220 9B46     		mov	fp, r3
 10250 0222 4346     		mov	r3, r8
 10251 0224 1AEB0303 		adds	r3, r10, r3
 10252 0228 C7F8C830 		str	r3, [r7, #200]
 10253 022c 4B46     		mov	r3, r9
 10254 022e 4BEB0303 		adc	r3, fp, r3
 10255 0232 C7F8CC30 		str	r3, [r7, #204]
 10256 0236 D7F8F430 		ldr	r3, [r7, #244]
 10257 023a 5B68     		ldr	r3, [r3, #4]
 10258 023c 0022     		movs	r2, #0
 10259 023e C7F8C030 		str	r3, [r7, #192]
 10260 0242 C7F8C420 		str	r2, [r7, #196]
 10261 0246 D7E93012 		ldrd	r1, [r7, #192]
 10262 024a 0B46     		mov	r3, r1
 10263 024c DB18     		adds	r3, r3, r3
 10264 024e 3B64     		str	r3, [r7, #64]
 10265 0250 1346     		mov	r3, r2
 10266 0252 42EB0303 		adc	r3, r2, r3
 10267 0256 7B64     		str	r3, [r7, #68]
 10268 0258 D7E91023 		ldrd	r2, [r7, #64]
 10269 025c D7E93201 		ldrd	r0, [r7, #200]
 10270 0260 FFF7FEFF 		bl	__aeabi_uldivmod
 10271 0264 0246     		mov	r2, r0
 10272 0266 0B46     		mov	r3, r1
 10273 0268 1146     		mov	r1, r2
 10274 026a 3D4B     		ldr	r3, .L526+16
 10275 026c A3FB0123 		umull	r2, r3, r3, r1
 10276 0270 5B09     		lsrs	r3, r3, #5
ARM GAS  /tmp/cceCIUcs.s 			page 268


 10277 0272 6422     		movs	r2, #100
 10278 0274 02FB03F3 		mul	r3, r2, r3
 10279 0278 CB1A     		subs	r3, r1, r3
 10280 027a DB00     		lsls	r3, r3, #3
 10281 027c 03F13202 		add	r2, r3, #50
 10282 0280 374B     		ldr	r3, .L526+16
 10283 0282 A3FB0223 		umull	r2, r3, r3, r2
 10284 0286 5B09     		lsrs	r3, r3, #5
 10285 0288 5B00     		lsls	r3, r3, #1
 10286 028a 03F4F873 		and	r3, r3, #496
 10287 028e 1C44     		add	r4, r4, r3
 10288 0290 D7F8FC30 		ldr	r3, [r7, #252]
 10289 0294 0022     		movs	r2, #0
 10290 0296 C7F8B830 		str	r3, [r7, #184]
 10291 029a C7F8BC20 		str	r2, [r7, #188]
 10292 029e D7E92E89 		ldrd	r8, [r7, #184]
 10293 02a2 4246     		mov	r2, r8
 10294 02a4 4B46     		mov	r3, r9
 10295 02a6 9118     		adds	r1, r2, r2
 10296 02a8 B963     		str	r1, [r7, #56]
 10297 02aa 5B41     		adcs	r3, r3, r3
 10298 02ac FB63     		str	r3, [r7, #60]
 10299 02ae D7E90E23 		ldrd	r2, [r7, #56]
 10300 02b2 4146     		mov	r1, r8
 10301 02b4 5118     		adds	r1, r2, r1
 10302 02b6 3963     		str	r1, [r7, #48]
 10303 02b8 4946     		mov	r1, r9
 10304 02ba 4B41     		adcs	r3, r3, r1
 10305 02bc 7B63     		str	r3, [r7, #52]
 10306 02be 4FF00002 		mov	r2, #0
 10307 02c2 4FF00003 		mov	r3, #0
 10308 02c6 D7E90CAB 		ldrd	r10, [r7, #48]
 10309 02ca 5946     		mov	r1, fp
 10310 02cc CB00     		lsls	r3, r1, #3
 10311 02ce 5146     		mov	r1, r10
 10312 02d0 43EA5173 		orr	r3, r3, r1, lsr #29
 10313 02d4 5146     		mov	r1, r10
 10314 02d6 CA00     		lsls	r2, r1, #3
 10315 02d8 1046     		mov	r0, r2
 10316 02da 1946     		mov	r1, r3
 10317 02dc 0346     		mov	r3, r0
 10318 02de 4246     		mov	r2, r8
 10319 02e0 9B18     		adds	r3, r3, r2
 10320 02e2 C7F8B030 		str	r3, [r7, #176]
 10321 02e6 4B46     		mov	r3, r9
 10322 02e8 0A46     		mov	r2, r1
 10323 02ea 42EB0303 		adc	r3, r2, r3
 10324 02ee C7F8B430 		str	r3, [r7, #180]
 10325 02f2 D7F8F430 		ldr	r3, [r7, #244]
 10326 02f6 5B68     		ldr	r3, [r3, #4]
 10327 02f8 0022     		movs	r2, #0
 10328 02fa C7F8A830 		str	r3, [r7, #168]
 10329 02fe C7F8AC20 		str	r2, [r7, #172]
 10330 0302 D7E92A12 		ldrd	r1, [r7, #168]
 10331 0306 0B46     		mov	r3, r1
 10332 0308 DB18     		adds	r3, r3, r3
 10333 030a BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/cceCIUcs.s 			page 269


 10334 030c 1346     		mov	r3, r2
 10335 030e 42EB0303 		adc	r3, r2, r3
 10336 0312 FB62     		str	r3, [r7, #44]
 10337 0314 D7E90A23 		ldrd	r2, [r7, #40]
 10338 0318 D7E92C01 		ldrd	r0, [r7, #176]
 10339 031c FFF7FEFF 		bl	__aeabi_uldivmod
 10340 0320 0246     		mov	r2, r0
 10341 0322 0B46     		mov	r3, r1
 10342 0324 0E4B     		ldr	r3, .L526+16
 10343 0326 A3FB0213 		umull	r1, r3, r3, r2
 10344 032a 5B09     		lsrs	r3, r3, #5
 10345 032c 6421     		movs	r1, #100
 10346 032e 01FB03F3 		mul	r3, r1, r3
 10347 0332 D31A     		subs	r3, r2, r3
 10348 0334 DB00     		lsls	r3, r3, #3
 10349 0336 3233     		adds	r3, r3, #50
 10350 0338 094A     		ldr	r2, .L526+16
 10351 033a A2FB0323 		umull	r2, r3, r2, r3
 10352 033e 5B09     		lsrs	r3, r3, #5
 10353 0340 03F00702 		and	r2, r3, #7
 10354              		.loc 1 3731 10
 10355 0344 D7F8F430 		ldr	r3, [r7, #244]
 10356 0348 1B68     		ldr	r3, [r3]
 10357              		.loc 1 3731 28
 10358 034a 2244     		add	r2, r2, r4
 10359              		.loc 1 3731 26
 10360 034c 9A60     		str	r2, [r3, #8]
3732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
3734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
3735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
3737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 10361              		.loc 1 3737 1
 10362 034e 08E1     		b	.L525
 10363              	.L527:
 10364              		.align	2
 10365              	.L526:
 10366 0350 A037A000 		.word	10500000
 10367 0354 00000000 		.word	.LC0
 10368 0358 00100140 		.word	1073811456
 10369 035c 00140140 		.word	1073812480
 10370 0360 1F85EB51 		.word	1374389535
 10371              	.L523:
3735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 10372              		.loc 1 3735 28
 10373 0364 D7F8FC30 		ldr	r3, [r7, #252]
 10374 0368 0022     		movs	r2, #0
 10375 036a C7F8A030 		str	r3, [r7, #160]
 10376 036e C7F8A420 		str	r2, [r7, #164]
 10377 0372 D7E92889 		ldrd	r8, [r7, #160]
 10378 0376 4246     		mov	r2, r8
 10379 0378 4B46     		mov	r3, r9
 10380 037a 9118     		adds	r1, r2, r2
 10381 037c 3962     		str	r1, [r7, #32]
 10382 037e 5B41     		adcs	r3, r3, r3
 10383 0380 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/cceCIUcs.s 			page 270


 10384 0382 D7E90823 		ldrd	r2, [r7, #32]
 10385 0386 4146     		mov	r1, r8
 10386 0388 5418     		adds	r4, r2, r1
 10387 038a 4946     		mov	r1, r9
 10388 038c 43EB0105 		adc	r5, r3, r1
 10389 0390 4FF00002 		mov	r2, #0
 10390 0394 4FF00003 		mov	r3, #0
 10391 0398 EB00     		lsls	r3, r5, #3
 10392 039a 43EA5473 		orr	r3, r3, r4, lsr #29
 10393 039e E200     		lsls	r2, r4, #3
 10394 03a0 1446     		mov	r4, r2
 10395 03a2 1D46     		mov	r5, r3
 10396 03a4 4346     		mov	r3, r8
 10397 03a6 E318     		adds	r3, r4, r3
 10398 03a8 C7F89830 		str	r3, [r7, #152]
 10399 03ac 4B46     		mov	r3, r9
 10400 03ae 45EB0303 		adc	r3, r5, r3
 10401 03b2 C7F89C30 		str	r3, [r7, #156]
 10402 03b6 D7F8F430 		ldr	r3, [r7, #244]
 10403 03ba 5B68     		ldr	r3, [r3, #4]
 10404 03bc 0022     		movs	r2, #0
 10405 03be C7F89030 		str	r3, [r7, #144]
 10406 03c2 C7F89420 		str	r2, [r7, #148]
 10407 03c6 4FF00002 		mov	r2, #0
 10408 03ca 4FF00003 		mov	r3, #0
 10409 03ce D7E92445 		ldrd	r4, [r7, #144]
 10410 03d2 2946     		mov	r1, r5
 10411 03d4 8B00     		lsls	r3, r1, #2
 10412 03d6 2146     		mov	r1, r4
 10413 03d8 43EA9173 		orr	r3, r3, r1, lsr #30
 10414 03dc 2146     		mov	r1, r4
 10415 03de 8A00     		lsls	r2, r1, #2
 10416 03e0 D7E92601 		ldrd	r0, [r7, #152]
 10417 03e4 FFF7FEFF 		bl	__aeabi_uldivmod
 10418 03e8 0246     		mov	r2, r0
 10419 03ea 0B46     		mov	r3, r1
 10420 03ec 604B     		ldr	r3, .L528
 10421 03ee A3FB0223 		umull	r2, r3, r3, r2
 10422 03f2 5B09     		lsrs	r3, r3, #5
 10423 03f4 1C01     		lsls	r4, r3, #4
 10424 03f6 D7F8FC30 		ldr	r3, [r7, #252]
 10425 03fa 0022     		movs	r2, #0
 10426 03fc C7F88830 		str	r3, [r7, #136]
 10427 0400 C7F88C20 		str	r2, [r7, #140]
 10428 0404 D7E92289 		ldrd	r8, [r7, #136]
 10429 0408 4246     		mov	r2, r8
 10430 040a 4B46     		mov	r3, r9
 10431 040c 9118     		adds	r1, r2, r2
 10432 040e B961     		str	r1, [r7, #24]
 10433 0410 5B41     		adcs	r3, r3, r3
 10434 0412 FB61     		str	r3, [r7, #28]
 10435 0414 D7E90623 		ldrd	r2, [r7, #24]
 10436 0418 4146     		mov	r1, r8
 10437 041a 5118     		adds	r1, r2, r1
 10438 041c 3961     		str	r1, [r7, #16]
 10439 041e 4946     		mov	r1, r9
 10440 0420 4B41     		adcs	r3, r3, r1
ARM GAS  /tmp/cceCIUcs.s 			page 271


 10441 0422 7B61     		str	r3, [r7, #20]
 10442 0424 4FF00002 		mov	r2, #0
 10443 0428 4FF00003 		mov	r3, #0
 10444 042c D7E904AB 		ldrd	r10, [r7, #16]
 10445 0430 5946     		mov	r1, fp
 10446 0432 CB00     		lsls	r3, r1, #3
 10447 0434 5146     		mov	r1, r10
 10448 0436 43EA5173 		orr	r3, r3, r1, lsr #29
 10449 043a 5146     		mov	r1, r10
 10450 043c CA00     		lsls	r2, r1, #3
 10451 043e 1046     		mov	r0, r2
 10452 0440 1946     		mov	r1, r3
 10453 0442 0346     		mov	r3, r0
 10454 0444 4246     		mov	r2, r8
 10455 0446 9B18     		adds	r3, r3, r2
 10456 0448 C7F88030 		str	r3, [r7, #128]
 10457 044c 4B46     		mov	r3, r9
 10458 044e 0A46     		mov	r2, r1
 10459 0450 42EB0303 		adc	r3, r2, r3
 10460 0454 C7F88430 		str	r3, [r7, #132]
 10461 0458 D7F8F430 		ldr	r3, [r7, #244]
 10462 045c 5B68     		ldr	r3, [r3, #4]
 10463 045e 0022     		movs	r2, #0
 10464 0460 BB67     		str	r3, [r7, #120]
 10465 0462 FA67     		str	r2, [r7, #124]
 10466 0464 4FF00002 		mov	r2, #0
 10467 0468 4FF00003 		mov	r3, #0
 10468 046c D7E91E89 		ldrd	r8, [r7, #120]
 10469 0470 4946     		mov	r1, r9
 10470 0472 8B00     		lsls	r3, r1, #2
 10471 0474 4146     		mov	r1, r8
 10472 0476 43EA9173 		orr	r3, r3, r1, lsr #30
 10473 047a 4146     		mov	r1, r8
 10474 047c 8A00     		lsls	r2, r1, #2
 10475 047e D7E92001 		ldrd	r0, [r7, #128]
 10476 0482 FFF7FEFF 		bl	__aeabi_uldivmod
 10477 0486 0246     		mov	r2, r0
 10478 0488 0B46     		mov	r3, r1
 10479 048a 394B     		ldr	r3, .L528
 10480 048c A3FB0213 		umull	r1, r3, r3, r2
 10481 0490 5B09     		lsrs	r3, r3, #5
 10482 0492 6421     		movs	r1, #100
 10483 0494 01FB03F3 		mul	r3, r1, r3
 10484 0498 D31A     		subs	r3, r2, r3
 10485 049a 1B01     		lsls	r3, r3, #4
 10486 049c 3233     		adds	r3, r3, #50
 10487 049e 344A     		ldr	r2, .L528
 10488 04a0 A2FB0323 		umull	r2, r3, r2, r3
 10489 04a4 5B09     		lsrs	r3, r3, #5
 10490 04a6 03F0F003 		and	r3, r3, #240
 10491 04aa 1C44     		add	r4, r4, r3
 10492 04ac D7F8FC30 		ldr	r3, [r7, #252]
 10493 04b0 0022     		movs	r2, #0
 10494 04b2 3B67     		str	r3, [r7, #112]
 10495 04b4 7A67     		str	r2, [r7, #116]
 10496 04b6 D7E91C89 		ldrd	r8, [r7, #112]
 10497 04ba 4246     		mov	r2, r8
ARM GAS  /tmp/cceCIUcs.s 			page 272


 10498 04bc 4B46     		mov	r3, r9
 10499 04be 9118     		adds	r1, r2, r2
 10500 04c0 B960     		str	r1, [r7, #8]
 10501 04c2 5B41     		adcs	r3, r3, r3
 10502 04c4 FB60     		str	r3, [r7, #12]
 10503 04c6 D7E90223 		ldrd	r2, [r7, #8]
 10504 04ca 4146     		mov	r1, r8
 10505 04cc 5118     		adds	r1, r2, r1
 10506 04ce 3960     		str	r1, [r7]
 10507 04d0 4946     		mov	r1, r9
 10508 04d2 4B41     		adcs	r3, r3, r1
 10509 04d4 7B60     		str	r3, [r7, #4]
 10510 04d6 4FF00002 		mov	r2, #0
 10511 04da 4FF00003 		mov	r3, #0
 10512 04de D7E900AB 		ldrd	r10, [r7]
 10513 04e2 5946     		mov	r1, fp
 10514 04e4 CB00     		lsls	r3, r1, #3
 10515 04e6 5146     		mov	r1, r10
 10516 04e8 43EA5173 		orr	r3, r3, r1, lsr #29
 10517 04ec 5146     		mov	r1, r10
 10518 04ee CA00     		lsls	r2, r1, #3
 10519 04f0 1046     		mov	r0, r2
 10520 04f2 1946     		mov	r1, r3
 10521 04f4 0346     		mov	r3, r0
 10522 04f6 4246     		mov	r2, r8
 10523 04f8 9B18     		adds	r3, r3, r2
 10524 04fa BB66     		str	r3, [r7, #104]
 10525 04fc 4B46     		mov	r3, r9
 10526 04fe 0A46     		mov	r2, r1
 10527 0500 42EB0303 		adc	r3, r2, r3
 10528 0504 FB66     		str	r3, [r7, #108]
 10529 0506 D7F8F430 		ldr	r3, [r7, #244]
 10530 050a 5B68     		ldr	r3, [r3, #4]
 10531 050c 0022     		movs	r2, #0
 10532 050e 3B66     		str	r3, [r7, #96]
 10533 0510 7A66     		str	r2, [r7, #100]
 10534 0512 4FF00002 		mov	r2, #0
 10535 0516 4FF00003 		mov	r3, #0
 10536 051a D7E91889 		ldrd	r8, [r7, #96]
 10537 051e 4946     		mov	r1, r9
 10538 0520 8B00     		lsls	r3, r1, #2
 10539 0522 4146     		mov	r1, r8
 10540 0524 43EA9173 		orr	r3, r3, r1, lsr #30
 10541 0528 4146     		mov	r1, r8
 10542 052a 8A00     		lsls	r2, r1, #2
 10543 052c D7E91A01 		ldrd	r0, [r7, #104]
 10544 0530 FFF7FEFF 		bl	__aeabi_uldivmod
 10545 0534 0246     		mov	r2, r0
 10546 0536 0B46     		mov	r3, r1
 10547 0538 0D4B     		ldr	r3, .L528
 10548 053a A3FB0213 		umull	r1, r3, r3, r2
 10549 053e 5B09     		lsrs	r3, r3, #5
 10550 0540 6421     		movs	r1, #100
 10551 0542 01FB03F3 		mul	r3, r1, r3
 10552 0546 D31A     		subs	r3, r2, r3
 10553 0548 1B01     		lsls	r3, r3, #4
 10554 054a 3233     		adds	r3, r3, #50
ARM GAS  /tmp/cceCIUcs.s 			page 273


 10555 054c 084A     		ldr	r2, .L528
 10556 054e A2FB0323 		umull	r2, r3, r2, r3
 10557 0552 5B09     		lsrs	r3, r3, #5
 10558 0554 03F00F02 		and	r2, r3, #15
3735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 10559              		.loc 1 3735 10
 10560 0558 D7F8F430 		ldr	r3, [r7, #244]
 10561 055c 1B68     		ldr	r3, [r3]
3735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 10562              		.loc 1 3735 28
 10563 055e 2244     		add	r2, r2, r4
3735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 10564              		.loc 1 3735 26
 10565 0560 9A60     		str	r2, [r3, #8]
 10566              	.L525:
 10567              		.loc 1 3737 1
 10568 0562 00BF     		nop
 10569 0564 07F58077 		add	r7, r7, #256
 10570              	.LCFI325:
 10571              		.cfi_def_cfa_offset 32
 10572 0568 BD46     		mov	sp, r7
 10573              	.LCFI326:
 10574              		.cfi_def_cfa_register 13
 10575              		@ sp needed
 10576 056a BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 10577              	.L529:
 10578 056e 00BF     		.align	2
 10579              	.L528:
 10580 0570 1F85EB51 		.word	1374389535
 10581              		.cfi_endproc
 10582              	.LFE190:
 10584              		.text
 10585              	.Letext0:
 10586              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 10587              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 10588              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 10589              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 10590              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 10591              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
ARM GAS  /tmp/cceCIUcs.s 			page 274


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_uart.c
     /tmp/cceCIUcs.s:18     .rodata:0000000000000000 $d
     /tmp/cceCIUcs.s:23     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/cceCIUcs.s:31     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/cceCIUcs.s:1002   .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/cceCIUcs.s:10005  .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/cceCIUcs.s:248    .text.HAL_UART_Init:000000000000015c $d
     /tmp/cceCIUcs.s:256    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/cceCIUcs.s:263    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/cceCIUcs.s:432    .text.HAL_HalfDuplex_Init:000000000000010c $d
     /tmp/cceCIUcs.s:440    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/cceCIUcs.s:447    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/cceCIUcs.s:637    .text.HAL_LIN_Init:0000000000000130 $d
     /tmp/cceCIUcs.s:645    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/cceCIUcs.s:652    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/cceCIUcs.s:872    .text.HAL_MultiProcessor_Init:0000000000000168 $d
     /tmp/cceCIUcs.s:880    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/cceCIUcs.s:887    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/cceCIUcs.s:1045   .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/cceCIUcs.s:987    .text.HAL_UART_DeInit:0000000000000088 $d
     /tmp/cceCIUcs.s:995    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/cceCIUcs.s:1038   .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/cceCIUcs.s:1081   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/cceCIUcs.s:1088   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/cceCIUcs.s:8274   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/cceCIUcs.s:1308   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/cceCIUcs.s:1315   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/cceCIUcs.s:1559   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:1566   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/cceCIUcs.s:1677   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:1684   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/cceCIUcs.s:8478   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
     /tmp/cceCIUcs.s:1768   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/cceCIUcs.s:1775   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/cceCIUcs.s:1972   .text.HAL_UART_Transmit_DMA:00000000000000f0 $d
     /tmp/cceCIUcs.s:7594   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/cceCIUcs.s:7759   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/cceCIUcs.s:8158   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/cceCIUcs.s:1979   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/cceCIUcs.s:1986   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/cceCIUcs.s:8581   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
     /tmp/cceCIUcs.s:2070   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/cceCIUcs.s:2077   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/cceCIUcs.s:2388   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/cceCIUcs.s:2395   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/cceCIUcs.s:2691   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/cceCIUcs.s:2698   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/cceCIUcs.s:8864   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/cceCIUcs.s:8961   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/cceCIUcs.s:2915   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
     /tmp/cceCIUcs.s:2922   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
     /tmp/cceCIUcs.s:3242   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:3249   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
     /tmp/cceCIUcs.s:3417   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
     /tmp/cceCIUcs.s:3424   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
     /tmp/cceCIUcs.s:3592   .text.HAL_UART_Abort:0000000000000000 $t
ARM GAS  /tmp/cceCIUcs.s 			page 275


     /tmp/cceCIUcs.s:3599   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/cceCIUcs.s:4012   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/cceCIUcs.s:4019   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/cceCIUcs.s:4210   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/cceCIUcs.s:4217   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/cceCIUcs.s:4521   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:4528   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/cceCIUcs.s:6677   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/cceCIUcs.s:4989   .text.HAL_UART_Abort_IT:0000000000000220 $d
     /tmp/cceCIUcs.s:9224   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/cceCIUcs.s:9318   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/cceCIUcs.s:4995   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:5002   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/cceCIUcs.s:6720   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/cceCIUcs.s:5205   .text.HAL_UART_AbortTransmit_IT:00000000000000e4 $d
     /tmp/cceCIUcs.s:9412   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/cceCIUcs.s:5210   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:5217   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/cceCIUcs.s:6763   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/cceCIUcs.s:5537   .text.HAL_UART_AbortReceive_IT:0000000000000160 $d
     /tmp/cceCIUcs.s:9465   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/cceCIUcs.s:5542   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/cceCIUcs.s:5549   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/cceCIUcs.s:9714   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/cceCIUcs.s:6634   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/cceCIUcs.s:6806   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
     /tmp/cceCIUcs.s:6196   .text.HAL_UART_IRQHandler:00000000000003dc $d
     /tmp/cceCIUcs.s:9171   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/cceCIUcs.s:6201   .text.HAL_UART_IRQHandler:00000000000003e0 $t
     /tmp/cceCIUcs.s:9522   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/cceCIUcs.s:9659   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/cceCIUcs.s:6455   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6462   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cceCIUcs.s:6498   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6505   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/cceCIUcs.s:6541   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6548   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cceCIUcs.s:6584   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6591   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/cceCIUcs.s:6627   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6670   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6713   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6756   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6799   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:6844   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/cceCIUcs.s:6851   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/cceCIUcs.s:6984   .text.HAL_LIN_SendBreak:000000000000009c $d
     /tmp/cceCIUcs.s:6992   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/cceCIUcs.s:6999   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/cceCIUcs.s:7132   .text.HAL_MultiProcessor_EnterMuteMode:000000000000009c $d
     /tmp/cceCIUcs.s:7140   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/cceCIUcs.s:7147   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/cceCIUcs.s:7280   .text.HAL_MultiProcessor_ExitMuteMode:000000000000009c $d
     /tmp/cceCIUcs.s:7288   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/cceCIUcs.s:7295   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/cceCIUcs.s:7381   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/cceCIUcs.s:7388   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
ARM GAS  /tmp/cceCIUcs.s 			page 276


     /tmp/cceCIUcs.s:7474   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/cceCIUcs.s:7481   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/cceCIUcs.s:7542   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/cceCIUcs.s:7549   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/cceCIUcs.s:7588   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/cceCIUcs.s:7753   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/cceCIUcs.s:7798   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/cceCIUcs.s:7804   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/cceCIUcs.s:8088   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/cceCIUcs.s:8094   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/cceCIUcs.s:8152   .text.UART_DMAError:0000000000000000 $t
     /tmp/cceCIUcs.s:8268   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/cceCIUcs.s:8471   .text.UART_Start_Receive_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:8574   .text.UART_Start_Receive_DMA:0000000000000000 $t
     /tmp/cceCIUcs.s:8851   .text.UART_Start_Receive_DMA:0000000000000130 $d
     /tmp/cceCIUcs.s:8858   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/cceCIUcs.s:8955   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/cceCIUcs.s:9165   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/cceCIUcs.s:9218   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:9312   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:9406   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:9459   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/cceCIUcs.s:9516   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:9653   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:9708   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/cceCIUcs.s:9999   .text.UART_SetConfig:0000000000000000 $t
     /tmp/cceCIUcs.s:10366  .text.UART_SetConfig:0000000000000350 $d
     /tmp/cceCIUcs.s:10373  .text.UART_SetConfig:0000000000000364 $t
     /tmp/cceCIUcs.s:10580  .text.UART_SetConfig:0000000000000570 $d

UNDEFINED SYMBOLS
assert_failed
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
__aeabi_uldivmod
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
