ARM GAS  /tmp/ccmCgZV8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	huart1
  18              		.section	.bss.huart1,"aw",%nobits
  19              		.align	2
  22              	huart1:
  23 0000 00000000 		.space	68
  23      00000000 
  23      00000000 
  23      00000000 
  23      00000000 
  24              		.section	.text._write,"ax",%progbits
  25              		.align	1
  26              		.global	_write
  27              		.arch armv7e-m
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  31              		.fpu fpv4-sp-d16
  33              	_write:
  34              	.LFB133:
  35              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2022 Lars Boegild Thomsen <lbthomsen@gmail.com>.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed under MIT,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/MIT
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
ARM GAS  /tmp/ccmCgZV8.s 			page 2


  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "stdio.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c ****  UART_HandleTypeDef huart1;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PV */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/main.c **** void SystemClock_Config(void);
  51:Core/Src/main.c **** static void MX_GPIO_Init(void);
  52:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  53:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** // Send printf to uart1
  61:Core/Src/main.c **** int _write(int fd, char* ptr, int len) {
  36              		.loc 1 61 40
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 24
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 86B0     		sub	sp, sp, #24
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 32
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 F860     		str	r0, [r7, #12]
  52 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccmCgZV8.s 			page 3


  53 000a 7A60     		str	r2, [r7, #4]
  62:Core/Src/main.c ****   HAL_StatusTypeDef hstatus;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c ****   if (fd == 1 || fd == 2) {
  54              		.loc 1 64 6
  55 000c FB68     		ldr	r3, [r7, #12]
  56 000e 012B     		cmp	r3, #1
  57 0010 02D0     		beq	.L2
  58              		.loc 1 64 15 discriminator 1
  59 0012 FB68     		ldr	r3, [r7, #12]
  60 0014 022B     		cmp	r3, #2
  61 0016 11D1     		bne	.L3
  62              	.L2:
  65:Core/Src/main.c ****     hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
  63              		.loc 1 65 15
  64 0018 7B68     		ldr	r3, [r7, #4]
  65 001a 9AB2     		uxth	r2, r3
  66 001c 4FF0FF33 		mov	r3, #-1
  67 0020 B968     		ldr	r1, [r7, #8]
  68 0022 0948     		ldr	r0, .L6
  69 0024 FFF7FEFF 		bl	HAL_UART_Transmit
  70 0028 0346     		mov	r3, r0
  71 002a FB75     		strb	r3, [r7, #23]
  66:Core/Src/main.c ****     if (hstatus == HAL_OK)
  72              		.loc 1 66 8
  73 002c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  74 002e 002B     		cmp	r3, #0
  75 0030 01D1     		bne	.L4
  67:Core/Src/main.c ****       return len;
  76              		.loc 1 67 14
  77 0032 7B68     		ldr	r3, [r7, #4]
  78 0034 04E0     		b	.L5
  79              	.L4:
  68:Core/Src/main.c ****     else
  69:Core/Src/main.c ****       return -1;
  80              		.loc 1 69 14
  81 0036 4FF0FF33 		mov	r3, #-1
  82 003a 01E0     		b	.L5
  83              	.L3:
  70:Core/Src/main.c ****   }
  71:Core/Src/main.c ****   return -1;
  84              		.loc 1 71 10
  85 003c 4FF0FF33 		mov	r3, #-1
  86              	.L5:
  72:Core/Src/main.c **** }
  87              		.loc 1 72 1
  88 0040 1846     		mov	r0, r3
  89 0042 1837     		adds	r7, r7, #24
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 8
  92 0044 BD46     		mov	sp, r7
  93              	.LCFI4:
  94              		.cfi_def_cfa_register 13
  95              		@ sp needed
  96 0046 80BD     		pop	{r7, pc}
  97              	.L7:
  98              		.align	2
ARM GAS  /tmp/ccmCgZV8.s 			page 4


  99              	.L6:
 100 0048 00000000 		.word	huart1
 101              		.cfi_endproc
 102              	.LFE133:
 104              		.section	.rodata
 105              		.align	2
 106              	.LC0:
 107 0000 50657269 		.ascii	"Peripherals Initialised - starting...\000"
 107      70686572 
 107      616C7320 
 107      496E6974 
 107      69616C69 
 108              		.section	.text.main,"ax",%progbits
 109              		.align	1
 110              		.global	main
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv4-sp-d16
 116              	main:
 117              	.LFB134:
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /**
  77:Core/Src/main.c ****   * @brief  The application entry point.
  78:Core/Src/main.c ****   * @retval int
  79:Core/Src/main.c ****   */
  80:Core/Src/main.c **** int main(void)
  81:Core/Src/main.c **** {
 118              		.loc 1 81 1
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              	.LCFI5:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 7, -8
 126              		.cfi_offset 14, -4
 127 0002 82B0     		sub	sp, sp, #8
 128              	.LCFI6:
 129              		.cfi_def_cfa_offset 16
 130 0004 00AF     		add	r7, sp, #0
 131              	.LCFI7:
 132              		.cfi_def_cfa_register 7
  82:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE END 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  89:Core/Src/main.c ****   HAL_Init();
 133              		.loc 1 89 3
 134 0006 FFF7FEFF 		bl	HAL_Init
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE BEGIN Init */
ARM GAS  /tmp/ccmCgZV8.s 			page 5


  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Configure the system clock */
  96:Core/Src/main.c ****   SystemClock_Config();
 135              		.loc 1 96 3
 136 000a FFF7FEFF 		bl	SystemClock_Config
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* Initialize all configured peripherals */
 103:Core/Src/main.c ****   MX_GPIO_Init();
 137              		.loc 1 103 3
 138 000e FFF7FEFF 		bl	MX_GPIO_Init
 104:Core/Src/main.c ****   MX_USART1_UART_Init();
 139              		.loc 1 104 3
 140 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   HAL_Delay(3000);
 141              		.loc 1 107 3
 142 0016 40F6B830 		movw	r0, #3000
 143 001a FFF7FEFF 		bl	HAL_Delay
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   DBG("Peripherals Initialised - starting...");
 144              		.loc 1 109 3
 145 001e 0D48     		ldr	r0, .L11
 146 0020 FFF7FEFF 		bl	printf
 147 0024 0A20     		movs	r0, #10
 148 0026 FFF7FEFF 		bl	putchar
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE END 2 */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Infinite loop */
 114:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   uint32_t last_blink = 0, now = 0;
 149              		.loc 1 116 12
 150 002a 0023     		movs	r3, #0
 151 002c 7B60     		str	r3, [r7, #4]
 152              		.loc 1 116 28
 153 002e 0023     		movs	r3, #0
 154 0030 3B60     		str	r3, [r7]
 155              	.L10:
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   while (1)
 119:Core/Src/main.c ****   {
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****     now = HAL_GetTick();
 156              		.loc 1 121 11
 157 0032 FFF7FEFF 		bl	HAL_GetTick
 158 0036 3860     		str	r0, [r7]
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****     if (now - last_blink >= 499) {
 159              		.loc 1 123 13
ARM GAS  /tmp/ccmCgZV8.s 			page 6


 160 0038 3A68     		ldr	r2, [r7]
 161 003a 7B68     		ldr	r3, [r7, #4]
 162 003c D31A     		subs	r3, r2, r3
 163              		.loc 1 123 8
 164 003e B3F5F97F 		cmp	r3, #498
 165 0042 F6D9     		bls	.L10
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****       HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 166              		.loc 1 125 7
 167 0044 4FF40051 		mov	r1, #8192
 168 0048 0348     		ldr	r0, .L11+4
 169 004a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****       last_blink = now;
 170              		.loc 1 127 18
 171 004e 3B68     		ldr	r3, [r7]
 172 0050 7B60     		str	r3, [r7, #4]
 121:Core/Src/main.c **** 
 173              		.loc 1 121 9
 174 0052 EEE7     		b	.L10
 175              	.L12:
 176              		.align	2
 177              	.L11:
 178 0054 00000000 		.word	.LC0
 179 0058 00080240 		.word	1073874944
 180              		.cfi_endproc
 181              	.LFE134:
 183              		.section	.text.SystemClock_Config,"ax",%progbits
 184              		.align	1
 185              		.global	SystemClock_Config
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SystemClock_Config:
 192              	.LFB135:
 128:Core/Src/main.c ****     }
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     /* USER CODE END WHILE */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 133:Core/Src/main.c ****   }
 134:Core/Src/main.c ****   /* USER CODE END 3 */
 135:Core/Src/main.c **** }
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** /**
 138:Core/Src/main.c ****   * @brief System Clock Configuration
 139:Core/Src/main.c ****   * @retval None
 140:Core/Src/main.c ****   */
 141:Core/Src/main.c **** void SystemClock_Config(void)
 142:Core/Src/main.c **** {
 193              		.loc 1 142 1
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 80
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
 198              	.LCFI8:
ARM GAS  /tmp/ccmCgZV8.s 			page 7


 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 94B0     		sub	sp, sp, #80
 203              	.LCFI9:
 204              		.cfi_def_cfa_offset 88
 205 0004 00AF     		add	r7, sp, #0
 206              	.LCFI10:
 207              		.cfi_def_cfa_register 7
 143:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 208              		.loc 1 143 22
 209 0006 07F12003 		add	r3, r7, #32
 210 000a 3022     		movs	r2, #48
 211 000c 0021     		movs	r1, #0
 212 000e 1846     		mov	r0, r3
 213 0010 FFF7FEFF 		bl	memset
 144:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 214              		.loc 1 144 22
 215 0014 07F10C03 		add	r3, r7, #12
 216 0018 0022     		movs	r2, #0
 217 001a 1A60     		str	r2, [r3]
 218 001c 5A60     		str	r2, [r3, #4]
 219 001e 9A60     		str	r2, [r3, #8]
 220 0020 DA60     		str	r2, [r3, #12]
 221 0022 1A61     		str	r2, [r3, #16]
 222              	.LBB4:
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 147:Core/Src/main.c ****   */
 148:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 223              		.loc 1 148 3
 224 0024 0023     		movs	r3, #0
 225 0026 BB60     		str	r3, [r7, #8]
 226 0028 274B     		ldr	r3, .L17
 227 002a 1B6C     		ldr	r3, [r3, #64]
 228 002c 264A     		ldr	r2, .L17
 229 002e 43F08053 		orr	r3, r3, #268435456
 230 0032 1364     		str	r3, [r2, #64]
 231 0034 244B     		ldr	r3, .L17
 232 0036 1B6C     		ldr	r3, [r3, #64]
 233 0038 03F08053 		and	r3, r3, #268435456
 234 003c BB60     		str	r3, [r7, #8]
 235 003e BB68     		ldr	r3, [r7, #8]
 236              	.LBE4:
 237              	.LBB5:
 149:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 238              		.loc 1 149 3
 239 0040 0023     		movs	r3, #0
 240 0042 7B60     		str	r3, [r7, #4]
 241 0044 214B     		ldr	r3, .L17+4
 242 0046 1B68     		ldr	r3, [r3]
 243 0048 204A     		ldr	r2, .L17+4
 244 004a 43F44043 		orr	r3, r3, #49152
 245 004e 1360     		str	r3, [r2]
 246 0050 1E4B     		ldr	r3, .L17+4
 247 0052 1B68     		ldr	r3, [r3]
 248 0054 03F44043 		and	r3, r3, #49152
ARM GAS  /tmp/ccmCgZV8.s 			page 8


 249 0058 7B60     		str	r3, [r7, #4]
 250 005a 7B68     		ldr	r3, [r7, #4]
 251              	.LBE5:
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 152:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 153:Core/Src/main.c ****   */
 154:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 252              		.loc 1 154 36
 253 005c 0123     		movs	r3, #1
 254 005e 3B62     		str	r3, [r7, #32]
 155:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 255              		.loc 1 155 30
 256 0060 4FF48033 		mov	r3, #65536
 257 0064 7B62     		str	r3, [r7, #36]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 258              		.loc 1 156 34
 259 0066 0223     		movs	r3, #2
 260 0068 BB63     		str	r3, [r7, #56]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 261              		.loc 1 157 35
 262 006a 4FF48003 		mov	r3, #4194304
 263 006e FB63     		str	r3, [r7, #60]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 12;
 264              		.loc 1 158 30
 265 0070 0C23     		movs	r3, #12
 266 0072 3B64     		str	r3, [r7, #64]
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 96;
 267              		.loc 1 159 30
 268 0074 6023     		movs	r3, #96
 269 0076 7B64     		str	r3, [r7, #68]
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 270              		.loc 1 160 30
 271 0078 0223     		movs	r3, #2
 272 007a BB64     		str	r3, [r7, #72]
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 273              		.loc 1 161 30
 274 007c 0423     		movs	r3, #4
 275 007e FB64     		str	r3, [r7, #76]
 162:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 276              		.loc 1 162 7
 277 0080 07F12003 		add	r3, r7, #32
 278 0084 1846     		mov	r0, r3
 279 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 280 008a 0346     		mov	r3, r0
 281              		.loc 1 162 6
 282 008c 002B     		cmp	r3, #0
 283 008e 01D0     		beq	.L14
 163:Core/Src/main.c ****   {
 164:Core/Src/main.c ****     Error_Handler();
 284              		.loc 1 164 5
 285 0090 FFF7FEFF 		bl	Error_Handler
 286              	.L14:
 165:Core/Src/main.c ****   }
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 168:Core/Src/main.c ****   */
ARM GAS  /tmp/ccmCgZV8.s 			page 9


 169:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 287              		.loc 1 169 31
 288 0094 0F23     		movs	r3, #15
 289 0096 FB60     		str	r3, [r7, #12]
 170:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 290              		.loc 1 171 34
 291 0098 0223     		movs	r3, #2
 292 009a 3B61     		str	r3, [r7, #16]
 172:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 293              		.loc 1 172 35
 294 009c 0023     		movs	r3, #0
 295 009e 7B61     		str	r3, [r7, #20]
 173:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 296              		.loc 1 173 36
 297 00a0 4FF48053 		mov	r3, #4096
 298 00a4 BB61     		str	r3, [r7, #24]
 174:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 299              		.loc 1 174 36
 300 00a6 0023     		movs	r3, #0
 301 00a8 FB61     		str	r3, [r7, #28]
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 302              		.loc 1 176 7
 303 00aa 07F10C03 		add	r3, r7, #12
 304 00ae 0321     		movs	r1, #3
 305 00b0 1846     		mov	r0, r3
 306 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 307 00b6 0346     		mov	r3, r0
 308              		.loc 1 176 6
 309 00b8 002B     		cmp	r3, #0
 310 00ba 01D0     		beq	.L16
 177:Core/Src/main.c ****   {
 178:Core/Src/main.c ****     Error_Handler();
 311              		.loc 1 178 5
 312 00bc FFF7FEFF 		bl	Error_Handler
 313              	.L16:
 179:Core/Src/main.c ****   }
 180:Core/Src/main.c **** }
 314              		.loc 1 180 1
 315 00c0 00BF     		nop
 316 00c2 5037     		adds	r7, r7, #80
 317              	.LCFI11:
 318              		.cfi_def_cfa_offset 8
 319 00c4 BD46     		mov	sp, r7
 320              	.LCFI12:
 321              		.cfi_def_cfa_register 13
 322              		@ sp needed
 323 00c6 80BD     		pop	{r7, pc}
 324              	.L18:
 325              		.align	2
 326              	.L17:
 327 00c8 00380240 		.word	1073887232
 328 00cc 00700040 		.word	1073770496
 329              		.cfi_endproc
 330              	.LFE135:
 332              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
ARM GAS  /tmp/ccmCgZV8.s 			page 10


 333              		.align	1
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	MX_USART1_UART_Init:
 340              	.LFB136:
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** /**
 183:Core/Src/main.c ****   * @brief USART1 Initialization Function
 184:Core/Src/main.c ****   * @param None
 185:Core/Src/main.c ****   * @retval None
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 188:Core/Src/main.c **** {
 341              		.loc 1 188 1
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345 0000 80B5     		push	{r7, lr}
 346              	.LCFI13:
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 00AF     		add	r7, sp, #0
 351              	.LCFI14:
 352              		.cfi_def_cfa_register 7
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 197:Core/Src/main.c ****   huart1.Instance = USART1;
 353              		.loc 1 197 19
 354 0004 114B     		ldr	r3, .L22
 355 0006 124A     		ldr	r2, .L22+4
 356 0008 1A60     		str	r2, [r3]
 198:Core/Src/main.c ****   huart1.Init.BaudRate = 921600;
 357              		.loc 1 198 24
 358 000a 104B     		ldr	r3, .L22
 359 000c 4FF46122 		mov	r2, #921600
 360 0010 5A60     		str	r2, [r3, #4]
 199:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 361              		.loc 1 199 26
 362 0012 0E4B     		ldr	r3, .L22
 363 0014 0022     		movs	r2, #0
 364 0016 9A60     		str	r2, [r3, #8]
 200:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 365              		.loc 1 200 24
 366 0018 0C4B     		ldr	r3, .L22
 367 001a 0022     		movs	r2, #0
 368 001c DA60     		str	r2, [r3, #12]
 201:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 369              		.loc 1 201 22
ARM GAS  /tmp/ccmCgZV8.s 			page 11


 370 001e 0B4B     		ldr	r3, .L22
 371 0020 0022     		movs	r2, #0
 372 0022 1A61     		str	r2, [r3, #16]
 202:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 373              		.loc 1 202 20
 374 0024 094B     		ldr	r3, .L22
 375 0026 0C22     		movs	r2, #12
 376 0028 5A61     		str	r2, [r3, #20]
 203:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 377              		.loc 1 203 25
 378 002a 084B     		ldr	r3, .L22
 379 002c 0022     		movs	r2, #0
 380 002e 9A61     		str	r2, [r3, #24]
 204:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 381              		.loc 1 204 28
 382 0030 064B     		ldr	r3, .L22
 383 0032 0022     		movs	r2, #0
 384 0034 DA61     		str	r2, [r3, #28]
 205:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 385              		.loc 1 205 7
 386 0036 0548     		ldr	r0, .L22
 387 0038 FFF7FEFF 		bl	HAL_UART_Init
 388 003c 0346     		mov	r3, r0
 389              		.loc 1 205 6
 390 003e 002B     		cmp	r3, #0
 391 0040 01D0     		beq	.L21
 206:Core/Src/main.c ****   {
 207:Core/Src/main.c ****     Error_Handler();
 392              		.loc 1 207 5
 393 0042 FFF7FEFF 		bl	Error_Handler
 394              	.L21:
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** }
 395              		.loc 1 213 1
 396 0046 00BF     		nop
 397 0048 80BD     		pop	{r7, pc}
 398              	.L23:
 399 004a 00BF     		.align	2
 400              	.L22:
 401 004c 00000000 		.word	huart1
 402 0050 00100140 		.word	1073811456
 403              		.cfi_endproc
 404              	.LFE136:
 406              		.section	.text.MX_GPIO_Init,"ax",%progbits
 407              		.align	1
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	MX_GPIO_Init:
 414              	.LFB137:
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
ARM GAS  /tmp/ccmCgZV8.s 			page 12


 216:Core/Src/main.c ****   * @brief GPIO Initialization Function
 217:Core/Src/main.c ****   * @param None
 218:Core/Src/main.c ****   * @retval None
 219:Core/Src/main.c ****   */
 220:Core/Src/main.c **** static void MX_GPIO_Init(void)
 221:Core/Src/main.c **** {
 415              		.loc 1 221 1
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 32
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0000 80B5     		push	{r7, lr}
 420              	.LCFI15:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 88B0     		sub	sp, sp, #32
 425              	.LCFI16:
 426              		.cfi_def_cfa_offset 40
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI17:
 429              		.cfi_def_cfa_register 7
 222:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 430              		.loc 1 222 20
 431 0006 07F10C03 		add	r3, r7, #12
 432 000a 0022     		movs	r2, #0
 433 000c 1A60     		str	r2, [r3]
 434 000e 5A60     		str	r2, [r3, #4]
 435 0010 9A60     		str	r2, [r3, #8]
 436 0012 DA60     		str	r2, [r3, #12]
 437 0014 1A61     		str	r2, [r3, #16]
 438              	.LBB6:
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 225:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 439              		.loc 1 225 3
 440 0016 0023     		movs	r3, #0
 441 0018 BB60     		str	r3, [r7, #8]
 442 001a 274B     		ldr	r3, .L25
 443 001c 1B6B     		ldr	r3, [r3, #48]
 444 001e 264A     		ldr	r2, .L25
 445 0020 43F00403 		orr	r3, r3, #4
 446 0024 1363     		str	r3, [r2, #48]
 447 0026 244B     		ldr	r3, .L25
 448 0028 1B6B     		ldr	r3, [r3, #48]
 449 002a 03F00403 		and	r3, r3, #4
 450 002e BB60     		str	r3, [r7, #8]
 451 0030 BB68     		ldr	r3, [r7, #8]
 452              	.LBE6:
 453              	.LBB7:
 226:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 454              		.loc 1 226 3
 455 0032 0023     		movs	r3, #0
 456 0034 7B60     		str	r3, [r7, #4]
 457 0036 204B     		ldr	r3, .L25
 458 0038 1B6B     		ldr	r3, [r3, #48]
 459 003a 1F4A     		ldr	r2, .L25
 460 003c 43F08003 		orr	r3, r3, #128
ARM GAS  /tmp/ccmCgZV8.s 			page 13


 461 0040 1363     		str	r3, [r2, #48]
 462 0042 1D4B     		ldr	r3, .L25
 463 0044 1B6B     		ldr	r3, [r3, #48]
 464 0046 03F08003 		and	r3, r3, #128
 465 004a 7B60     		str	r3, [r7, #4]
 466 004c 7B68     		ldr	r3, [r7, #4]
 467              	.LBE7:
 468              	.LBB8:
 227:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 469              		.loc 1 227 3
 470 004e 0023     		movs	r3, #0
 471 0050 3B60     		str	r3, [r7]
 472 0052 194B     		ldr	r3, .L25
 473 0054 1B6B     		ldr	r3, [r3, #48]
 474 0056 184A     		ldr	r2, .L25
 475 0058 43F00103 		orr	r3, r3, #1
 476 005c 1363     		str	r3, [r2, #48]
 477 005e 164B     		ldr	r3, .L25
 478 0060 1B6B     		ldr	r3, [r3, #48]
 479 0062 03F00103 		and	r3, r3, #1
 480 0066 3B60     		str	r3, [r7]
 481 0068 3B68     		ldr	r3, [r7]
 482              	.LBE8:
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 230:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 483              		.loc 1 230 3
 484 006a 0122     		movs	r2, #1
 485 006c 4FF40051 		mov	r1, #8192
 486 0070 1248     		ldr	r0, .L25+4
 487 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 233:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
 488              		.loc 1 233 23
 489 0076 4FF40053 		mov	r3, #8192
 490 007a FB60     		str	r3, [r7, #12]
 234:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 491              		.loc 1 234 24
 492 007c 1123     		movs	r3, #17
 493 007e 3B61     		str	r3, [r7, #16]
 235:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 494              		.loc 1 235 24
 495 0080 0023     		movs	r3, #0
 496 0082 7B61     		str	r3, [r7, #20]
 236:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 497              		.loc 1 236 25
 498 0084 0023     		movs	r3, #0
 499 0086 BB61     		str	r3, [r7, #24]
 237:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 500              		.loc 1 237 3
 501 0088 07F10C03 		add	r3, r7, #12
 502 008c 1946     		mov	r1, r3
 503 008e 0B48     		ldr	r0, .L25+4
 504 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /*Configure GPIO pin : BTN_Pin */
ARM GAS  /tmp/ccmCgZV8.s 			page 14


 240:Core/Src/main.c ****   GPIO_InitStruct.Pin = BTN_Pin;
 505              		.loc 1 240 23
 506 0094 0123     		movs	r3, #1
 507 0096 FB60     		str	r3, [r7, #12]
 241:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 508              		.loc 1 241 24
 509 0098 4FF44413 		mov	r3, #3211264
 510 009c 3B61     		str	r3, [r7, #16]
 242:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 511              		.loc 1 242 24
 512 009e 0123     		movs	r3, #1
 513 00a0 7B61     		str	r3, [r7, #20]
 243:Core/Src/main.c ****   HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 514              		.loc 1 243 3
 515 00a2 07F10C03 		add	r3, r7, #12
 516 00a6 1946     		mov	r1, r3
 517 00a8 0548     		ldr	r0, .L25+8
 518 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 244:Core/Src/main.c **** 
 245:Core/Src/main.c **** }
 519              		.loc 1 245 1
 520 00ae 00BF     		nop
 521 00b0 2037     		adds	r7, r7, #32
 522              	.LCFI18:
 523              		.cfi_def_cfa_offset 8
 524 00b2 BD46     		mov	sp, r7
 525              	.LCFI19:
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 00b4 80BD     		pop	{r7, pc}
 529              	.L26:
 530 00b6 00BF     		.align	2
 531              	.L25:
 532 00b8 00380240 		.word	1073887232
 533 00bc 00080240 		.word	1073874944
 534 00c0 00000240 		.word	1073872896
 535              		.cfi_endproc
 536              	.LFE137:
 538              		.section	.text.Error_Handler,"ax",%progbits
 539              		.align	1
 540              		.global	Error_Handler
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 544              		.fpu fpv4-sp-d16
 546              	Error_Handler:
 547              	.LFB138:
 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /* USER CODE END 4 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c **** /**
 252:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 253:Core/Src/main.c ****   * @retval None
 254:Core/Src/main.c ****   */
 255:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  /tmp/ccmCgZV8.s 			page 15


 256:Core/Src/main.c **** {
 548              		.loc 1 256 1
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553 0000 80B4     		push	{r7}
 554              	.LCFI20:
 555              		.cfi_def_cfa_offset 4
 556              		.cfi_offset 7, -4
 557 0002 00AF     		add	r7, sp, #0
 558              	.LCFI21:
 559              		.cfi_def_cfa_register 7
 560              	.LBB9:
 561              	.LBB10:
 562              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
ARM GAS  /tmp/ccmCgZV8.s 			page 16


  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
ARM GAS  /tmp/ccmCgZV8.s 			page 17


  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 563              		.loc 2 142 3
 564              		.syntax unified
 565              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 566 0004 72B6     		cpsid i
 567              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 568              		.loc 2 143 1
 569              		.thumb
 570              		.syntax unified
 571 0006 00BF     		nop
 572              	.L28:
 573              	.LBE10:
 574              	.LBE9:
ARM GAS  /tmp/ccmCgZV8.s 			page 18


 257:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 258:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 259:Core/Src/main.c ****   __disable_irq();
 260:Core/Src/main.c ****   while (1)
 575              		.loc 1 260 9 discriminator 1
 576 0008 FEE7     		b	.L28
 577              		.cfi_endproc
 578              	.LFE138:
 580              		.section	.text.assert_failed,"ax",%progbits
 581              		.align	1
 582              		.global	assert_failed
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	assert_failed:
 589              	.LFB139:
 261:Core/Src/main.c ****   {
 262:Core/Src/main.c ****   }
 263:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 264:Core/Src/main.c **** }
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** #ifdef  USE_FULL_ASSERT
 267:Core/Src/main.c **** /**
 268:Core/Src/main.c ****   * @brief  Reports the name of the source file and the source line number
 269:Core/Src/main.c ****   *         where the assert_param error has occurred.
 270:Core/Src/main.c ****   * @param  file: pointer to the source file name
 271:Core/Src/main.c ****   * @param  line: assert_param error line source number
 272:Core/Src/main.c ****   * @retval None
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c **** void assert_failed(uint8_t *file, uint32_t line)
 275:Core/Src/main.c **** {
 590              		.loc 1 275 1
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 8
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595 0000 80B4     		push	{r7}
 596              	.LCFI22:
 597              		.cfi_def_cfa_offset 4
 598              		.cfi_offset 7, -4
 599 0002 83B0     		sub	sp, sp, #12
 600              	.LCFI23:
 601              		.cfi_def_cfa_offset 16
 602 0004 00AF     		add	r7, sp, #0
 603              	.LCFI24:
 604              		.cfi_def_cfa_register 7
 605 0006 7860     		str	r0, [r7, #4]
 606 0008 3960     		str	r1, [r7]
 276:Core/Src/main.c ****   /* USER CODE BEGIN 6 */
 277:Core/Src/main.c ****   /* User can add his own implementation to report the file name and line number,
 278:Core/Src/main.c ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 279:Core/Src/main.c ****   /* USER CODE END 6 */
 280:Core/Src/main.c **** }
 607              		.loc 1 280 1
 608 000a 00BF     		nop
 609 000c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccmCgZV8.s 			page 19


 610              	.LCFI25:
 611              		.cfi_def_cfa_offset 4
 612 000e BD46     		mov	sp, r7
 613              	.LCFI26:
 614              		.cfi_def_cfa_register 13
 615              		@ sp needed
 616 0010 5DF8047B 		ldr	r7, [sp], #4
 617              	.LCFI27:
 618              		.cfi_restore 7
 619              		.cfi_def_cfa_offset 0
 620 0014 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE139:
 624              		.text
 625              	.Letext0:
 626              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 627              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 628              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 629              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 630              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 631              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 632              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 633              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
ARM GAS  /tmp/ccmCgZV8.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccmCgZV8.s:22     .bss.huart1:0000000000000000 huart1
     /tmp/ccmCgZV8.s:19     .bss.huart1:0000000000000000 $d
     /tmp/ccmCgZV8.s:25     .text._write:0000000000000000 $t
     /tmp/ccmCgZV8.s:33     .text._write:0000000000000000 _write
     /tmp/ccmCgZV8.s:100    .text._write:0000000000000048 $d
     /tmp/ccmCgZV8.s:105    .rodata:0000000000000000 $d
     /tmp/ccmCgZV8.s:109    .text.main:0000000000000000 $t
     /tmp/ccmCgZV8.s:116    .text.main:0000000000000000 main
     /tmp/ccmCgZV8.s:191    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccmCgZV8.s:413    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccmCgZV8.s:339    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccmCgZV8.s:178    .text.main:0000000000000054 $d
     /tmp/ccmCgZV8.s:184    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccmCgZV8.s:546    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccmCgZV8.s:327    .text.SystemClock_Config:00000000000000c8 $d
     /tmp/ccmCgZV8.s:333    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccmCgZV8.s:401    .text.MX_USART1_UART_Init:000000000000004c $d
     /tmp/ccmCgZV8.s:407    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccmCgZV8.s:532    .text.MX_GPIO_Init:00000000000000b8 $d
     /tmp/ccmCgZV8.s:539    .text.Error_Handler:0000000000000000 $t
     /tmp/ccmCgZV8.s:581    .text.assert_failed:0000000000000000 $t
     /tmp/ccmCgZV8.s:588    .text.assert_failed:0000000000000000 assert_failed

UNDEFINED SYMBOLS
HAL_UART_Transmit
HAL_Init
HAL_Delay
printf
putchar
HAL_GetTick
HAL_GPIO_TogglePin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
